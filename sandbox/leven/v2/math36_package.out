Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 04:44:16,201 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 04:44:16,207 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 04:44:16,207 main:382 - The compliance of the JVM is:  7
[INFO] 04:44:16,211 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-36  -failing  org.apache.commons.math.fraction.BigFractionTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Math_36/target/classes/:/script/jGenProg_Defects4J_Math_36/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 04:44:16,217 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_36/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_36/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:104) - mode is Leven
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 620
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_36/./output_astor/AstorMain-Math-36//bin//default from 620 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_36/./output_astor/AstorMain-Math-36//bin//default, /script/jGenProg_Defects4J_Math_36/target/classes/, /script/jGenProg_Defects4J_Math_36/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math.fraction.BigFractionTest#testFloatValueForLargeNumeratorAndDenominator
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math.fraction.BigFractionTest#testDoubleValueForLargeNumeratorAndDenominator
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math.util.FastMathTest#checkMissingFastMathClasses
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:3540, fails: 3, GZoltar suspicious 24855, with positive susp 93
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 3540
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 6 with susp > 0.1, we consider: 6
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 5501660 milliseconds (5501 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_36/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_36/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_36/target/classes/, /script/jGenProg_Defects4J_Math_36/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 572
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 6
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 6,  5
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 5
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 5, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 2.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_36/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 5501660
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math.fraction.BigFractionTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-36
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_36/target/classes/:/script/jGenProg_Defects4J_Math_36/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#checkBinomial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#checkBinomial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#checkBinomial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#checkBinomial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseFixedstring
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseFixedstring
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#formatDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#formatDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#doubleHighPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#doubleHighPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ceil
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ceil
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowSin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowSin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#checkLen
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#checkLen
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#incrementCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#incrementCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkFinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkFinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkFinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkFinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#hasNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#hasNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#remove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#remove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElementRolling
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElementRolling
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#substituteMostRecentElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#substituteMostRecentElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#expand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#expand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setExpansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setExpansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setInitialCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setInitialCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#shouldContract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#shouldContract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientLog(n, n - k);
}:if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientLog(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n <= 66) {


	int i = (n - k) + 1;
	for (int j = 1; j <= k; j++) {






		final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
		result = (result / (j / d)) * (i / d);
		i++;
	}
} else {



	int i = (n - k) + 1;
	for (int j = 1; j <= k; j++) {
		final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
		result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d);
		i++;
	}
}:if (n <= 66) {


	int $0 = (n - k) + 1;
	for (int $1 = 1; $1 <= k; $1++) {






		final long $2 = org.apache.commons.math.util.ArithmeticUtils.gcd($0, $1);
		result = (result / ($1 / $2)) * ($0 / $2);
		$0++;
	}
} else {



	int $3 = (n - k) + 1;
	for (int $4 = 1; $4 <= k; $4++) {
		final long $5 = org.apache.commons.math.util.ArithmeticUtils.gcd($3, $4);
		result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / ($4 / $5), $3 / $5);
		$3++;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(pattern, args);
}:if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(pattern, args);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
}:if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n == k) || (k == 0)) {
	return 1;
}:if ((n == k) || (k == 0)) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}:if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y > 0.0) || ((1 / y) > 0.0)) {
	return java.lang.Math.PI;
}:if ((y > 0.0) || ((1 / y) > 0.0)) {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.097) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.0036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		}}}:if (a > 0.097) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.0036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bits & 0x8000000000000000L) != 0) {

	long yi = ((long) (y));

	if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
		return -0.0;
	}
}:if ((bits & 0x8000000000000000L) != 0) {

	long $0 = ((long) (y));

	if (((y < 0) && (y == $0)) && (($0 & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	if (((y > 0) && (y == $0)) && (($0 & 1) == 1)) {
		return -0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToDoubleHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToDoubleHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o instanceof java.lang.Number) {
	return ((java.lang.Number) (o)).doubleValue();
}:if (o instanceof java.lang.Number) {
	return ((java.lang.Number) (o)).doubleValue();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	return x;
}:if (x == 0) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xb != 0.0) {
	t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
	((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
	c = a + t;
	d = -((c - a) - t);
	a = c;
	b = b + d;
}:if (xb != 0.0) {
	t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
	((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
	c = a + t;
	d = -((c - a) - t);
	a = c;
	b = b + d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Short.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((short) (-magnitude));
}:if ((sign >= 0) && 
(magnitude == java.lang.Short.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((short) (-magnitude));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.15) {
	absAtanh = 0.5 * org.apache.commons.math.util.FastMath.log((1 + a) / (1 - a));
} else {
	final double a2 = a * a;
	if (a > 0.087) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math.util.FastMath.F_1_15 + (a2 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
	} else { 		if (a > 0.031) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
		} else { 			if (a > 0.003) {
				absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
			} else {
				absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
			}}}
}:if (a > 0.15) {
	absAtanh = 0.5 * org.apache.commons.math.util.FastMath.log((1 + a) / (1 - a));
} else {
	final double $0 = a * a;
	if (a > 0.087) {
		absAtanh = a * (1 + ($0 * (org.apache.commons.math.util.FastMath.F_1_3 + ($0 * (org.apache.commons.math.util.FastMath.F_1_5 + ($0 * (org.apache.commons.math.util.FastMath.F_1_7 + ($0 * (org.apache.commons.math.util.FastMath.F_1_9 + ($0 * (org.apache.commons.math.util.FastMath.F_1_11 + ($0 * (org.apache.commons.math.util.FastMath.F_1_13 + ($0 * (org.apache.commons.math.util.FastMath.F_1_15 + ($0 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
	} else { 		if (a > 0.031) {
			absAtanh = a * (1 + ($0 * (org.apache.commons.math.util.FastMath.F_1_3 + ($0 * (org.apache.commons.math.util.FastMath.F_1_5 + ($0 * (org.apache.commons.math.util.FastMath.F_1_7 + ($0 * (org.apache.commons.math.util.FastMath.F_1_9 + ($0 * (org.apache.commons.math.util.FastMath.F_1_11 + ($0 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
		} else { 			if (a > 0.003) {
				absAtanh = a * (1 + ($0 * (org.apache.commons.math.util.FastMath.F_1_3 + ($0 * (org.apache.commons.math.util.FastMath.F_1_5 + ($0 * (org.apache.commons.math.util.FastMath.F_1_7 + ($0 * org.apache.commons.math.util.FastMath.F_1_9))))))));
			} else {
				absAtanh = a * (1 + ($0 * (org.apache.commons.math.util.FastMath.F_1_3 + ($0 * org.apache.commons.math.util.FastMath.F_1_5))));
			}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expectedSize == 0) {
	return 1;
}:if (expectedSize == 0) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (numElements < 1) {
	throw new org.apache.commons.math.exception.MathIllegalStateException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY);
}:if (this.numElements < 1) {
	throw new org.apache.commons.math.exception.MathIllegalStateException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shift != 0) {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1] << shift;
	shpi0 |= org.apache.commons.math.util.FastMath.RECIP_2PI[idx] >>> (64 - shift);
	shpiA = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift));
	shpiB = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift));
} else {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1];
	shpiA = org.apache.commons.math.util.FastMath.RECIP_2PI[idx];
	shpiB = org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1];
}:if (shift != 0) {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1] << shift;
	shpi0 |= org.apache.commons.math.util.FastMath.RECIP_2PI[idx] >>> (64 - shift);
	shpiA = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift));
	shpiB = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift));
} else {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1];
	shpiA = org.apache.commons.math.util.FastMath.RECIP_2PI[idx];
	shpiB = org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(values[i])) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
}:if (java.lang.Double.isInfinite(values[i])) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(value) || java.lang.Double.isInfinite(value)) {
	toAppendTo.append('(');
	toAppendTo.append(value);
	toAppendTo.append(')');
} else {
	format.format(value, toAppendTo, pos);
}:if (java.lang.Double.isNaN(value) || java.lang.Double.isInfinite(value)) {
	toAppendTo.append('(');
	toAppendTo.append(value);
	toAppendTo.append(')');
} else {
	format.format(value, toAppendTo, pos);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
	n);
}:if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
	n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 1) == 0) {

	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, ys, result);
	SINE_TABLE_A[i] = result[0] * 2.0;
	SINE_TABLE_B[i] = result[1] * 2.0;


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, ys, as);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, xs, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(as, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
} else {
	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];
	as[0] = SINE_TABLE_A[(i / 2) + 1];
	as[1] = SINE_TABLE_B[(i / 2) + 1];
	bs[0] = COSINE_TABLE_A[(i / 2) + 1];
	bs[1] = COSINE_TABLE_B[(i / 2) + 1];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, bs, temps);
	org.apache.commons.math.util.FastMathCalc.splitMult(ys, as, result);
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	SINE_TABLE_A[i] = result[0];
	SINE_TABLE_B[i] = result[1];


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, bs, result);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, as, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
}:if ((i & 1) == 0) {

	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, ys, result);
	SINE_TABLE_A[i] = result[0] * 2.0;
	SINE_TABLE_B[i] = result[1] * 2.0;


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, ys, as);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, xs, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(as, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
} else {
	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];
	as[0] = SINE_TABLE_A[(i / 2) + 1];
	as[1] = SINE_TABLE_B[(i / 2) + 1];
	bs[0] = COSINE_TABLE_A[(i / 2) + 1];
	bs[1] = COSINE_TABLE_B[(i / 2) + 1];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, bs, temps);
	org.apache.commons.math.util.FastMathCalc.splitMult(ys, as, result);
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	SINE_TABLE_A[i] = result[0];
	SINE_TABLE_B[i] = result[1];


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, bs, result);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, as, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(d)) {
	return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
} else { 	if (d == 0) {
		return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
	}}:if (java.lang.Double.isInfinite(d)) {
	return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
} else { 	if (d == 0) {
		return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (containsKey(key, index)) {
	return true;
}:if (containsKey(key, index)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + (numElements + 1)) > internalArray.length) {
	expand();
}:if ((this.startIndex + (this.numElements + 1)) > this.internalArray.length) {
	expand();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (other instanceof org.apache.commons.math.util.TransformerMap) {
	org.apache.commons.math.util.TransformerMap rhs = ((org.apache.commons.math.util.TransformerMap) (other));
	if (!defaultTransformer.equals(rhs.defaultTransformer)) {
		return false;
	}
	if (map.size() != rhs.map.size()) {
		return false;
	}
	for (java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math.util.NumberTransformer> entry : map.entrySet()) {
		if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
			return false;
		}
	}
	return true;
}:if (other instanceof org.apache.commons.math.util.TransformerMap) {
	org.apache.commons.math.util.TransformerMap $0 = ((org.apache.commons.math.util.TransformerMap) (other));
	if (!this.defaultTransformer.equals($0.defaultTransformer)) {
		return false;
	}
	if (this.map.size() != $0.map.size()) {
		return false;
	}
	for (java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math.util.NumberTransformer> $1 : this.map.entrySet()) {
		if (!$1.getValue().equals($0.map.get($1.getKey()))) {
			return false;
		}
	}
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	previous = values[index];
	newMapping = false;
}:if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	previous = this.values[index];
	newMapping = false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2)) {





	double scaleFactor = 1.0;
	double lastScaleFactor = 1.0;
	final int maxPower = 5;
	final double scale = org.apache.commons.math.util.FastMath.max(a, b);
	if (scale <= 0) {
		throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	infinite = true;
	for (int i = 0; i < maxPower; i++) {
		lastScaleFactor = scaleFactor;
		scaleFactor *= scale;
		if ((a != 0.0) && (a > b)) {
			p2 = (p1 / lastScaleFactor) + ((b / scaleFactor) * p0);
			q2 = (q1 / lastScaleFactor) + ((b / scaleFactor) * q0);
		} else { 			if (b != 0) {
				p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
				q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
			}}
		infinite = java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2);
		if (!infinite) {
			break;
		}
	}
}:if (java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2)) {





	double $0 = 1.0;
	double $1 = 1.0;
	final int $2 = 5;
	final double $3 = org.apache.commons.math.util.FastMath.max(a, b);
	if ($3 <= 0) {
		throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	infinite = true;
	for (int $4 = 0; $4 < $2; $4++) {
		$1 = $0;
		$0 *= $3;
		if ((a != 0.0) && (a > b)) {
			p2 = (p1 / $1) + ((b / $0) * p0);
			q2 = (q1 / $1) + ((b / $0) * q0);
		} else { 			if (b != 0) {
				p2 = ((a / $0) * p1) + (p0 / $1);
				q2 = ((a / $0) * q1) + (q0 / $1);
			}}
		infinite = java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2);
		if (!infinite) {
			break;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs > x3max) {
	double r = x3max / xabs;
	s3 = 1 + ((s3 * r) * r);
	x3max = xabs;
} else {
	if (xabs != 0) {
		double r = xabs / x3max;
		s3 += r * r;
	}
}:if (xabs > x3max) {
	double $3 = x3max / xabs;
	s3 = 1 + ((s3 * $3) * $3);
	x3max = xabs;
} else {
	if (xabs != 0) {
		double $4 = xabs / x3max;
		s3 += $4 * $4;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = 0.0;
	hiPrec[1] = 0.0;
}:if (hiPrec != null) {
	hiPrec[0] = 0.0;
	hiPrec[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
	return -0.0;
}:if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.003) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
} else {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
}:if (a > 0.003) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
} else {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (v > 0) {
	v = -v;
}:if (v > 0) {
	v = -v;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (endIndex < source.length()) {
	if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
		ret = java.lang.Double.valueOf(value);
		pos.setIndex(endIndex);
	}
}:if (endIndex < source.length()) {
	if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
		ret = java.lang.Double.valueOf(value);
		pos.setIndex(endIndex);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	expIntA[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	expIntB[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}:if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	expIntA[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	expIntB[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < n) {
	ret = c;
}:if (index < n) {
	ret = c;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}:if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((k == 1) || (k == (n - 1))) {
	return n;
}:if ((k == 1) || (k == (n - 1))) {
	return n;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	ret = a - b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
}:if (a < 0) {
	ret = a - b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.NEGATIVE_INFINITY) {

	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) < 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}:if (y == java.lang.Double.NEGATIVE_INFINITY) {

	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) < 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (cotanFlag) {
	xbadj = -xbadj;
}:if (cotanFlag) {
	xbadj = -xbadj;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
} else {
	LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
}:if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
} else {
	org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	long bits = java.lang.Double.doubleToLongBits(x);
	if ((bits & 0x8000000000000000L) != 0) {

		long yi = ((long) (y));

		if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
			return -0.0;
		}
	}

	if (y < 0) {
		return java.lang.Double.POSITIVE_INFINITY;
	}
	if (y > 0) {
		return 0.0;
	}

	return java.lang.Double.NaN;
}:if (x == 0) {
	long $1 = java.lang.Double.doubleToLongBits(x);
	if (($1 & 0x8000000000000000L) != 0) {

		long $2 = ((long) (y));

		if (((y < 0) && (y == $2)) && (($2 & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		if (((y > 0) && (y == $2)) && (($2 & 1) == 1)) {
			return -0.0;
		}
	}

	if (y < 0) {
		return java.lang.Double.POSITIVE_INFINITY;
	}
	if (y > 0) {
		return 0.0;
	}

	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0.0) {
	return x;
}:if (x == 0.0) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (mostSignificantLostBit != 0) {

	mantissa++;
}:if (mostSignificantLostBit != 0) {

	mantissa++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] expInt = org.apache.commons.math.util.FastMathResources.loadExpInt();
	EXP_INT_TABLE_A = expInt[0];
	EXP_INT_TABLE_B = expInt[1];
} else {
	EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
	EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
}:if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] $0 = org.apache.commons.math.util.FastMathResources.loadExpInt();
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = $0[0];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = $0[1];
} else {
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 8.0E298) && (y > (-8.0E298))) {
	double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000;
	ya = (y + tmp1) - tmp1;
	yb = y - ya;
} else {
	double tmp1 = y * 9.313225746154785E-10;
	double tmp2 = tmp1 * 9.313225746154785E-10;
	ya = (((tmp1 + tmp2) - tmp1) * org.apache.commons.math.util.FastMath.HEX_40000000) * org.apache.commons.math.util.FastMath.HEX_40000000;
	yb = y - ya;
}:if ((y < 8.0E298) && (y > (-8.0E298))) {
	double $7 = y * org.apache.commons.math.util.FastMath.HEX_40000000;
	ya = (y + $7) - $7;
	yb = y - ya;
} else {
	double $8 = y * 9.313225746154785E-10;
	double $9 = $8 * 9.313225746154785E-10;
	ya = ((($8 + $9) - $8) * org.apache.commons.math.util.FastMath.HEX_40000000) * org.apache.commons.math.util.FastMath.HEX_40000000;
	yb = y - ya;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s1 != 0) {
	norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max));
} else {
	if (s2 == 0) {
		norm = x3max * java.lang.Math.sqrt(s3);
	} else {
		if (s2 >= x3max) {
			norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
		} else {
			norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
		}
	}
}:if (s1 != 0) {
	norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max));
} else {
	if (s2 == 0) {
		norm = x3max * java.lang.Math.sqrt(s3);
	} else {
		if (s2 >= x3max) {
			norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
		} else {
			norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x <= (-1.0)) || (x >= 1.0)) {


	double[] hiPrec = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, hiPrec);
	if (x > 0.0) {
		return ((-1.0) + hiPrec[0]) + hiPrec[1];
	} else {
		final double ra = (-1.0) + hiPrec[0];
		double rb = -((ra + 1.0) - hiPrec[0]);
		rb += hiPrec[1];
		return ra + rb;
	}
}:if ((x <= (-1.0)) || (x >= 1.0)) {


	double[] $2 = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, $2);
	if (x > 0.0) {
		return ((-1.0) + $2[0]) + $2[1];
	} else {
		final double $3 = (-1.0) + $2[0];
		double $4 = -(($3 + 1.0) - $2[0]);
		$4 += $2[1];
		return $3 + $4;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	EXP_FRAC_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];
	EXP_FRAC_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];

	final double[] tmp = new double[2];


	final double factor = 1.0 / (org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN - 1);
	for (int i = 0; i < org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length; i++) {
		org.apache.commons.math.util.FastMathCalc.slowexp(i * factor, tmp);
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] expFrac = org.apache.commons.math.util.FastMathResources.loadExpFrac();
		EXP_FRAC_TABLE_A = expFrac[0];
		EXP_FRAC_TABLE_B = expFrac[1];
	} else {
		EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
		EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
	}}:if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];

	final double[] $1 = new double[2];


	final double $2 = 1.0 / (org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN - 1);
	for (int $3 = 0; $3 < org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length; $3++) {
		org.apache.commons.math.util.FastMathCalc.slowexp($3 * $2, $1);
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[$3] = $1[0];
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[$3] = $1[1];
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] $4 = org.apache.commons.math.util.FastMathResources.loadExpFrac();
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = $4[0];
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = $4[1];
	} else {
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	return false;
}:if (o == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.apache.commons.math.util.Precision.equalsIncludingNaN(x[i], y[i])) {
	return false;
}:if (!org.apache.commons.math.util.Precision.equalsIncludingNaN(x[i], y[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}:if (x == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x != x) {
	return x;
}:if (x != x) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((exp == (-1)) || (exp == 0)) {
	if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




		double xa = x - 1.0;
		double xb = (xa - x) + 1.0;
		double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000;
		double aa = (xa + tmp) - tmp;
		double ab = xa - aa;
		xa = aa;
		xb = ab;

		double ya = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
		double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

		for (int i = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; i >= 0; i--) {

			aa = ya * xa;
			ab = ((ya * xb) + (yb * xa)) + (yb * xb);

			tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
			ya = (aa + tmp) - tmp;
			yb = (aa - ya) + ab;


			aa = ya + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][0];
			ab = yb + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][1];

			tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
			ya = (aa + tmp) - tmp;
			yb = (aa - ya) + ab;
		}


		aa = ya * xa;
		ab = ((ya * xb) + (yb * xa)) + (yb * xb);

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;

		return ya + yb;
	}
}:if ((exp == (-1)) || (exp == 0)) {
	if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




		double $8 = x - 1.0;
		double $9 = ($8 - x) + 1.0;
		double $10 = $8 * org.apache.commons.math.util.FastMath.HEX_40000000;
		double $11 = ($8 + $10) - $10;
		double $12 = $8 - $11;
		$8 = $11;
		$9 = $12;

		double $13 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
		double $14 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

		for (int $15 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; $15 >= 0; $15--) {

			$11 = $13 * $8;
			$12 = (($13 * $9) + ($14 * $8)) + ($14 * $9);

			$10 = $11 * org.apache.commons.math.util.FastMath.HEX_40000000;
			$13 = ($11 + $10) - $10;
			$14 = ($11 - $13) + $12;


			$11 = $13 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$15][0];
			$12 = $14 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$15][1];

			$10 = $11 * org.apache.commons.math.util.FastMath.HEX_40000000;
			$13 = ($11 + $10) - $10;
			$14 = ($11 - $13) + $12;
		}


		$11 = $13 * $8;
		$12 = (($13 * $9) + ($14 * $8)) + ($14 * $9);

		$10 = $11 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$13 = ($11 + $10) - $10;
		$14 = ($11 - $13) + $12;

		return $13 + $14;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prodA++;
}:if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prodA++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n > (-1023)) && (n < 1024)) {
	return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52);
}:if ((n > (-1023)) && (n < 1024)) {
	return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!result) {
	return false;
} else {
	return java.util.Arrays.equals(internalArray, other.internalArray);
}:if (!result) {
	return false;
} else {
	return java.util.Arrays.equals(this.internalArray, other.internalArray);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}:if ((sign >= 0) && 
(magnitude == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = a;
	hiPrec[1] = b;
}:if (hiPrec != null) {
	hiPrec[0] = a;
	hiPrec[1] = b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (containsKey(key, index)) {
	return values[index];
}:if (containsKey(key, index)) {
	return this.values[index];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToFieldHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToFieldHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToFieldHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToFieldHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK - xInt;
}:if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK - xInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	previous = values[index];
	newMapping = false;
}:if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	previous = this.values[index];
	newMapping = false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	return (internalArray.length / ((float) (numElements))) > contractionCriteria;
} else {
	return (internalArray.length - numElements) > contractionCriteria;
}:if (this.expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	return (this.internalArray.length / ((float) (this.numElements))) > this.contractionCriteria;
} else {
	return (this.internalArray.length - this.numElements) > this.contractionCriteria;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {
	return b;
}:if (a > b) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {

	hiPrec[0] = tempA;
	hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
}:if (hiPrec != null) {

	hiPrec[0] = tempA;
	hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d < 0.5) {
	return y;
}:if (d < 0.5) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((object instanceof org.apache.commons.math.util.ResizableDoubleArray) == false) {
	return false;
}:if ((object instanceof org.apache.commons.math.util.ResizableDoubleArray) == false) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (current < 0) {
	throw new java.util.NoSuchElementException();
}:if (this.current < 0) {
	throw new java.util.NoSuchElementException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return missingEntries;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return this.missingEntries;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0) {
	negative = true;
	xa = -xa;
}:if (x < 0) {
	negative = true;
	xa = -xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x.length != y.length) {
	return false;
}:if (x.length != y.length) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (initialArray == null) {
	this.internalArray = new double[initialCapacity];
} else {
	this.internalArray = new double[initialArray.length];
	java.lang.System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);
	initialCapacity = initialArray.length;
	numElements = initialArray.length;
}:if (initialArray == null) {
	this.internalArray = new double[this.initialCapacity];
} else {
	this.internalArray = new double[initialArray.length];
	java.lang.System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);
	this.initialCapacity = initialArray.length;
	this.numElements = initialArray.length;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expansion <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, 
	expansion);
}:if (expansion <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, 
	expansion);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math.util.FastMathCalc.slowLog(d);
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
	} else {
		LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
	}}:if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	org.apache.commons.math.util.FastMath.lnMant.LN_MANT = new double[org.apache.commons.math.util.FastMath.LN_MANT_LEN][];


	for (int $0 = 0; $0 < org.apache.commons.math.util.FastMath.lnMant.LN_MANT.length; $0++) {
		final double $1 = java.lang.Double.longBitsToDouble((((long) ($0)) << 42) | 0x3ff0000000000000L);
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT[$0] = org.apache.commons.math.util.FastMathCalc.slowLog($1);
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
	} else {
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else { 		if (scaledExponent > (-53)) {



			mantissa = mantissa | (1L << 52);


			final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if (mostSignificantLostBit != 0) {

				mantissa++;
			}
			return java.lang.Double.longBitsToDouble(sign | mantissa);

		} else {

			return sign == 0L ? 0.0 : -0.0;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 52) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0xfffffffffffffL;

		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}}
}:if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else { 		if (scaledExponent > (-53)) {



			mantissa = mantissa | (1L << 52);


			final long $2 = mantissa & (1L << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if ($2 != 0) {

				mantissa++;
			}
			return java.lang.Double.longBitsToDouble(sign | mantissa);

		} else {

			return sign == 0L ? 0.0 : -0.0;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 52) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0xfffffffffffffL;

		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shouldContract()) {
	contract();
}:if (shouldContract()) {
	contract();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
}:if (java.lang.Double.isInfinite(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shouldGrowTable()) {
	growTable();
}:if (shouldGrowTable()) {
	growTable();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(f) || java.lang.Double.isNaN(direction)) {
	return java.lang.Float.NaN;
} else { 	if (f == direction) {
		return ((float) (direction));
	} else { 		if (java.lang.Float.isInfinite(f)) {
			return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
		} else { 			if (f == 0.0F) {
				return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
			}}}}:if (java.lang.Double.isNaN(f) || java.lang.Double.isNaN(direction)) {
	return java.lang.Float.NaN;
} else { 	if (f == direction) {
		return ((float) (direction));
	} else { 		if (java.lang.Float.isInfinite(f)) {
			return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
		} else { 			if (f == 0.0F) {
				return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == 0) {


	while ((mantissa >>> 52) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0xfffffffffffffL;

	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}}:if (exponent == 0) {


	while ((mantissa >>> 52) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0xfffffffffffffL;

	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	x = -x;
	negate = true;
}:if (x < 0.0) {
	x = -x;
	negate = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 21) {
	return org.apache.commons.math.util.ArithmeticUtils.factorial(n);
}:if (n < 21) {
	return org.apache.commons.math.util.ArithmeticUtils.factorial(n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrecOut != null) {
	hiPrecOut[0] = ya;
	hiPrecOut[1] = yb;
}:if (hiPrecOut != null) {
	hiPrecOut[0] = ya;
	hiPrecOut[1] = yb;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x)) {
	return java.lang.Double.POSITIVE_INFINITY;
}:if (java.lang.Double.isInfinite(x)) {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (sum == 0) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
}:if (sum == 0) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + i) > internalArray.length) {
	expandTo(startIndex + i);
}:if ((this.startIndex + i) > this.internalArray.length) {
	expandTo(this.startIndex + i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}:if ((sign >= 0) && 
(magnitude == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.0036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
}:if (a > 0.0036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.167) {
	absAsinh = org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.FastMath.sqrt((a * a) + 1) + a);
} else {
	final double a2 = a * a;
	if (a > 0.097) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else { 			if (a > 0.0036) {
				absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			} else {
				absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			}}}
}:if (a > 0.167) {
	absAsinh = org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.FastMath.sqrt((a * a) + 1) + a);
} else {
	final double $0 = a * a;
	if (a > 0.097) {
		absAsinh = a * (1 - (($0 * (org.apache.commons.math.util.FastMath.F_1_3 - (($0 * (org.apache.commons.math.util.FastMath.F_1_5 - (($0 * (org.apache.commons.math.util.FastMath.F_1_7 - (($0 * (org.apache.commons.math.util.FastMath.F_1_9 - (($0 * (org.apache.commons.math.util.FastMath.F_1_11 - (($0 * (org.apache.commons.math.util.FastMath.F_1_13 - (($0 * (org.apache.commons.math.util.FastMath.F_1_15 - (($0 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.036) {
			absAsinh = a * (1 - (($0 * (org.apache.commons.math.util.FastMath.F_1_3 - (($0 * (org.apache.commons.math.util.FastMath.F_1_5 - (($0 * (org.apache.commons.math.util.FastMath.F_1_7 - (($0 * (org.apache.commons.math.util.FastMath.F_1_9 - (($0 * (org.apache.commons.math.util.FastMath.F_1_11 - (($0 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else { 			if (a > 0.0036) {
				absAsinh = a * (1 - (($0 * (org.apache.commons.math.util.FastMath.F_1_3 - (($0 * (org.apache.commons.math.util.FastMath.F_1_5 - (($0 * (org.apache.commons.math.util.FastMath.F_1_7 - (($0 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			} else {
				absAsinh = a * (1 - (($0 * (org.apache.commons.math.util.FastMath.F_1_3 - (($0 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((quadrant & 1) == 0) {
	result = org.apache.commons.math.util.FastMath.tanQ(xa, xb, false);
} else {
	result = -org.apache.commons.math.util.FastMath.tanQ(xa, xb, true);
}:if ((quadrant & 1) == 0) {
	result = org.apache.commons.math.util.FastMath.tanQ(xa, xb, false);
} else {
	result = -org.apache.commons.math.util.FastMath.tanQ(xa, xb, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	if ((y > 0) || ((1 / y) > 0)) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
	}
}:if (x == 0) {
	if ((y > 0) || ((1 / y) > 0)) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (abort) {
	throw new org.apache.commons.math.exception.NonMonotonicSequenceException(val[index], previous, index, dir, strict);
} else {
	return false;
}:if (abort) {
	throw new org.apache.commons.math.exception.NonMonotonicSequenceException(val[index], previous, index, dir, strict);
} else {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - xInt;
}:if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - xInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
unscaled) / 2.0)) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
}:if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
unscaled) / 2.0)) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == (-1)) {
	return x / 0.0;
}:if (x == (-1)) {
	return x / 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa == 0.0) {
	long bits = java.lang.Double.doubleToLongBits(x);
	if (bits < 0) {
		return -0.0;
	}
	return 0.0;
}:if (xa == 0.0) {
	long $0 = java.lang.Double.doubleToLongBits(x);
	if ($0 < 0) {
		return -0.0;
	}
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
	return java.lang.Double.NaN;
} else {

	final int expX = org.apache.commons.math.util.FastMath.getExponent(x);
	final int expY = org.apache.commons.math.util.FastMath.getExponent(y);
	if (expX > (expY + 27)) {

		return org.apache.commons.math.util.FastMath.abs(x);
	} else { 		if (expY > (expX + 27)) {

			return org.apache.commons.math.util.FastMath.abs(y);
		} else {


			final int middleExp = (expX + expY) / 2;


			final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
			final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


			final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


			return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

		}}

}:if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
	return java.lang.Double.NaN;
} else {

	final int $8 = org.apache.commons.math.util.FastMath.getExponent(x);
	final int $9 = org.apache.commons.math.util.FastMath.getExponent(y);
	if ($8 > ($9 + 27)) {

		return org.apache.commons.math.util.FastMath.abs(x);
	} else { 		if ($9 > ($8 + 27)) {

			return org.apache.commons.math.util.FastMath.abs(y);
		} else {


			final int $10 = ($8 + $9) / 2;


			final double $11 = org.apache.commons.math.util.FastMath.scalb(x, -$10);
			final double $12 = org.apache.commons.math.util.FastMath.scalb(y, -$10);


			final double $13 = org.apache.commons.math.util.FastMath.sqrt(($11 * $11) + ($12 * $12));


			return org.apache.commons.math.util.FastMath.scalb($13, $10);

		}}

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index == max) {

	return true;
}:if (index == max) {

	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_ELEMENT, x, i);
}:if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_ELEMENT, x, i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];
}:if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.087) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math.util.FastMath.F_1_15 + (a2 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
} else { 	if (a > 0.031) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
	} else { 		if (a > 0.003) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
		} else {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
		}}}:if (a > 0.087) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math.util.FastMath.F_1_15 + (a2 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
} else { 	if (a > 0.031) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
	} else { 		if (a > 0.003) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
		} else {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal > 746) {
	if (hiPrec != null) {
		hiPrec[0] = 0.0;
		hiPrec[1] = 0.0;
	}
	return 0.0;
}:if (intVal > 746) {
	if (hiPrec != null) {
		hiPrec[0] = 0.0;
		hiPrec[1] = 0.0;
	}
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (invx == 0) {
	if (x > 0) {
		return y;
	} else {
		return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
	}
}:if (invx == 0) {
	if (x > 0) {
		return y;
	} else {
		return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, n - k);
}:if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (u > 0) {
	u = -u;
}:if (u > 0) {
	u = -u;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((a == 0) || (b == 0)) {
	return 0;
}:if ((a == 0) || (b == 0)) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x != x) || (x == 0.0)) {
	return x;
}:if ((x != x) || (x == 0.0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (containsKey(key, index)) {
	return doRemove(index);
}:if (containsKey(key, index)) {
	return doRemove(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (extra != 0.0) {
	result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
} else {
	result = ((tempC * z) + tempB) + tempA;
}:if (extra != 0.0) {
	result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
} else {
	result = ((tempC * z) + tempB) + tempA;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 1) != 0) {
	continue;
}:if ((i & 1) != 0) {
	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(lores)) {
	return lores;
}:if (java.lang.Double.isInfinite(lores)) {
	return lores;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b < 0) {

	if (a >= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else { 	if (b > 0) {

		if ((java.lang.Long.MIN_VALUE / b) <= a) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();

		}
	} else {

		ret = 0;
	}}:if (b < 0) {

	if (a >= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else { 	if (b > 0) {

		if ((java.lang.Long.MIN_VALUE / b) <= a) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();

		}
	} else {

		ret = 0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a <= (java.lang.Long.MAX_VALUE - b)) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}:if (a <= (java.lang.Long.MAX_VALUE - b)) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs > rdwarf) {
	if (xabs > x1max) {
		double r = x1max / xabs;
		s1 = 1 + ((s1 * r) * r);
		x1max = xabs;
	} else {
		double r = xabs / x1max;
		s1 += r * r;
	}
} else {
	if (xabs > x3max) {
		double r = x3max / xabs;
		s3 = 1 + ((s3 * r) * r);
		x3max = xabs;
	} else {
		if (xabs != 0) {
			double r = xabs / x3max;
			s3 += r * r;
		}
	}
}:if (xabs > rdwarf) {
	if (xabs > x1max) {
		double $5 = x1max / xabs;
		s1 = 1 + ((s1 * $5) * $5);
		x1max = xabs;
	} else {
		double $6 = xabs / x1max;
		s1 += $6 * $6;
	}
} else {
	if (xabs > x3max) {
		double $7 = x3max / xabs;
		s3 = 1 + ((s3 * $7) * $7);
		x3max = xabs;
	} else {
		if (xabs != 0) {
			double $8 = xabs / x3max;
			s3 += $8 * $8;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y > 0) {
	long yi = ((long) (y));
	if ((y == yi) && ((yi & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}:if (y > 0) {
	long $4 = ((long) (y));
	if ((y == $4) && (($4 & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == (-1.0)) {
	return java.lang.Math.PI;
}:if (x == (-1.0)) {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (comp >= 0) {
	return false;
}:if (comp >= 0) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y > 0) || ((1 / y) > 0)) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}:if ((y > 0) || ((1 / y) > 0)) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index >= numElements) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
} else { 	if (index >= 0) {
		return internalArray[startIndex + index];
	} else {
		throw new java.lang.ArrayIndexOutOfBoundsException(index);
	}}:if (index >= this.numElements) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
} else { 	if (index >= 0) {
		return this.internalArray[this.startIndex + index];
	} else {
		throw new java.lang.ArrayIndexOutOfBoundsException(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < k) {
	throw new org.apache.commons.math.exception.NumberIsTooLargeException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, 
	k, n, true);
}:if (n < k) {
	throw new org.apache.commons.math.exception.NumberIsTooLargeException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, 
	k, n, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal > 709) {

	final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
	if (hiPrec != null) {
		hiPrec[0] /= 2.85040095144011776E17;
		hiPrec[1] /= 2.85040095144011776E17;
	}
	return result;
}:if (intVal > 709) {

	final double $0 = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
	if (hiPrec != null) {
		hiPrec[0] /= 2.85040095144011776E17;
		hiPrec[1] /= 2.85040095144011776E17;
	}
	return $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > 0) {

	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else { 	if (scaledExponent > (-24)) {



		mantissa = mantissa | (1 << 23);


		final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if (mostSignificantLostBit != 0) {

			mantissa++;
		}
		return java.lang.Float.intBitsToFloat(sign | mantissa);

	} else {

		return sign == 0 ? 0.0F : -0.0F;
	}}:if (scaledExponent > 0) {

	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else { 	if (scaledExponent > (-24)) {



		mantissa = mantissa | (1 << 23);


		final int $4 = mantissa & (1 << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if ($4 != 0) {

			mantissa++;
		}
		return java.lang.Float.intBitsToFloat(sign | mantissa);

	} else {

		return sign == 0 ? 0.0F : -0.0F;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE, 
	i);
}:if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE, 
	i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(o instanceof org.apache.commons.math.util.Pair)) {
	return false;
} else {
	org.apache.commons.math.util.Pair<?, ?> oP = ((org.apache.commons.math.util.Pair<?, ?>) (o));
	return (key == null ? 
	oP.getKey() == null : 
	key.equals(oP.getKey())) && 
	(value == null ? 
	oP.getValue() == null : 
	value.equals(oP.getValue()));
}:if (!(o instanceof org.apache.commons.math.util.Pair)) {
	return false;
} else {
	org.apache.commons.math.util.Pair<?, ?> $0 = ((org.apache.commons.math.util.Pair<?, ?>) (o));
	return (this.key == null ? 
	$0.getKey() == null : 
	this.key.equals($0.getKey())) && 
	(this.value == null ? 
	$0.getValue() == null : 
	this.value.equals($0.getValue()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x == null) || (y == null)) {
	return !((x == null) ^ (y == null));
}:if ((x == null) || (y == null)) {
	return !((x == null) ^ (y == null));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negative) {

	double denom = 1.0 + ya;
	double denomr = 1.0 / denom;
	double denomb = (-((denom - 1.0) - ya)) + yb;
	double ratio = ya * denomr;
	temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double ra = (ratio + temp) - temp;
	double rb = ratio - ra;

	temp = denom * org.apache.commons.math.util.FastMath.HEX_40000000;
	za = (denom + temp) - temp;
	zb = denom - za;

	rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;










	rb += yb * denomr;
	rb += (((-ya) * denomb) * denomr) * denomr;


	ya = -ra;
	yb = -rb;
}:if (negative) {

	double $5 = 1.0 + ya;
	double $6 = 1.0 / $5;
	double $7 = (-(($5 - 1.0) - ya)) + yb;
	double $8 = ya * $6;
	temp = $8 * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double $9 = ($8 + temp) - temp;
	double $10 = $8 - $9;

	temp = $5 * org.apache.commons.math.util.FastMath.HEX_40000000;
	za = ($5 + temp) - temp;
	zb = $5 - za;

	$10 += ((((ya - (za * $9)) - (za * $10)) - (zb * $9)) - (zb * $10)) * $6;










	$10 += yb * $6;
	$10 += (((-ya) * $7) * $6) * $6;


	ya = -$9;
	yb = -$10;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negative) {
	quadrant ^= 2;
}:if (negative) {
	quadrant ^= 2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}:if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = ((a1 * b1) + (a2 * b2)) + (a3 * b3);
}:if (java.lang.Double.isNaN(result)) {


	result = ((a1 * b1) + (a2 * b2)) + (a3 * b3);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = (a1 * b1) + (a2 * b2);
}:if (java.lang.Double.isNaN(result)) {


	result = (a1 * b1) + (a2 * b2);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x80000000) {
	return b;
}:if (bits == 0x80000000) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < y) {
	return -1;
}:if (x < y) {
	return -1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((expansionMode != org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) && 
(expansionMode != org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE, 
	expansionMode, org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE", 
	org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE, "ADDITIVE_MODE");
}:if ((expansionMode != org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) && 
(expansionMode != org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE, 
	expansionMode, org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE", 
	org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE, "ADDITIVE_MODE");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k == 63) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}:if (k == 63) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b > 0) {

	if ((java.lang.Long.MIN_VALUE / b) <= a) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();

	}
} else {

	ret = 0;
}:if (b > 0) {

	if ((java.lang.Long.MIN_VALUE / b) <= a) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();

	}
} else {

	ret = 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	intVal = ((int) (-x));

	if (intVal > 746) {
		if (hiPrec != null) {
			hiPrec[0] = 0.0;
			hiPrec[1] = 0.0;
		}
		return 0.0;
	}

	if (intVal > 709) {

		final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
		if (hiPrec != null) {
			hiPrec[0] /= 2.85040095144011776E17;
			hiPrec[1] /= 2.85040095144011776E17;
		}
		return result;
	}

	if (intVal == 709) {

		final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
		if (hiPrec != null) {
			hiPrec[0] /= 4.455505956692757;
			hiPrec[1] /= 4.455505956692757;
		}
		return result;
	}

	intVal++;

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];

	intVal = -intVal;
} else {
	intVal = ((int) (x));

	if (intVal > 709) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
			hiPrec[1] = 0.0;
		}
		return java.lang.Double.POSITIVE_INFINITY;
	}

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
}:if (x < 0.0) {
	intVal = ((int) (-x));

	if (intVal > 746) {
		if (hiPrec != null) {
			hiPrec[0] = 0.0;
			hiPrec[1] = 0.0;
		}
		return 0.0;
	}

	if (intVal > 709) {

		final double $2 = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
		if (hiPrec != null) {
			hiPrec[0] /= 2.85040095144011776E17;
			hiPrec[1] /= 2.85040095144011776E17;
		}
		return $2;
	}

	if (intVal == 709) {

		final double $3 = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
		if (hiPrec != null) {
			hiPrec[0] /= 4.455505956692757;
			hiPrec[1] /= 4.455505956692757;
		}
		return $3;
	}

	intVal++;

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];

	intVal = -intVal;
} else {
	intVal = ((int) (x));

	if (intVal > 709) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
			hiPrec[1] = 0.0;
		}
		return java.lang.Double.POSITIVE_INFINITY;
	}

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((direction < f) ^ (sign == 0)) {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
} else {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
}:if ((direction < f) ^ (sign == 0)) {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
} else {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
	ret = java.lang.Double.valueOf(value);
	pos.setIndex(endIndex);
}:if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
	ret = java.lang.Double.valueOf(value);
	pos.setIndex(endIndex);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4);
}:if (java.lang.Double.isNaN(result)) {


	result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0) {
	xa = -xa;
}:if (x < 0) {
	xa = -xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (comp > 0) {
	return false;
}:if (comp > 0) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}:if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (lcm == java.lang.Long.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
	a, b);
}:if (lcm == java.lang.Long.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
	a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);
}:if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Long.MIN_VALUE - b) <= a) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}:if ((java.lang.Long.MIN_VALUE - b) <= a) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y < 0.0) {
	return 0.0;
} else {
	return java.lang.Double.POSITIVE_INFINITY;
}:if (y < 0.0) {
	return 0.0;
} else {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > (-24)) {



	mantissa = mantissa | (1 << 23);


	final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if (mostSignificantLostBit != 0) {

		mantissa++;
	}
	return java.lang.Float.intBitsToFloat(sign | mantissa);

} else {

	return sign == 0 ? 0.0F : -0.0F;
}:if (scaledExponent > (-24)) {



	mantissa = mantissa | (1 << 23);


	final int $3 = mantissa & (1 << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if ($3 != 0) {

		mantissa++;
	}
	return java.lang.Float.intBitsToFloat(sign | mantissa);

} else {

	return sign == 0 ? 0.0F : -0.0F;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
}:if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a != b) {
	return java.lang.Double.NaN;
}:if (a != b) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (in[0] == 0.0) {
	in[0] = in[1];
	in[1] = 0.0;
}:if (in[0] == 0.0) {
	in[0] = in[1];
	in[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < b) {
	return a;
}:if (a < b) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (object == this) {
	return true;
}:if (object == this) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (ra == 0) {
	ra = org.apache.commons.math.util.FastMath.copySign(0.0, y);
}:if (ra == 0) {
	ra = org.apache.commons.math.util.FastMath.copySign(0.0, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	return java.lang.Double.NEGATIVE_INFINITY;
}:if (x == 0) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NaN;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || (x == 0.0)) {
	return x;
}:if (java.lang.Double.isInfinite(x) || (x == 0.0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}:if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa < 1) {
	idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
} else {
	final double oneOverXa = 1 / xa;
	idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
}:if (xa < 1) {
	idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
} else {
	final double $0 = 1 / xa;
	idx = ((int) ((-(((((-1.7168146928204135) * $0) * $0) + 8.0) * $0)) + 13.07));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negate ^ leftPlane) {
	result = -result;
}:if (negate ^ leftPlane) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + numElements) > internalArray.length) {
	expand();
}:if ((this.startIndex + this.numElements) > this.internalArray.length) {
	expand();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(r)) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
}:if (java.lang.Double.isNaN(r)) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 0) {
	return y;
} else {
	return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
}:if (x > 0) {
	return y;
} else {
	return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == 0) {
	final double result = x * y;
	final double invx = 1.0 / x;
	final double invy = 1.0 / y;

	if (invx == 0) {
		if (x > 0) {
			return y;
		} else {
			return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
		}
	}

	if ((x < 0) || (invx < 0)) {
		if ((y < 0) || (invy < 0)) {
			return -java.lang.Math.PI;
		} else {
			return java.lang.Math.PI;
		}
	} else {
		return result;
	}
}:if (y == 0) {
	final double $0 = x * y;
	final double $1 = 1.0 / x;
	final double $2 = 1.0 / y;

	if ($1 == 0) {
		if (x > 0) {
			return y;
		} else {
			return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
		}
	}

	if ((x < 0) || ($1 < 0)) {
		if ((y < 0) || ($2 < 0)) {
			return -java.lang.Math.PI;
		} else {
			return java.lang.Math.PI;
		}
	} else {
		return $0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];

	org.apache.commons.math.util.FastMathCalc.resplit(result);
}:if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];

	org.apache.commons.math.util.FastMathCalc.resplit(result);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d == direction) {
	return direction;
} else { 	if (java.lang.Double.isInfinite(d)) {
		return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
	} else { 		if (d == 0) {
			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
		}}}:if (d == direction) {
	return direction;
} else { 	if (java.lang.Double.isInfinite(d)) {
		return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
	} else { 		if (d == 0) {
			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK - yInt;
}:if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK - yInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x >= 0.5) {
	double[] hiPrec = new double[2];

	org.apache.commons.math.util.FastMath.exp(x * 2.0, 0.0, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);


	double na = (-1.0) + ya;
	double nb = -((na + 1.0) - ya);
	double temp = na + yb;
	nb += -((temp - na) - yb);
	na = temp;


	double da = 1.0 + ya;
	double db = -((da - 1.0) - ya);
	temp = da + yb;
	db += -((temp - da) - yb);
	da = temp;

	temp = da * org.apache.commons.math.util.FastMath.HEX_40000000;
	double daa = (da + temp) - temp;
	double dab = da - daa;


	double ratio = na / da;
	temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	double ratioa = (ratio + temp) - temp;
	double ratiob = ratio - ratioa;


	ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;


	ratiob += nb / da;

	ratiob += (((-db) * na) / da) / da;

	result = ratioa + ratiob;
} else 
{
	double[] hiPrec = new double[2];

	org.apache.commons.math.util.FastMath.expm1(x * 2.0, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);


	double na = ya;
	double nb = yb;


	double da = 2.0 + ya;
	double db = -((da - 2.0) - ya);
	double temp = da + yb;
	db += -((temp - da) - yb);
	da = temp;

	temp = da * org.apache.commons.math.util.FastMath.HEX_40000000;
	double daa = (da + temp) - temp;
	double dab = da - daa;


	double ratio = na / da;
	temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	double ratioa = (ratio + temp) - temp;
	double ratiob = ratio - ratioa;


	ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;


	ratiob += nb / da;

	ratiob += (((-db) * na) / da) / da;

	result = ratioa + ratiob;
}:if (x >= 0.5) {
	double[] $0 = new double[2];

	org.apache.commons.math.util.FastMath.exp(x * 2.0, 0.0, $0);

	double $1 = $0[0] + $0[1];
	double $2 = -(($1 - $0[0]) - $0[1]);


	double $3 = (-1.0) + $1;
	double $4 = -(($3 + 1.0) - $1);
	double $5 = $3 + $2;
	$4 += -(($5 - $3) - $2);
	$3 = $5;


	double $6 = 1.0 + $1;
	double $7 = -(($6 - 1.0) - $1);
	$5 = $6 + $2;
	$7 += -(($5 - $6) - $2);
	$6 = $5;

	$5 = $6 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $8 = ($6 + $5) - $5;
	double $9 = $6 - $8;


	double $10 = $3 / $6;
	$5 = $10 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $11 = ($10 + $5) - $5;
	double $12 = $10 - $11;


	$12 += (((($3 - ($8 * $11)) - ($8 * $12)) - ($9 * $11)) - ($9 * $12)) / $6;


	$12 += $4 / $6;

	$12 += (((-$7) * $3) / $6) / $6;

	result = $11 + $12;
} else 
{
	double[] $13 = new double[2];

	org.apache.commons.math.util.FastMath.expm1(x * 2.0, $13);

	double $14 = $13[0] + $13[1];
	double $15 = -(($14 - $13[0]) - $13[1]);


	double $16 = $14;
	double $17 = $15;


	double $18 = 2.0 + $14;
	double $19 = -(($18 - 2.0) - $14);
	double $20 = $18 + $15;
	$19 += -(($20 - $18) - $15);
	$18 = $20;

	$20 = $18 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $21 = ($18 + $20) - $20;
	double $22 = $18 - $21;


	double $23 = $16 / $18;
	$20 = $23 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $24 = ($23 + $20) - $20;
	double $25 = $23 - $24;


	$25 += (((($16 - ($21 * $24)) - ($21 * $25)) - ($22 * $24)) - ($22 * $25)) / $18;


	$25 += $17 / $18;

	$25 += (((-$19) * $16) / $18) / $18;

	result = $24 + $25;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (number != null) {
	break;
}:if (number != null) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e.compareTo(java.math.BigInteger.ZERO) < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}:if (e.compareTo(java.math.BigInteger.ZERO) < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expY > (expX + 27)) {

	return org.apache.commons.math.util.FastMath.abs(y);
} else {


	final int middleExp = (expX + expY) / 2;


	final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
	final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


	final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


	return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

}:if (expY > (expX + 27)) {

	return org.apache.commons.math.util.FastMath.abs(y);
} else {


	final int $0 = (expX + expY) / 2;


	final double $1 = org.apache.commons.math.util.FastMath.scalb(x, -$0);
	final double $2 = org.apache.commons.math.util.FastMath.scalb(y, -$0);


	final double $3 = org.apache.commons.math.util.FastMath.sqrt(($1 * $1) + ($2 * $2));


	return org.apache.commons.math.util.FastMath.scalb($3, $0);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d == 0) {
	return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
}:if (d == 0) {
	return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (cotanFlag) {
	double tmp;
	tmp = cosa; 	cosa = sina; 	sina = tmp;
	tmp = cosb; 	cosb = sinb; 	sinb = tmp;
}:if (cotanFlag) {
	double $0;
	$0 = cosa; 	cosa = sina; 	sina = $0;
	$0 = cosb; 	cosb = sinb; 	sinb = $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xb != 0.0) {


	double xbadj = xb + ((est * est) * xb);
	if (cotanFlag) {
		xbadj = -xbadj;
	}

	err += xbadj;
}:if (xb != 0.0) {


	double $1 = xb + ((est * est) * xb);
	if (cotanFlag) {
		$1 = -$1;
	}

	err += $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (contraction <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, 
	contraction);
}:if (contraction <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, 
	contraction);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n > 2097) {
	return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}:if (n > 2097) {
	return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (tS <= 0) {
	throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
}:if (tS <= 0) {
	throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0) {




	if (a <= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else {

	ret = 0;
}:if (a > 0) {




	if (a <= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else {

	ret = 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	if ((y > 0) || ((1 / y) > 0)) {
		return 0.0;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -0.0;
	}
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	if ((y > 0) || ((1 / y) > 0)) {
		return 0.0;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal == 709) {

	final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
	if (hiPrec != null) {
		hiPrec[0] /= 4.455505956692757;
		hiPrec[1] /= 4.455505956692757;
	}
	return result;
}:if (intVal == 709) {

	final double $1 = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
	if (hiPrec != null) {
		hiPrec[0] /= 4.455505956692757;
		hiPrec[1] /= 4.455505956692757;
	}
	return $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y > 0) {
	return 0.0;
}:if (y > 0) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n > 20) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if (n > 20) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n > 276) {
	return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}:if (n > 276) {
	return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b == java.lang.Long.MIN_VALUE) {
	if (a < 0) {
		ret = a - b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
	}
} else {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION);
}:if (b == java.lang.Long.MIN_VALUE) {
	if (a < 0) {
		ret = a - b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
	}
} else {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == (-1.0)) {
	return -0.0;
}:if (y == (-1.0)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (initialCapacity > 0) {
	synchronized(this) {
		this.initialCapacity = initialCapacity;
	}
} else {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE, 
	initialCapacity);
}:if (initialCapacity > 0) {
	synchronized(this) {
		this.initialCapacity = initialCapacity;
	}
} else {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE, 
	initialCapacity);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}:if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0) {

	if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
		return org.apache.commons.math.util.FastMath.pow(-x, y);
	}

	if (y == ((long) (y))) {

		return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
	} else {
		return java.lang.Double.NaN;
	}
}:if (x < 0) {

	if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
		return org.apache.commons.math.util.FastMath.pow(-x, y);
	}

	if (y == ((long) (y))) {

		return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
	} else {
		return java.lang.Double.NaN;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 1.633123935319537E16) {
	return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}:if (xa > 1.633123935319537E16) {
	return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || ((1 / y) < 0)) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}:if ((y < 0) || ((1 / y) < 0)) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b < 0) {

	if ((java.lang.Long.MIN_VALUE - b) <= a) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
} else {

	ret = a + b;
}:if (b < 0) {

	if ((java.lang.Long.MIN_VALUE - b) <= a) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
} else {

	ret = a + b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 2) != 0) {
	facts[0] = -facts[0];
	facts[1] = -facts[1];
}:if ((i & 2) != 0) {
	facts[0] = -facts[0];
	facts[1] = -facts[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.Precision.equals(x, y, maxUlps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}:if (org.apache.commons.math.util.Precision.equals(x, y, maxUlps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y.length != len) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(y.length, len);
}:if (y.length != len) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(y.length, len);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d > 0.5) {
	if (y == (-1.0)) {
		return -0.0;
	}
	return y + 1.0;
}:if (d > 0.5) {
	if (y == (-1.0)) {
		return -0.0;
	}
	return y + 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (counter[i] == (size[i] - 1)) {
	counter[i] = 0;
} else {
	++counter[i];
	break;
}:if (this.counter[i] == (this.size[i] - 1)) {
	this.counter[i] = 0;
} else {
	++this.counter[i];
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 20.0) {
	return 1.0;
}:if (x > 20.0) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((e & 0x1) != 0) {
	result = result.multiply(k2p);
}:if ((e & 0x1) != 0) {
	result = result.multiply(k2p);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e.testBit(0)) {
	result = result.multiply(k2p);
}:if (e.testBit(0)) {
	result = result.multiply(k2p);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || java.lang.Double.isInfinite(y)) {
	return java.lang.Double.POSITIVE_INFINITY;
} else { 	if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
		return java.lang.Double.NaN;
	} else {

		final int expX = org.apache.commons.math.util.FastMath.getExponent(x);
		final int expY = org.apache.commons.math.util.FastMath.getExponent(y);
		if (expX > (expY + 27)) {

			return org.apache.commons.math.util.FastMath.abs(x);
		} else { 			if (expY > (expX + 27)) {

				return org.apache.commons.math.util.FastMath.abs(y);
			} else {


				final int middleExp = (expX + expY) / 2;


				final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
				final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


				final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


				return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

			}}

	}}:if (java.lang.Double.isInfinite(x) || java.lang.Double.isInfinite(y)) {
	return java.lang.Double.POSITIVE_INFINITY;
} else { 	if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
		return java.lang.Double.NaN;
	} else {

		final int $14 = org.apache.commons.math.util.FastMath.getExponent(x);
		final int $15 = org.apache.commons.math.util.FastMath.getExponent(y);
		if ($14 > ($15 + 27)) {

			return org.apache.commons.math.util.FastMath.abs(x);
		} else { 			if ($15 > ($14 + 27)) {

				return org.apache.commons.math.util.FastMath.abs(y);
			} else {


				final int $16 = ($14 + $15) / 2;


				final double $17 = org.apache.commons.math.util.FastMath.scalb(x, -$16);
				final double $18 = org.apache.commons.math.util.FastMath.scalb(y, -$16);


				final double $19 = org.apache.commons.math.util.FastMath.sqrt(($17 * $17) + ($18 * $18));


				return org.apache.commons.math.util.FastMath.scalb($19, $16);

			}}

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y < 0) {
	return java.lang.Double.POSITIVE_INFINITY;
}:if (y < 0) {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y == yi) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}:if ((y == yi) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x * x) == 1.0) {
	return java.lang.Double.NaN;
}:if ((x * x) == 1.0) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {

	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.NEGATIVE_INFINITY;
}:if (x == 0) {

	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Float.isInfinite(f)) {
	return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
} else { 	if (f == 0.0F) {
		return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
	}}:if (java.lang.Float.isInfinite(f)) {
	return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
} else { 	if (f == 0.0F) {
		return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expX > (expY + 27)) {

	return org.apache.commons.math.util.FastMath.abs(x);
} else { 	if (expY > (expX + 27)) {

		return org.apache.commons.math.util.FastMath.abs(y);
	} else {


		final int middleExp = (expX + expY) / 2;


		final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
		final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


		final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


		return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

	}}:if (expX > (expY + 27)) {

	return org.apache.commons.math.util.FastMath.abs(x);
} else { 	if (expY > (expX + 27)) {

		return org.apache.commons.math.util.FastMath.abs(y);
	} else {


		final int $4 = (expX + expY) / 2;


		final double $5 = org.apache.commons.math.util.FastMath.scalb(x, -$4);
		final double $6 = org.apache.commons.math.util.FastMath.scalb(y, -$4);


		final double $7 = org.apache.commons.math.util.FastMath.sqrt(($5 * $5) + ($6 * $6));


		return org.apache.commons.math.util.FastMath.scalb($7, $4);

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Float.isNaN(f) || java.lang.Float.isInfinite(f)) || (f == 0.0F)) {
	return f;
}:if ((java.lang.Float.isNaN(f) || java.lang.Float.isInfinite(f)) || (f == 0.0F)) {
	return f;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < n) {
	char c;
	do {
		c = source.charAt(index++);
	} while (java.lang.Character.isWhitespace(c) && (index < n) );
	pos.setIndex(index);

	if (index < n) {
		ret = c;
	}
}:if (index < n) {
	char $0;
	do {
		$0 = source.charAt(index++);
	} while (java.lang.Character.isWhitespace($0) && (index < n) );
	pos.setIndex(index);

	if (index < n) {
		ret = $0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 1.5707963267948966) {




	int k = ((int) (xa * 0.6366197723675814));


	double remA;
	double remB;
	while (true) {
		double a = (-k) * 1.570796251296997;
		remA = xa + a;
		remB = -((remA - xa) - a);

		a = (-k) * 7.549789948768648E-8;
		double b = remA;
		remA = a + b;
		remB += -((remA - b) - a);

		a = (-k) * 6.123233995736766E-17;
		b = remA;
		remA = a + b;
		remB += -((remA - b) - a);

		if (remA > 0.0) {
			break;
		}




		k--;
	} 
	quadrant = k & 3;
	xa = remA;
	xb = remB;
}:if (xa > 1.5707963267948966) {




	int $1 = ((int) (xa * 0.6366197723675814));


	double $2;
	double $3;
	while (true) {
		double $4 = (-$1) * 1.570796251296997;
		$2 = xa + $4;
		$3 = -(($2 - xa) - $4);

		$4 = (-$1) * 7.549789948768648E-8;
		double $5 = $2;
		$2 = $4 + $5;
		$3 += -(($2 - $5) - $4);

		$4 = (-$1) * 6.123233995736766E-17;
		$5 = $2;
		$2 = $4 + $5;
		$3 += -(($2 - $5) - $4);

		if ($2 > 0.0) {
			break;
		}




		$1--;
	} 
	quadrant = $1 & 3;
	xa = $2;
	xb = $3;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expectedLen != actual) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(actual, expectedLen);
}:if (expectedLen != actual) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(actual, expectedLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (resDir.exists()) {
	if (!resDir.isDirectory()) {
		throw new org.apache.commons.math.exception.MathInternalError();
	}
} else {
	try {
		resDir.mkdirs();
	} catch (java.lang.SecurityException e) {
		throw new org.apache.commons.math.exception.MathInternalError(e);
	}
}:if (resDir.exists()) {
	if (!resDir.isDirectory()) {
		throw new org.apache.commons.math.exception.MathInternalError();
	}
} else {
	try {
		resDir.mkdirs();
	} catch (java.lang.SecurityException e) {
		throw new org.apache.commons.math.exception.MathInternalError(e);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result == 0) {
	result = result * x;
}:if (result == 0) {
	result = result * x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa == 0.0) {
	return leftPlane ? org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
}:if (xa == 0.0) {
	return leftPlane ? org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result[1] != result[1]) {
	result[1] = 0.0;
}:if (result[1] != result[1]) {
	result[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y > 0) || ((1 / y) > 0)) {
	return 0.0;
}:if ((y > 0) || ((1 / y) > 0)) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x * x) < 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}:if ((x * x) < 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.0036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	}}:if (a > 0.036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.0036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 1030) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, k));
}:if (n < 1030) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, k));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x != x) {
	return java.lang.Double.NaN;
}:if (x != x) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x > 1.0E-6) || (x < (-1.0E-6))) {
	double xpa = 1.0 + x;
	double xpb = -((xpa - 1.0) - x);

	double[] hiPrec = new double[2];

	final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec);
	if (java.lang.Double.isInfinite(lores)) {
		return lores;
	}



	double fx1 = xpb / xpa;

	double epsilon = (0.5 * fx1) + 1.0;
	epsilon = epsilon * fx1;

	return (epsilon + hiPrec[1]) + hiPrec[0];
}:if ((x > 1.0E-6) || (x < (-1.0E-6))) {
	double $0 = 1.0 + x;
	double $1 = -(($0 - 1.0) - x);

	double[] $2 = new double[2];

	final double $3 = org.apache.commons.math.util.FastMath.log($0, $2);
	if (java.lang.Double.isInfinite($3)) {
		return $3;
	}



	double $4 = $1 / $0;

	double $5 = (0.5 * $4) + 1.0;
	$5 = $5 * $4;

	return ($5 + $2[1]) + $2[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((xa != xa) || (xa == java.lang.Double.POSITIVE_INFINITY)) {
	return java.lang.Double.NaN;
}:if ((xa != xa) || (xa == java.lang.Double.POSITIVE_INFINITY)) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else { 	if (fraction < 0.5) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {

		if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
		unscaled) / 2.0)) {
			unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
		} else {
			unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
		}
	}}:if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else { 	if (fraction < 0.5) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {

		if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
		unscaled) / 2.0)) {
			unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
		} else {
			unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent < 2047) {
	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else {
	return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}:if (scaledExponent < 2047) {
	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else {
	return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == 0) {
	return x * y;
}:if (y == 0) {
	return x * y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (other == null) {
	return false;
}:if (other == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || ((1 / y) < 0)) {
	return -0.0;
}:if ((y < 0) || ((1 / y) < 0)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index < 0) || 
(index >= totalSize)) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
}:if ((index < 0) || 
(index >= this.totalSize)) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, this.totalSize);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] /= 4.455505956692757;
	hiPrec[1] /= 4.455505956692757;
}:if (hiPrec != null) {
	hiPrec[0] /= 4.455505956692757;
	hiPrec[1] /= 4.455505956692757;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == (-1.0)) {
	return (-java.lang.Math.PI) / 2.0;
}:if (x == (-1.0)) {
	return (-java.lang.Math.PI) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
}:if (java.lang.Double.isNaN(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}:if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < (-20)) {
	return -1.0;
}:if (x < (-20)) {
	return -1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (lcm == java.lang.Integer.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
	a, b);
}:if (lcm == java.lang.Integer.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
	a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scale <= 0) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}:if (scale <= 0) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n > (-127)) && (n < 128)) {
	return f * java.lang.Float.intBitsToFloat((n + 127) << 23);
}:if ((n > (-127)) && (n < 128)) {
	return f * java.lang.Float.intBitsToFloat((n + 127) << 23);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n <= 61) {

	int i = (n - k) + 1;
	for (int j = 1; j <= k; j++) {
		result = (result * i) / j;
		i++;
	}
} else { 	if (n <= 66) {


		int i = (n - k) + 1;
		for (int j = 1; j <= k; j++) {






			final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
			result = (result / (j / d)) * (i / d);
			i++;
		}
	} else {



		int i = (n - k) + 1;
		for (int j = 1; j <= k; j++) {
			final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
			result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d);
			i++;
		}
	}}:if (n <= 61) {

	int $6 = (n - k) + 1;
	for (int $7 = 1; $7 <= k; $7++) {
		result = (result * $6) / $7;
		$6++;
	}
} else { 	if (n <= 66) {


		int $8 = (n - k) + 1;
		for (int $9 = 1; $9 <= k; $9++) {






			final long $10 = org.apache.commons.math.util.ArithmeticUtils.gcd($8, $9);
			result = (result / ($9 / $10)) * ($8 / $10);
			$8++;
		}
	} else {



		int $11 = (n - k) + 1;
		for (int $12 = 1; $12 <= k; $12++) {
			final long $13 = org.apache.commons.math.util.ArithmeticUtils.gcd($11, $12);
			result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / ($12 / $13), $11 / $13);
			$11++;
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i > numElements) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, 
	i, numElements);
} else { 	if (i < 0) {
		throw new org.apache.commons.math.exception.MathIllegalArgumentException(
		org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
		i);
	} else {

		numElements -= i;
		if (front) {
			startIndex += i;
		}
	}}:if (i > this.numElements) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, 
	i, this.numElements);
} else { 	if (i < 0) {
		throw new org.apache.commons.math.exception.MathIllegalArgumentException(
		org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
		i);
	} else {

		this.numElements -= i;
		if (front) {
			this.startIndex += i;
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || (invy < 0)) {
	return -java.lang.Math.PI;
} else {
	return java.lang.Math.PI;
}:if ((y < 0) || (invy < 0)) {
	return -java.lang.Math.PI;
} else {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent < 255) {
	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else {
	return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}:if (scaledExponent < 255) {
	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else {
	return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {
	return a;
}:if (a > b) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits < 0) {
	return -0.0;
}:if (bits < 0) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 3294198.0) {



	double[] reduceResults = new double[3];
	org.apache.commons.math.util.FastMath.reducePayneHanek(xa, reduceResults);
	quadrant = ((int) (reduceResults[0])) & 3;
	xa = reduceResults[1];
	xb = reduceResults[2];
} else { 	if (xa > 1.5707963267948966) {




		int k = ((int) (xa * 0.6366197723675814));


		double remA;
		double remB;
		while (true) {
			double a = (-k) * 1.570796251296997;
			remA = xa + a;
			remB = -((remA - xa) - a);

			a = (-k) * 7.549789948768648E-8;
			double b = remA;
			remA = a + b;
			remB += -((remA - b) - a);

			a = (-k) * 6.123233995736766E-17;
			b = remA;
			remA = a + b;
			remB += -((remA - b) - a);

			if (remA > 0.0) {
				break;
			}




			k--;
		} 
		quadrant = k & 3;
		xa = remA;
		xb = remB;
	}}:if (xa > 3294198.0) {



	double[] $6 = new double[3];
	org.apache.commons.math.util.FastMath.reducePayneHanek(xa, $6);
	quadrant = ((int) ($6[0])) & 3;
	xa = $6[1];
	xb = $6[2];
} else { 	if (xa > 1.5707963267948966) {




		int $7 = ((int) (xa * 0.6366197723675814));


		double $8;
		double $9;
		while (true) {
			double $10 = (-$7) * 1.570796251296997;
			$8 = xa + $10;
			$9 = -(($8 - xa) - $10);

			$10 = (-$7) * 7.549789948768648E-8;
			double $11 = $8;
			$8 = $10 + $11;
			$9 += -(($8 - $11) - $10);

			$10 = (-$7) * 6.123233995736766E-17;
			$11 = $8;
			$8 = $10 + $11;
			$9 += -(($8 - $11) - $10);

			if ($8 > 0.0) {
				break;
			}




			$7--;
		} 
		quadrant = $7 & 3;
		xa = $8;
		xb = $9;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 0.25) {
	double[] hiPrec = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);

	double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000;
	double yaa = (ya + temp) - temp;
	double yab = ya - yaa;


	double recip = 1.0 / ya;
	temp = recip * org.apache.commons.math.util.FastMath.HEX_40000000;
	double recipa = (recip + temp) - temp;
	double recipb = recip - recipa;


	recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;

	recipb += ((-yb) * recip) * recip;

	recipa = -recipa;
	recipb = -recipb;


	temp = ya + recipa;
	yb += -((temp - ya) - recipa);
	ya = temp;
	temp = ya + recipb;
	yb += -((temp - ya) - recipb);
	ya = temp;

	result = ya + yb;
	result *= 0.5;
} else 
{
	double[] hiPrec = new double[2];
	org.apache.commons.math.util.FastMath.expm1(x, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);


	double denom = 1.0 + ya;
	double denomr = 1.0 / denom;
	double denomb = (-((denom - 1.0) - ya)) + yb;
	double ratio = ya * denomr;
	double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	double ra = (ratio + temp) - temp;
	double rb = ratio - ra;

	temp = denom * org.apache.commons.math.util.FastMath.HEX_40000000;
	double za = (denom + temp) - temp;
	double zb = denom - za;

	rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;


	rb += yb * denomr;
	rb += (((-ya) * denomb) * denomr) * denomr;


	temp = ya + ra;
	yb += -((temp - ya) - ra);
	ya = temp;
	temp = ya + rb;
	yb += -((temp - ya) - rb);
	ya = temp;

	result = ya + yb;
	result *= 0.5;
}:if (x > 0.25) {
	double[] $0 = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, $0);

	double $1 = $0[0] + $0[1];
	double $2 = -(($1 - $0[0]) - $0[1]);

	double $3 = $1 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $4 = ($1 + $3) - $3;
	double $5 = $1 - $4;


	double $6 = 1.0 / $1;
	$3 = $6 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $7 = ($6 + $3) - $3;
	double $8 = $6 - $7;


	$8 += ((((1.0 - ($4 * $7)) - ($4 * $8)) - ($5 * $7)) - ($5 * $8)) * $6;

	$8 += ((-$2) * $6) * $6;

	$7 = -$7;
	$8 = -$8;


	$3 = $1 + $7;
	$2 += -(($3 - $1) - $7);
	$1 = $3;
	$3 = $1 + $8;
	$2 += -(($3 - $1) - $8);
	$1 = $3;

	result = $1 + $2;
	result *= 0.5;
} else 
{
	double[] $9 = new double[2];
	org.apache.commons.math.util.FastMath.expm1(x, $9);

	double $10 = $9[0] + $9[1];
	double $11 = -(($10 - $9[0]) - $9[1]);


	double $12 = 1.0 + $10;
	double $13 = 1.0 / $12;
	double $14 = (-(($12 - 1.0) - $10)) + $11;
	double $15 = $10 * $13;
	double $16 = $15 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $17 = ($15 + $16) - $16;
	double $18 = $15 - $17;

	$16 = $12 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $19 = ($12 + $16) - $16;
	double $20 = $12 - $19;

	$18 += (((($10 - ($19 * $17)) - ($19 * $18)) - ($20 * $17)) - ($20 * $18)) * $13;


	$18 += $11 * $13;
	$18 += (((-$10) * $14) * $13) * $13;


	$16 = $10 + $17;
	$11 += -(($16 - $10) - $17);
	$10 = $16;
	$16 = $10 + $18;
	$11 += -(($16 - $10) - $18);
	$10 = $16;

	result = $10 + $11;
	result *= 0.5;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((p & 1) != 0) {
	org.apache.commons.math.util.FastMathCalc.quadMult(ys, xs, as);
	ys[0] = as[0]; 	ys[1] = as[1];
}:if ((p & 1) != 0) {
	org.apache.commons.math.util.FastMathCalc.quadMult(ys, xs, as);
	ys[0] = as[0]; 	ys[1] = as[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (0 <= comp) {
	return false;
}:if (0 <= comp) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < (-277)) {
	return f > 0 ? 0.0F : -0.0F;
}:if (n < (-277)) {
	return f > 0 ? 0.0F : -0.0F;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] expFrac = org.apache.commons.math.util.FastMathResources.loadExpFrac();
	EXP_FRAC_TABLE_A = expFrac[0];
	EXP_FRAC_TABLE_B = expFrac[1];
} else {
	EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
	EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
}:if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] $0 = org.apache.commons.math.util.FastMathResources.loadExpFrac();
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = $0[0];
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = $0[1];
} else {
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	x = -x;
	negative = true;
}:if (x < 0.0) {
	x = -x;
	negative = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x80000000) {
	return a;
}:if (bits == 0x80000000) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x8000000000000000L) {
	return b;
}:if (bits == 0x8000000000000000L) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return org.apache.commons.math.util.FastMath.pow(-x, y);
}:if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return org.apache.commons.math.util.FastMath.pow(-x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	hiPrec[1] = 0.0;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	hiPrec[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}:if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(b, a, pattern);
} else {


	if (a < 0) {
		if (b < 0) {

			if ((java.lang.Long.MIN_VALUE - b) <= a) {
				ret = a + b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
			}
		} else {

			ret = a + b;
		}
	} else {




		if (a <= (java.lang.Long.MAX_VALUE - b)) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	}
}:if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(b, a, pattern);
} else {


	if (a < 0) {
		if (b < 0) {

			if ((java.lang.Long.MIN_VALUE - b) <= a) {
				ret = a + b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
			}
		} else {

			ret = a + b;
		}
	} else {




		if (a <= (java.lang.Long.MAX_VALUE - b)) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 1.0) {
	return 0.0;
}:if (x == 1.0) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
}:if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index < 0) || 
(index >= size[i])) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, size[i] - 1);
}:if ((index < 0) || 
(index >= this.size[i])) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, this.size[i] - 1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
	i);
} else {

	numElements -= i;
	if (front) {
		startIndex += i;
	}
}:if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
	i);
} else {

	this.numElements -= i;
	if (front) {
		this.startIndex += i;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x)) {
	return x;
} else {
	return java.lang.Double.NaN;
}:if (java.lang.Double.isInfinite(x)) {
	return x;
} else {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (f == 0.0F) {
	return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
}:if (f == 0.0F) {
	return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (f == direction) {
	return ((float) (direction));
} else { 	if (java.lang.Float.isInfinite(f)) {
		return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
	} else { 		if (f == 0.0F) {
			return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
		}}}:if (f == direction) {
	return ((float) (direction));
} else { 	if (java.lang.Float.isInfinite(f)) {
		return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
	} else { 		if (f == 0.0F) {
			return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
	break;
}:if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x < 0) && (y != x)) {
	y--;
}:if ((x < 0) && (y != x)) {
	y--;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




	double xa = x - 1.0;
	double xb = (xa - x) + 1.0;
	double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000;
	double aa = (xa + tmp) - tmp;
	double ab = xa - aa;
	xa = aa;
	xb = ab;

	double ya = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
	double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

	for (int i = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; i >= 0; i--) {

		aa = ya * xa;
		ab = ((ya * xb) + (yb * xa)) + (yb * xb);

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;


		aa = ya + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][0];
		ab = yb + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][1];

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;
	}


	aa = ya * xa;
	ab = ((ya * xb) + (yb * xa)) + (yb * xb);

	tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
	ya = (aa + tmp) - tmp;
	yb = (aa - ya) + ab;

	return ya + yb;
}:if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




	double $0 = x - 1.0;
	double $1 = ($0 - x) + 1.0;
	double $2 = $0 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $3 = ($0 + $2) - $2;
	double $4 = $0 - $3;
	$0 = $3;
	$1 = $4;

	double $5 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
	double $6 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

	for (int $7 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; $7 >= 0; $7--) {

		$3 = $5 * $0;
		$4 = (($5 * $1) + ($6 * $0)) + ($6 * $1);

		$2 = $3 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$5 = ($3 + $2) - $2;
		$6 = ($3 - $5) + $4;


		$3 = $5 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$7][0];
		$4 = $6 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$7][1];

		$2 = $3 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$5 = ($3 + $2) - $2;
		$6 = ($3 - $5) + $4;
	}


	$3 = $5 * $0;
	$4 = (($5 * $1) + ($6 * $0)) + ($6 * $1);

	$2 = $3 * org.apache.commons.math.util.FastMath.HEX_40000000;
	$5 = ($3 + $2) - $2;
	$6 = ($3 - $5) + $4;

	return $5 + $6;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.Precision.equals(x, y, eps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}:if (org.apache.commons.math.util.Precision.equals(x, y, eps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index >= 0) {
	return internalArray[startIndex + index];
} else {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}:if (index >= 0) {
	return this.internalArray[this.startIndex + index];
} else {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa < 0) {

	xa = -xa;
	xb = -xb;
	negate = true;
}:if (xa < 0) {

	xa = -xa;
	xb = -xb;
	negate = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	EXP_INT_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];
	EXP_INT_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];

	final double[] tmp = new double[2];
	final double[] recip = new double[2];


	for (int i = 0; i < org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX; i++) {
		org.apache.commons.math.util.FastMathCalc.expint(i, tmp);
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[i + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[i + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];

		if (i != 0) {

			org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
		}
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] expInt = org.apache.commons.math.util.FastMathResources.loadExpInt();
		EXP_INT_TABLE_A = expInt[0];
		EXP_INT_TABLE_B = expInt[1];
	} else {
		EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
		EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
	}}:if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];

	final double[] $1 = new double[2];
	final double[] $2 = new double[2];


	for (int $3 = 0; $3 < org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX; $3++) {
		org.apache.commons.math.util.FastMathCalc.expint($3, $1);
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[$3 + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = $1[0];
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[$3 + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = $1[1];

		if ($3 != 0) {

			org.apache.commons.math.util.FastMathCalc.splitReciprocal($1, $2);
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $3] = $2[0];
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $3] = $2[1];
		}
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] $4 = org.apache.commons.math.util.FastMathResources.loadExpInt();
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = $4[0];
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = $4[1];
	} else {
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (y != y) {
		return y;
	}
	if (y < 0.0) {
		return 0.0;
	} else {
		return java.lang.Double.POSITIVE_INFINITY;
	}
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (y != y) {
		return y;
	}
	if (y < 0.0) {
		return 0.0;
	} else {
		return java.lang.Double.POSITIVE_INFINITY;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n == k) || (k == 0)) {
	return 1.0;
}:if ((n == k) || (k == 0)) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k);
}:if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 67) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k);
}:if (n < 67) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	if (b < 0) {

		if (a >= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else { 		if (b > 0) {

			if ((java.lang.Long.MIN_VALUE / b) <= a) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();

			}
		} else {

			ret = 0;
		}}
} else { 	if (a > 0) {




		if (a <= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else {

		ret = 0;
	}}:if (a < 0) {
	if (b < 0) {

		if (a >= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else { 		if (b > 0) {

			if ((java.lang.Long.MIN_VALUE / b) <= a) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();

			}
		} else {

			ret = 0;
		}}
} else { 	if (a > 0) {




		if (a <= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else {

		ret = 0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.POSITIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}:if (y == java.lang.Double.POSITIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (counter[i] != (size[i] - 1)) {
	return true;
}:if (this.counter[i] != (this.size[i] - 1)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}:if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y < 0) {
	long yi = ((long) (y));
	if ((y == yi) && ((yi & 1) == 1)) {
		return -0.0;
	}

	return 0.0;
}:if (y < 0) {
	long $3 = ((long) (y));
	if ((y == $3) && (($3 & 1) == 1)) {
		return -0.0;
	}

	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((d > (-org.apache.commons.math.util.Precision.SAFE_MIN)) && (d < org.apache.commons.math.util.Precision.SAFE_MIN)) {
	return d;
}:if ((d > (-org.apache.commons.math.util.Precision.SAFE_MIN)) && (d < org.apache.commons.math.util.Precision.SAFE_MIN)) {
	return d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.POSITIVE_INFINITY) {
	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) > 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}:if (y == java.lang.Double.POSITIVE_INFINITY) {
	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) > 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(d) || java.lang.Double.isNaN(direction)) {
	return java.lang.Double.NaN;
} else { 	if (d == direction) {
		return direction;
	} else { 		if (java.lang.Double.isInfinite(d)) {
			return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
		} else { 			if (d == 0) {
				return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
			}}}}:if (java.lang.Double.isNaN(d) || java.lang.Double.isNaN(direction)) {
	return java.lang.Double.NaN;
} else { 	if (d == direction) {
		return direction;
	} else { 		if (java.lang.Double.isInfinite(d)) {
			return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
		} else { 			if (d == 0) {
				return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (trans != null) {
	value = trans.transform(o);
}:if (trans != null) {
	value = trans.transform(o);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > 0) {

	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else { 	if (scaledExponent > (-53)) {



		mantissa = mantissa | (1L << 52);


		final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if (mostSignificantLostBit != 0) {

			mantissa++;
		}
		return java.lang.Double.longBitsToDouble(sign | mantissa);

	} else {

		return sign == 0L ? 0.0 : -0.0;
	}}:if (scaledExponent > 0) {

	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else { 	if (scaledExponent > (-53)) {



		mantissa = mantissa | (1L << 52);


		final long $1 = mantissa & (1L << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if ($1 != 0) {

			mantissa++;
		}
		return java.lang.Double.longBitsToDouble(sign | mantissa);

	} else {

		return sign == 0L ? 0.0 : -0.0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < (-20)) {
	return (-org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;
}:if (x < (-20)) {
	return (-org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((++count) > maximalCount) {
	maxCountCallback.trigger(maximalCount);
}:if ((++this.count) > this.maximalCount) {
	this.maxCountCallback.trigger(this.maximalCount);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x < 0) || (invx < 0)) {
	if ((y < 0) || (invy < 0)) {
		return -java.lang.Math.PI;
	} else {
		return java.lang.Math.PI;
	}
} else {
	return result;
}:if ((x < 0) || (invx < 0)) {
	if ((y < 0) || (invy < 0)) {
		return -java.lang.Math.PI;
	} else {
		return java.lang.Math.PI;
	}
} else {
	return result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(x);
}:if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (x <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return x;
}:if ((x >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (x <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (newMapping) {
	++size;
	if (shouldGrowTable()) {
		growTable();
	}
	++count;
}:if (newMapping) {
	++this.size;
	if (shouldGrowTable()) {
		growTable();
	}
	++this.count;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (map.size() != rhs.map.size()) {
	return false;
}:if (this.map.size() != rhs.map.size()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((direction < d) ^ (sign == 0L)) {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
} else {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
}:if ((direction < d) ^ (sign == 0L)) {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
} else {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 20.0) {
	return org.apache.commons.math.util.FastMath.exp(x) / 2.0;
}:if (x > 20.0) {
	return org.apache.commons.math.util.FastMath.exp(x) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (other instanceof org.apache.commons.math.util.BigReal) {
	return d.equals(((org.apache.commons.math.util.BigReal) (other)).d);
}:if (other instanceof org.apache.commons.math.util.BigReal) {
	return this.d.equals(((org.apache.commons.math.util.BigReal) (other)).d);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d != d) {
	return "Double.NaN,";
} else {
	return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,";
}:if (d != d) {
	return "Double.NaN,";
} else {
	return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,";
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == x) {
	return y;
}:if (y == x) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}:if (index < 0) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!infinite) {
	break;
}:if (!infinite) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 0.0) {
	return ((-1.0) + hiPrec[0]) + hiPrec[1];
} else {
	final double ra = (-1.0) + hiPrec[0];
	double rb = -((ra + 1.0) - hiPrec[0]);
	rb += hiPrec[1];
	return ra + rb;
}:if (x > 0.0) {
	return ((-1.0) + hiPrec[0]) + hiPrec[1];
} else {
	final double $0 = (-1.0) + hiPrec[0];
	double $1 = -(($0 + 1.0) - hiPrec[0]);
	$1 += hiPrec[1];
	return $0 + $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.NEGATIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}:if (y == java.lang.Double.NEGATIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x != x) || (y != y)) {
	return java.lang.Double.NaN;
}:if ((x != x) || (y != y)) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((a != 0.0) && (a > b)) {
	p2 = (p1 / lastScaleFactor) + ((b / scaleFactor) * p0);
	q2 = (q1 / lastScaleFactor) + ((b / scaleFactor) * q0);
} else { 	if (b != 0) {
		p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
		q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
	}}:if ((a != 0.0) && (a > b)) {
	p2 = (p1 / lastScaleFactor) + ((b / scaleFactor) * p0);
	q2 = (q1 / lastScaleFactor) + ((b / scaleFactor) * q0);
} else { 	if (b != 0) {
		p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
		q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a >= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if (a >= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}:if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (oldStates[i] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	final int key = oldKeys[i];
	final int index = org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, key, newMask);
	newKeys[index] = key;
	newValues[index] = oldValues[i];
	newStates[index] = org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL;
}:if (oldStates[i] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	final int $0 = oldKeys[i];
	final int $1 = org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, $0, newMask);
	newKeys[$1] = $0;
	newValues[$1] = oldValues[i];
	newStates[$1] = org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x != 0.0) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NaN;
	}

	return java.lang.Double.NaN;
}:if (x != 0.0) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NaN;
	}

	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) 
{
	if ((y > 0.0) || ((1 / y) > 0.0)) {
		return java.lang.Math.PI;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -java.lang.Math.PI;
	}
}:if (x == java.lang.Double.NEGATIVE_INFINITY) 
{
	if ((y > 0.0) || ((1 / y) > 0.0)) {
		return java.lang.Math.PI;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -java.lang.Math.PI;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a != b) {
	return java.lang.Float.NaN;
}:if (a != b) {
	return java.lang.Float.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs != 0) {
	double r = xabs / x3max;
	s3 += r * r;
}:if (xabs != 0) {
	double $2 = xabs / x3max;
	s3 += $2 * $2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s2 == 0) {
	norm = x3max * java.lang.Math.sqrt(s3);
} else {
	if (s2 >= x3max) {
		norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
	} else {
		norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
	}
}:if (s2 == 0) {
	norm = x3max * java.lang.Math.sqrt(s3);
} else {
	if (s2 >= x3max) {
		norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
	} else {
		norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(b, a);
} else {
	if (a < 0) {
		if (b < 0) {

			if (a >= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else { 			if (b > 0) {

				if ((java.lang.Long.MIN_VALUE / b) <= a) {
					ret = a * b;
				} else {
					throw new org.apache.commons.math.exception.MathArithmeticException();

				}
			} else {

				ret = 0;
			}}
	} else { 		if (a > 0) {




			if (a <= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else {

			ret = 0;
		}}
}:if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(b, a);
} else {
	if (a < 0) {
		if (b < 0) {

			if (a >= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else { 			if (b > 0) {

				if ((java.lang.Long.MIN_VALUE / b) <= a) {
					ret = a * b;
				} else {
					throw new org.apache.commons.math.exception.MathArithmeticException();

				}
			} else {

				ret = 0;
			}}
	} else { 		if (a > 0) {




			if (a <= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else {

			ret = 0;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((startIndex >= source.length()) || 
(endIndex > source.length())) || 
(source.substring(startIndex, endIndex).compareTo(expected) != 0)) {

	pos.setIndex(startIndex);
	pos.setErrorIndex(startIndex);
	return false;
}:if (((startIndex >= source.length()) || 
(endIndex > source.length())) || 
(source.substring(startIndex, endIndex).compareTo(expected) != 0)) {

	pos.setIndex(startIndex);
	pos.setErrorIndex(startIndex);
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == 0.0) {
	return 1.0;
}:if (y == 0.0) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	negative = true;
	a = -a;
}:if (a < 0) {
	negative = true;
	a = -a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((d < 8.0E298) && (d > (-8.0E298))) {
	final double a = d * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[0] = (d + a) - a;
	split[1] = d - split[0];
} else {
	final double a = d * 9.313225746154785E-10;
	split[0] = ((d + a) - d) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[1] = d - split[0];
}:if ((d < 8.0E298) && (d > (-8.0E298))) {
	final double $0 = d * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[0] = (d + $0) - $0;
	split[1] = d - split[0];
} else {
	final double $1 = d * 9.313225746154785E-10;
	split[0] = ((d + $1) - d) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[1] = d - split[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x8000000000000000L) {
	return a;
}:if (bits == 0x8000000000000000L) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
	return false;
}:if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + index) >= internalArray.length) {
	expandTo(startIndex + (index + 1));
}:if ((this.startIndex + index) >= this.internalArray.length) {
	expandTo(this.startIndex + (index + 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!defaultTransformer.equals(rhs.defaultTransformer)) {
	return false;
}:if (!this.defaultTransformer.equals(rhs.defaultTransformer)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (infinite) {

	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}:if (infinite) {

	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == 1024) {

	return x;
}:if (exponent == 1024) {

	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < (-2098)) {
	return d > 0 ? 0.0 : -0.0;
}:if (n < (-2098)) {
	return d > 0 ? 0.0 : -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] > previous) {
	break ITEM;
}:if (val[index] > previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!resDir.isDirectory()) {
	throw new org.apache.commons.math.exception.MathInternalError();
}:if (!resDir.isDirectory()) {
	throw new org.apache.commons.math.exception.MathInternalError();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.lang.Double.isNaN(values[i])) {
	sum += values[i];
}:if (!java.lang.Double.isNaN(values[i])) {
	sum += values[i];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction >= 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}:if (fraction >= 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	x = -x;
}:if (x < 0.0) {
	x = -x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n == k) || (k == 0)) {
	return 0;
}:if ((n == k) || (k == 0)) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 67) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k));
}:if (n < 67) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (remA > 0.0) {
	break;
}:if (remA > 0.0) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negative) {
	result = -result;
}:if (negative) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y != y) {
	return y;
}:if (y != y) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == (-1023)) {
	if (x == 0) {
		return x;
	}


	subnormal = true;
	x *= 1.8014398509481984E16;
	inbits = java.lang.Double.doubleToLongBits(x);
	exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023;
}:if (exponent == (-1023)) {
	if (x == 0) {
		return x;
	}


	subnormal = true;
	x *= 1.8014398509481984E16;
	inbits = java.lang.Double.doubleToLongBits(x);
	exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) {
	if (y != y) {
		return y;
	}

	if (y < 0) {
		long yi = ((long) (y));
		if ((y == yi) && ((yi & 1) == 1)) {
			return -0.0;
		}

		return 0.0;
	}

	if (y > 0) {
		long yi = ((long) (y));
		if ((y == yi) && ((yi & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.POSITIVE_INFINITY;
	}
}:if (x == java.lang.Double.NEGATIVE_INFINITY) {
	if (y != y) {
		return y;
	}

	if (y < 0) {
		long $5 = ((long) (y));
		if ((y == $5) && (($5 & 1) == 1)) {
			return -0.0;
		}

		return 0.0;
	}

	if (y > 0) {
		long $6 = ((long) (y));
		if ((y == $6) && (($6 & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.POSITIVE_INFINITY;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negate) {
	result = -result;
}:if (negate) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal > 709) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
		hiPrec[1] = 0.0;
	}
	return java.lang.Double.POSITIVE_INFINITY;
}:if (intVal > 709) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
		hiPrec[1] = 0.0;
	}
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else { 		if (scaledExponent > (-24)) {



			mantissa = mantissa | (1 << 23);


			final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if (mostSignificantLostBit != 0) {

				mantissa++;
			}
			return java.lang.Float.intBitsToFloat(sign | mantissa);

		} else {

			return sign == 0 ? 0.0F : -0.0F;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 23) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0x7fffff;

		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}}
}:if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else { 		if (scaledExponent > (-24)) {



			mantissa = mantissa | (1 << 23);


			final int $5 = mantissa & (1 << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if ($5 != 0) {

				mantissa++;
			}
			return java.lang.Float.intBitsToFloat(sign | mantissa);

		} else {

			return sign == 0 ? 0.0F : -0.0F;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 23) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0x7fffff;

		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] <= previous) {
	break ITEM;
}:if (val[index] <= previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return false;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(values[i])) {
	out[i] = java.lang.Double.NaN;
} else {
	out[i] = (values[i] * normalizedSum) / sum;
}:if (java.lang.Double.isNaN(values[i])) {
	out[i] = java.lang.Double.NaN;
} else {
	out[i] = (values[i] * normalizedSum) / sum;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}:if (y == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (referenceCount != count) {
	throw new java.util.ConcurrentModificationException();
}:if (this.referenceCount != this.count) {
	throw new java.util.ConcurrentModificationException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.apache.commons.math.util.Precision.equals(x[i], y[i])) {
	return false;
}:if (!org.apache.commons.math.util.Precision.equals(x[i], y[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs > x1max) {
	double r = x1max / xabs;
	s1 = 1 + ((s1 * r) * r);
	x1max = xabs;
} else {
	double r = xabs / x1max;
	s1 += r * r;
}:if (xabs > x1max) {
	double $0 = x1max / xabs;
	s1 = 1 + ((s1 * $0) * $0);
	x1max = xabs;
} else {
	double $1 = xabs / x1max;
	s1 += $1 * $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 1) == 0) {
	continue;
}:if ((i & 1) == 0) {
	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return magnitude;
}:if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}:if (e < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - yInt;
}:if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - yInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x > 0) && ((1 / x) == 0)) {
	return x;
}:if ((x > 0) && ((1 / x) == 0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (powerOfTwo == capacity) {
	return capacity;
}:if (powerOfTwo == capacity) {
	return capacity;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	newSize = ((int) (org.apache.commons.math.util.FastMath.ceil(internalArray.length * expansionFactor)));
} else {
	newSize = internalArray.length + org.apache.commons.math.util.FastMath.round(expansionFactor);
}:if (this.expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	newSize = ((int) (org.apache.commons.math.util.FastMath.ceil(this.internalArray.length * this.expansionFactor)));
} else {
	newSize = this.internalArray.length + org.apache.commons.math.util.FastMath.round(this.expansionFactor);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return missingEntries;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return this.missingEntries;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(r)) {
	return java.lang.Math.PI / 2;
}:if (java.lang.Double.isInfinite(r)) {
	return java.lang.Math.PI / 2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (subnormal) {
	est *= 3.814697265625E-6;
}:if (subnormal) {
	est *= 3.814697265625E-6;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((o instanceof java.lang.Number) || (o instanceof java.lang.String)) {
	value = defaultTransformer.transform(o);
} else {
	org.apache.commons.math.util.NumberTransformer trans = getTransformer(o.getClass());
	if (trans != null) {
		value = trans.transform(o);
	}
}:if ((o instanceof java.lang.Number) || (o instanceof java.lang.String)) {
	value = this.defaultTransformer.transform(o);
} else {
	org.apache.commons.math.util.NumberTransformer $0 = getTransformer(o.getClass());
	if ($0 != null) {
		value = $0.transform(o);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x > 1.0) || (x < (-1.0))) {
	return java.lang.Double.NaN;
}:if ((x > 1.0) || (x < (-1.0))) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (startIndex == endIndex) {

	final double[] special = new double[]{ 
	java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY };

	for (int i = 0; i < special.length; ++i) {
		number = org.apache.commons.math.util.CompositeFormat.parseNumber(source, special[i], pos);
		if (number != null) {
			break;
		}
	}
}:if (startIndex == endIndex) {

	final double[] $0 = new double[]{ 
	java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY };

	for (int $1 = 0; $1 < $0.length; ++$1) {
		number = org.apache.commons.math.util.CompositeFormat.parseNumber(source, $0[$1], pos);
		if (number != null) {
			break;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k == 31) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}:if (k == 31) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.031) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
} else { 	if (a > 0.003) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
	} else {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
	}}:if (a > 0.031) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
} else { 	if (a > 0.003) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
	} else {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 1.5) {

	final double pi2a = 1.5707963267948966;
	final double pi2b = 6.123233995736766E-17;

	final double a = pi2a - xa;
	double b = -((a - pi2a) + xa);
	b += pi2b - xb;

	xa = a + b;
	xb = -((xa - a) - b);
	quadrant ^= 1;
	negative ^= true;
}:if (xa > 1.5) {

	final double $0 = 1.5707963267948966;
	final double $1 = 6.123233995736766E-17;

	final double $2 = $0 - xa;
	double $3 = -(($2 - $0) + xa);
	$3 += $1 - xb;

	xa = $2 + $3;
	xb = -((xa - $2) - $3);
	quadrant ^= 1;
	negative ^= true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 1.0) {
	return java.lang.Math.PI / 2.0;
}:if (x == 1.0) {
	return java.lang.Math.PI / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y == yi) && ((yi & 1) == 1)) {
	return -0.0;
}:if ((y == yi) && ((yi & 1) == 1)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < b) {
	return b;
}:if (a < b) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(r)) {
	return org.apache.commons.math.util.FastMath.atan(r, 0, x < 0);
}:if (java.lang.Double.isInfinite(r)) {
	return org.apache.commons.math.util.FastMath.atan(r, 0, x < 0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((c < 8.0E298) && (c > (-8.0E298))) {
	double z = c * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[0] = (c + z) - z;
	a[1] = (c - a[0]) + d;
} else {
	double z = c * 9.313225746154785E-10;
	a[0] = ((c + z) - c) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[1] = (c - a[0]) + d;
}:if ((c < 8.0E298) && (c > (-8.0E298))) {
	double $0 = c * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[0] = (c + $0) - $0;
	a[1] = (c - a[0]) + d;
} else {
	double $1 = c * 9.313225746154785E-10;
	a[0] = ((c + $1) - c) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[1] = (c - a[0]) + d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (contraction < expansion) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, 
	contraction, expansion);
}:if (contraction < expansion) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, 
	contraction, expansion);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == ((long) (y))) {

	return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
} else {
	return java.lang.Double.NaN;
}:if (y == ((long) (y))) {

	return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
} else {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.OBJECT_TRANSFORMATION);
}:if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.OBJECT_TRANSFORMATION);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (idx == 0) {


	final double denom = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx])));

	ya = epsA * denom;
	yb = epsB * denom;
} else {
	double temp2 = xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx];
	double za = 1.0 + temp2;
	double zb = -((za - 1.0) - temp2);
	temp2 = (xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]);
	temp = za + temp2;
	zb += -((temp - za) - temp2);
	za = temp;

	zb += xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx];
	ya = epsA / za;

	temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double yaa = (ya + temp) - temp;
	final double yab = ya - yaa;

	temp = za * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double zaa = (za + temp) - temp;
	final double zab = za - zaa;


	yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;

	yb += (((-epsA) * zb) / za) / za;
	yb += epsB / za;
}:if (idx == 0) {


	final double $1 = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx])));

	ya = epsA * $1;
	yb = epsB * $1;
} else {
	double $2 = xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx];
	double $3 = 1.0 + $2;
	double $4 = -(($3 - 1.0) - $2);
	$2 = (xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]);
	temp = $3 + $2;
	$4 += -((temp - $3) - $2);
	$3 = temp;

	$4 += xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx];
	ya = epsA / $3;

	temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double $5 = (ya + temp) - temp;
	final double $6 = ya - $5;

	temp = $3 * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double $7 = ($3 + temp) - temp;
	final double $8 = $3 - $7;


	yb = ((((epsA - ($5 * $7)) - ($5 * $8)) - ($6 * $7)) - ($6 * $8)) / $3;

	yb += (((-epsA) * $4) / $3) / $3;
	yb += epsB / $3;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > (-53)) {



	mantissa = mantissa | (1L << 52);


	final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if (mostSignificantLostBit != 0) {

		mantissa++;
	}
	return java.lang.Double.longBitsToDouble(sign | mantissa);

} else {

	return sign == 0L ? 0.0 : -0.0;
}:if (scaledExponent > (-53)) {



	mantissa = mantissa | (1L << 52);


	final long $0 = mantissa & (1L << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if ($0 != 0) {

		mantissa++;
	}
	return java.lang.Double.longBitsToDouble(sign | mantissa);

} else {

	return sign == 0L ? 0.0 : -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.length != dimension) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
}:if (c.length != this.dimension) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, this.dimension);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
}:if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Byte.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((byte) (-magnitude));
}:if ((sign >= 0) && 
(magnitude == java.lang.Byte.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((byte) (-magnitude));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == 0) {


	while ((mantissa >>> 23) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0x7fffff;

	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}}:if (exponent == 0) {


	while ((mantissa >>> 23) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0x7fffff;

	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return false;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction < 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {

	if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
	unscaled) / 2.0)) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {
		unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
	}
}:if (fraction < 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {

	if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
	unscaled) / 2.0)) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {
		unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prod2A++;
}:if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prod2A++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Byte.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((byte) (-magnitude));
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Byte.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((byte) (-magnitude));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	if (b < 0) {

		if ((java.lang.Long.MIN_VALUE - b) <= a) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	} else {

		ret = a + b;
	}
} else {




	if (a <= (java.lang.Long.MAX_VALUE - b)) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
}:if (a < 0) {
	if (b < 0) {

		if ((java.lang.Long.MIN_VALUE - b) <= a) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	} else {

		ret = a + b;
	}
} else {




	if (a <= (java.lang.Long.MAX_VALUE - b)) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n >= maxIterations) {
	throw new org.apache.commons.math.exception.MaxCountExceededException(org.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, 
	maxIterations, x);
}:if (n >= maxIterations) {
	throw new org.apache.commons.math.exception.MaxCountExceededException(org.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, 
	maxIterations, x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x * x) > 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}:if ((x * x) > 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || ((1 / y) < 0)) {
	return -java.lang.Math.PI;
}:if ((y < 0) || ((1 / y) < 0)) {
	return -java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = 0;
	for (int i = 0; i < len; ++i) {
		result += a[i] * b[i];
	}
}:if (java.lang.Double.isNaN(result)) {


	result = 0;
	for (int $0 = 0; $0 < len; ++$0) {
		result += a[$0] * b[$0];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (oldStates[i] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	final int key = oldKeys[i];
	final int index = org.apache.commons.math.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, key, newMask);
	newKeys[index] = key;
	newValues[index] = oldValues[i];
	newStates[index] = org.apache.commons.math.util.OpenIntToFieldHashMap.FULL;
}:if (oldStates[i] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	final int $0 = oldKeys[i];
	final int $1 = org.apache.commons.math.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, $0, newMask);
	newKeys[$1] = $0;
	newValues[$1] = oldValues[i];
	newStates[$1] = org.apache.commons.math.util.OpenIntToFieldHashMap.FULL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index + 1) > numElements) {
	numElements = index + 1;
}:if ((index + 1) > this.numElements) {
	this.numElements = index + 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] < previous) {
	break ITEM;
}:if (val[index] < previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < (-20)) {
	return org.apache.commons.math.util.FastMath.exp(-x) / 2.0;
}:if (x < (-20)) {
	return org.apache.commons.math.util.FastMath.exp(-x) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] /= 2.85040095144011776E17;
	hiPrec[1] /= 2.85040095144011776E17;
}:if (hiPrec != null) {
	hiPrec[0] /= 2.85040095144011776E17;
	hiPrec[1] /= 2.85040095144011776E17;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bits & 0x7ff0000000000000L) == 0) {

	if (x == 0) {

		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.NEGATIVE_INFINITY;
	}


	bits <<= 1;
	while ((bits & 0x10000000000000L) == 0) {
		exp--;
		bits <<= 1;
	} 
}:if ((bits & 0x7ff0000000000000L) == 0) {

	if (x == 0) {

		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.NEGATIVE_INFINITY;
	}


	bits <<= 1;
	while ((bits & 0x10000000000000L) == 0) {
		exp--;
		bits <<= 1;
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Float.isInfinite(x)) {
	return java.lang.Float.POSITIVE_INFINITY;
}:if (java.lang.Float.isInfinite(x)) {
	return java.lang.Float.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (leftPlane) {

	final double pia = 1.5707963267948966 * 2;
	final double pib = 6.123233995736766E-17 * 2;

	za = pia - result;
	zb = -((za - pia) + result);
	zb += pib - resultb;

	result = za + zb;
	resultb = -((result - za) - zb);
}:if (leftPlane) {

	final double $9 = 1.5707963267948966 * 2;
	final double $10 = 6.123233995736766E-17 * 2;

	za = $9 - result;
	zb = -((za - $9) + result);
	zb += $10 - resultb;

	result = za + zb;
	resultb = -((result - za) - zb);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a <= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if (a <= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((k == 1) || (k == (n - 1))) {
	return org.apache.commons.math.util.FastMath.log(n);
}:if ((k == 1) || (k == (n - 1))) {
	return org.apache.commons.math.util.FastMath.log(n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this == other) {
	return true;
}:if (this == other) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {

	double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000;
	double aa = (epsilon + tmp) - tmp;
	double ab = epsilon - aa;
	double xa = aa;
	double xb = ab;


	double numer = bits & 0x3ffffffffffL;
	double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L);
	aa = (numer - (xa * denom)) - (xb * denom);
	xb += aa / denom;


	double ya = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0];
	double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1];

	for (int i = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 2; i >= 0; i--) {

		aa = ya * xa;
		ab = ((ya * xb) + (yb * xa)) + (yb * xb);

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;


		aa = ya + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[i][0];
		ab = yb + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[i][1];

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;
	}


	aa = ya * xa;
	ab = ((ya * xb) + (yb * xa)) + (yb * xb);







	lnza = aa + ab;
	lnzb = -((lnza - aa) - ab);
} else {


	lnza = -0.16624882440418567;
	lnza = (lnza * epsilon) + 0.19999954120254515;
	lnza = (lnza * epsilon) + (-0.2499999997677497);
	lnza = (lnza * epsilon) + 0.3333333333332802;
	lnza = (lnza * epsilon) + (-0.5);
	lnza = (lnza * epsilon) + 1.0;
	lnza = lnza * epsilon;
}:if (hiPrec != null) {

	double $16 = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $17 = (epsilon + $16) - $16;
	double $18 = epsilon - $17;
	double $19 = $17;
	double $20 = $18;


	double $21 = bits & 0x3ffffffffffL;
	double $22 = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L);
	$17 = ($21 - ($19 * $22)) - ($20 * $22);
	$20 += $17 / $22;


	double $23 = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0];
	double $24 = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1];

	for (int $25 = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 2; $25 >= 0; $25--) {

		$17 = $23 * $19;
		$18 = (($23 * $20) + ($24 * $19)) + ($24 * $20);

		$16 = $17 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$23 = ($17 + $16) - $16;
		$24 = ($17 - $23) + $18;


		$17 = $23 + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[$25][0];
		$18 = $24 + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[$25][1];

		$16 = $17 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$23 = ($17 + $16) - $16;
		$24 = ($17 - $23) + $18;
	}


	$17 = $23 * $19;
	$18 = (($23 * $20) + ($24 * $19)) + ($24 * $20);







	lnza = $17 + $18;
	lnzb = -((lnza - $17) - $18);
} else {


	lnza = -0.16624882440418567;
	lnza = (lnza * epsilon) + 0.19999954120254515;
	lnza = (lnza * epsilon) + (-0.2499999997677497);
	lnza = (lnza * epsilon) + 0.3333333333332802;
	lnza = (lnza * epsilon) + (-0.5);
	lnza = (lnza * epsilon) + 1.0;
	lnza = lnza * epsilon;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) || (d == 0)) {
	return d;
}:if ((java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) || (d == 0)) {
	return d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
	break;
}:if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Short.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((short) (-magnitude));
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Short.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((short) (-magnitude));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	return java.lang.Math.PI / 2.0;
}:if (x == 0) {
	return java.lang.Math.PI / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((xabs < rdwarf) || (xabs > agiant)) {
	if (xabs > rdwarf) {
		if (xabs > x1max) {
			double r = x1max / xabs;
			s1 = 1 + ((s1 * r) * r);
			x1max = xabs;
		} else {
			double r = xabs / x1max;
			s1 += r * r;
		}
	} else {
		if (xabs > x3max) {
			double r = x3max / xabs;
			s3 = 1 + ((s3 * r) * r);
			x3max = xabs;
		} else {
			if (xabs != 0) {
				double r = xabs / x3max;
				s3 += r * r;
			}
		}
	}
} else {
	s2 += xabs * xabs;
}:if ((xabs < rdwarf) || (xabs > agiant)) {
	if (xabs > rdwarf) {
		if (xabs > x1max) {
			double $9 = x1max / xabs;
			s1 = 1 + ((s1 * $9) * $9);
			x1max = xabs;
		} else {
			double $10 = xabs / x1max;
			s1 += $10 * $10;
		}
	} else {
		if (xabs > x3max) {
			double $11 = x3max / xabs;
			s3 = 1 + ((s3 * $11) * $11);
			x3max = xabs;
		} else {
			if (xabs != 0) {
				double $12 = xabs / x3max;
				s3 += $12 * $12;
			}
		}
	}
} else {
	s2 += xabs * xabs;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (len != b.length) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(len, b.length);
}:if (len != b.length) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(len, b.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 21) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.factorial(n));
}:if (n < 21) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.factorial(n));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] >= previous) {
	break ITEM;
}:if (val[index] >= previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (front) {
	startIndex += i;
}:if (front) {
	this.startIndex += i;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b != 0) {
	p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
	q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
}:if (b != 0) {
	p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
	q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Long.MIN_VALUE / b) <= a) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();

}:if ((java.lang.Long.MIN_VALUE / b) <= a) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((e & 0x1) != 0) {
	result *= k2p;
}:if ((e & 0x1) != 0) {
	result *= k2p;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((bits & 0x8000000000000000L) != 0) || (x != x)) {
	if (x != 0.0) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NaN;
		}

		return java.lang.Double.NaN;
	}
}:if (((bits & 0x8000000000000000L) != 0) || (x != x)) {
	if (x != 0.0) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NaN;
		}

		return java.lang.Double.NaN;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s2 >= x3max) {
	norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
} else {
	norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
}:if (s2 >= x3max) {
	norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
} else {
	norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (t > 0) {
	u = -t;
} else {
	v = t;
}:if (t > 0) {
	u = -t;
} else {
	v = t;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#getDefaultNumberFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#getDefaultNumberFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#getDefaultNumberFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#getDefaultNumberFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#getDenominatorFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#getDenominatorFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#getNumeratorFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#getNumeratorFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getReducedFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getReducedFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getReducedFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getReducedFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#bigDecimalValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#bigDecimalValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#bigDecimalValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#bigDecimalValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#bigDecimalValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#bigDecimalValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getDenominator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getDenominator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getDenominatorAsInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getDenominatorAsInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getDenominatorAsLong
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getDenominatorAsLong
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getNumerator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getNumerator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getNumeratorAsInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getNumeratorAsInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getNumeratorAsLong
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getNumeratorAsLong
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#intValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#intValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#longValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#longValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#negate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#negate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#percentageValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#percentageValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#reciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#reciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#reduce
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#reduce
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#toString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#toString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getField
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#getField
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionField#getInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionField#getInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionField#getOne
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionField#getOne
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionField#getRuntimeClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionField#getRuntimeClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getAvailableLocales
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getAvailableLocales
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#formatBigFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#formatBigFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getImproperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getImproperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getImproperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getImproperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getProperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getProperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getProperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#getProperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#parse
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#parse
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#parseNextBigInteger
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFractionFormat#parseNextBigInteger
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#floatValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#floatValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#intValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#intValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#longValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#longValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#negate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#negate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#reciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#reciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#addSub
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#addSub
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#addSub
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#addSub
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#addSub
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#addSub
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#percentageValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#percentageValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#getReducedFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#getReducedFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#getField
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Fraction#getField
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionField#getInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionField#getInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionField#getOne
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionField#getOne
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionField#getRuntimeClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionField#getRuntimeClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#formatFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#formatFraction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#getImproperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#getImproperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#getImproperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#getImproperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#getProperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#getProperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#getProperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#getProperInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#parse
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FractionFormat#parse
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ProperBigFractionFormat#getWholeFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ProperBigFractionFormat#getWholeFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ProperFractionFormat#parse
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ProperFractionFormat#parse
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientLog(n, n - k);
}:if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientLog(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n <= 66) {


	int i = (n - k) + 1;
	for (int j = 1; j <= k; j++) {






		final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
		result = (result / (j / d)) * (i / d);
		i++;
	}
} else {



	int i = (n - k) + 1;
	for (int j = 1; j <= k; j++) {
		final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
		result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d);
		i++;
	}
}:if (n <= 66) {


	int $0 = (n - k) + 1;
	for (int $1 = 1; $1 <= k; $1++) {






		final long $2 = org.apache.commons.math.util.ArithmeticUtils.gcd($0, $1);
		result = (result / ($1 / $2)) * ($0 / $2);
		$0++;
	}
} else {



	int $3 = (n - k) + 1;
	for (int $4 = 1; $4 <= k; $4++) {
		final long $5 = org.apache.commons.math.util.ArithmeticUtils.gcd($3, $4);
		result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / ($4 / $5), $3 / $5);
		$3++;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(pattern, args);
}:if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(pattern, args);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
}:if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n == k) || (k == 0)) {
	return 1;
}:if ((n == k) || (k == 0)) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}:if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y > 0.0) || ((1 / y) > 0.0)) {
	return java.lang.Math.PI;
}:if ((y > 0.0) || ((1 / y) > 0.0)) {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.097) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.0036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		}}}:if (a > 0.097) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.0036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bits & 0x8000000000000000L) != 0) {

	long yi = ((long) (y));

	if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
		return -0.0;
	}
}:if ((bits & 0x8000000000000000L) != 0) {

	long $0 = ((long) (y));

	if (((y < 0) && (y == $0)) && (($0 & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	if (((y > 0) && (y == $0)) && (($0 & 1) == 1)) {
		return -0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToDoubleHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToDoubleHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o instanceof java.lang.Number) {
	return ((java.lang.Number) (o)).doubleValue();
}:if (o instanceof java.lang.Number) {
	return ((java.lang.Number) (o)).doubleValue();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	return x;
}:if (x == 0) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xb != 0.0) {
	t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
	((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
	c = a + t;
	d = -((c - a) - t);
	a = c;
	b = b + d;
}:if (xb != 0.0) {
	t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
	((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
	c = a + t;
	d = -((c - a) - t);
	a = c;
	b = b + d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Short.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((short) (-magnitude));
}:if ((sign >= 0) && 
(magnitude == java.lang.Short.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((short) (-magnitude));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.15) {
	absAtanh = 0.5 * org.apache.commons.math.util.FastMath.log((1 + a) / (1 - a));
} else {
	final double a2 = a * a;
	if (a > 0.087) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math.util.FastMath.F_1_15 + (a2 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
	} else { 		if (a > 0.031) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
		} else { 			if (a > 0.003) {
				absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
			} else {
				absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
			}}}
}:if (a > 0.15) {
	absAtanh = 0.5 * org.apache.commons.math.util.FastMath.log((1 + a) / (1 - a));
} else {
	final double $0 = a * a;
	if (a > 0.087) {
		absAtanh = a * (1 + ($0 * (org.apache.commons.math.util.FastMath.F_1_3 + ($0 * (org.apache.commons.math.util.FastMath.F_1_5 + ($0 * (org.apache.commons.math.util.FastMath.F_1_7 + ($0 * (org.apache.commons.math.util.FastMath.F_1_9 + ($0 * (org.apache.commons.math.util.FastMath.F_1_11 + ($0 * (org.apache.commons.math.util.FastMath.F_1_13 + ($0 * (org.apache.commons.math.util.FastMath.F_1_15 + ($0 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
	} else { 		if (a > 0.031) {
			absAtanh = a * (1 + ($0 * (org.apache.commons.math.util.FastMath.F_1_3 + ($0 * (org.apache.commons.math.util.FastMath.F_1_5 + ($0 * (org.apache.commons.math.util.FastMath.F_1_7 + ($0 * (org.apache.commons.math.util.FastMath.F_1_9 + ($0 * (org.apache.commons.math.util.FastMath.F_1_11 + ($0 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
		} else { 			if (a > 0.003) {
				absAtanh = a * (1 + ($0 * (org.apache.commons.math.util.FastMath.F_1_3 + ($0 * (org.apache.commons.math.util.FastMath.F_1_5 + ($0 * (org.apache.commons.math.util.FastMath.F_1_7 + ($0 * org.apache.commons.math.util.FastMath.F_1_9))))))));
			} else {
				absAtanh = a * (1 + ($0 * (org.apache.commons.math.util.FastMath.F_1_3 + ($0 * org.apache.commons.math.util.FastMath.F_1_5))));
			}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expectedSize == 0) {
	return 1;
}:if (expectedSize == 0) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (numElements < 1) {
	throw new org.apache.commons.math.exception.MathIllegalStateException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY);
}:if (this.numElements < 1) {
	throw new org.apache.commons.math.exception.MathIllegalStateException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shift != 0) {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1] << shift;
	shpi0 |= org.apache.commons.math.util.FastMath.RECIP_2PI[idx] >>> (64 - shift);
	shpiA = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift));
	shpiB = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift));
} else {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1];
	shpiA = org.apache.commons.math.util.FastMath.RECIP_2PI[idx];
	shpiB = org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1];
}:if (shift != 0) {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1] << shift;
	shpi0 |= org.apache.commons.math.util.FastMath.RECIP_2PI[idx] >>> (64 - shift);
	shpiA = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift));
	shpiB = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift));
} else {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1];
	shpiA = org.apache.commons.math.util.FastMath.RECIP_2PI[idx];
	shpiB = org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(values[i])) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
}:if (java.lang.Double.isInfinite(values[i])) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(value) || java.lang.Double.isInfinite(value)) {
	toAppendTo.append('(');
	toAppendTo.append(value);
	toAppendTo.append(')');
} else {
	format.format(value, toAppendTo, pos);
}:if (java.lang.Double.isNaN(value) || java.lang.Double.isInfinite(value)) {
	toAppendTo.append('(');
	toAppendTo.append(value);
	toAppendTo.append(')');
} else {
	format.format(value, toAppendTo, pos);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
	n);
}:if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
	n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 1) == 0) {

	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, ys, result);
	SINE_TABLE_A[i] = result[0] * 2.0;
	SINE_TABLE_B[i] = result[1] * 2.0;


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, ys, as);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, xs, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(as, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
} else {
	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];
	as[0] = SINE_TABLE_A[(i / 2) + 1];
	as[1] = SINE_TABLE_B[(i / 2) + 1];
	bs[0] = COSINE_TABLE_A[(i / 2) + 1];
	bs[1] = COSINE_TABLE_B[(i / 2) + 1];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, bs, temps);
	org.apache.commons.math.util.FastMathCalc.splitMult(ys, as, result);
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	SINE_TABLE_A[i] = result[0];
	SINE_TABLE_B[i] = result[1];


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, bs, result);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, as, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
}:if ((i & 1) == 0) {

	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, ys, result);
	SINE_TABLE_A[i] = result[0] * 2.0;
	SINE_TABLE_B[i] = result[1] * 2.0;


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, ys, as);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, xs, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(as, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
} else {
	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];
	as[0] = SINE_TABLE_A[(i / 2) + 1];
	as[1] = SINE_TABLE_B[(i / 2) + 1];
	bs[0] = COSINE_TABLE_A[(i / 2) + 1];
	bs[1] = COSINE_TABLE_B[(i / 2) + 1];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, bs, temps);
	org.apache.commons.math.util.FastMathCalc.splitMult(ys, as, result);
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	SINE_TABLE_A[i] = result[0];
	SINE_TABLE_B[i] = result[1];


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, bs, result);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, as, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(d)) {
	return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
} else { 	if (d == 0) {
		return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
	}}:if (java.lang.Double.isInfinite(d)) {
	return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
} else { 	if (d == 0) {
		return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (containsKey(key, index)) {
	return true;
}:if (containsKey(key, index)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + (numElements + 1)) > internalArray.length) {
	expand();
}:if ((this.startIndex + (this.numElements + 1)) > this.internalArray.length) {
	expand();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (other instanceof org.apache.commons.math.util.TransformerMap) {
	org.apache.commons.math.util.TransformerMap rhs = ((org.apache.commons.math.util.TransformerMap) (other));
	if (!defaultTransformer.equals(rhs.defaultTransformer)) {
		return false;
	}
	if (map.size() != rhs.map.size()) {
		return false;
	}
	for (java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math.util.NumberTransformer> entry : map.entrySet()) {
		if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
			return false;
		}
	}
	return true;
}:if (other instanceof org.apache.commons.math.util.TransformerMap) {
	org.apache.commons.math.util.TransformerMap $0 = ((org.apache.commons.math.util.TransformerMap) (other));
	if (!this.defaultTransformer.equals($0.defaultTransformer)) {
		return false;
	}
	if (this.map.size() != $0.map.size()) {
		return false;
	}
	for (java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math.util.NumberTransformer> $1 : this.map.entrySet()) {
		if (!$1.getValue().equals($0.map.get($1.getKey()))) {
			return false;
		}
	}
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	previous = values[index];
	newMapping = false;
}:if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	previous = this.values[index];
	newMapping = false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2)) {





	double scaleFactor = 1.0;
	double lastScaleFactor = 1.0;
	final int maxPower = 5;
	final double scale = org.apache.commons.math.util.FastMath.max(a, b);
	if (scale <= 0) {
		throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	infinite = true;
	for (int i = 0; i < maxPower; i++) {
		lastScaleFactor = scaleFactor;
		scaleFactor *= scale;
		if ((a != 0.0) && (a > b)) {
			p2 = (p1 / lastScaleFactor) + ((b / scaleFactor) * p0);
			q2 = (q1 / lastScaleFactor) + ((b / scaleFactor) * q0);
		} else { 			if (b != 0) {
				p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
				q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
			}}
		infinite = java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2);
		if (!infinite) {
			break;
		}
	}
}:if (java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2)) {





	double $0 = 1.0;
	double $1 = 1.0;
	final int $2 = 5;
	final double $3 = org.apache.commons.math.util.FastMath.max(a, b);
	if ($3 <= 0) {
		throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	infinite = true;
	for (int $4 = 0; $4 < $2; $4++) {
		$1 = $0;
		$0 *= $3;
		if ((a != 0.0) && (a > b)) {
			p2 = (p1 / $1) + ((b / $0) * p0);
			q2 = (q1 / $1) + ((b / $0) * q0);
		} else { 			if (b != 0) {
				p2 = ((a / $0) * p1) + (p0 / $1);
				q2 = ((a / $0) * q1) + (q0 / $1);
			}}
		infinite = java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2);
		if (!infinite) {
			break;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs > x3max) {
	double r = x3max / xabs;
	s3 = 1 + ((s3 * r) * r);
	x3max = xabs;
} else {
	if (xabs != 0) {
		double r = xabs / x3max;
		s3 += r * r;
	}
}:if (xabs > x3max) {
	double $3 = x3max / xabs;
	s3 = 1 + ((s3 * $3) * $3);
	x3max = xabs;
} else {
	if (xabs != 0) {
		double $4 = xabs / x3max;
		s3 += $4 * $4;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = 0.0;
	hiPrec[1] = 0.0;
}:if (hiPrec != null) {
	hiPrec[0] = 0.0;
	hiPrec[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
	return -0.0;
}:if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.003) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
} else {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
}:if (a > 0.003) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
} else {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (v > 0) {
	v = -v;
}:if (v > 0) {
	v = -v;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (endIndex < source.length()) {
	if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
		ret = java.lang.Double.valueOf(value);
		pos.setIndex(endIndex);
	}
}:if (endIndex < source.length()) {
	if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
		ret = java.lang.Double.valueOf(value);
		pos.setIndex(endIndex);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	expIntA[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	expIntB[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}:if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	expIntA[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	expIntB[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.multiply(fraction.numerator), 
denominator.multiply(fraction.denominator)):return new org.apache.commons.math.fraction.BigFraction(this.numerator.multiply(fraction.numerator), 
this.denominator.multiply(fraction.denominator))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionFormat.getProperInstance(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.FractionFormat.getProperInstance(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return null:return null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.Fraction.ONE:return org.apache.commons.math.fraction.Fraction.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator - (i * denominator), denominator):return new org.apache.commons.math.fraction.Fraction(this.numerator - (i * this.denominator), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return toAppendTo:return toAppendTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return:return
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator, denominator.multiply(bg)):return new org.apache.commons.math.fraction.BigFraction(this.numerator, this.denominator.multiply(bg))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFraction.class:return org.apache.commons.math.fraction.BigFraction.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((int) (doubleValue())):return ((int) (doubleValue()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return n:return n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return divide(java.math.BigInteger.valueOf(l)):return divide(java.math.BigInteger.valueOf(l))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(((java.lang.Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.copySign(1, w), d):return new org.apache.commons.math.fraction.Fraction(((java.lang.Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.copySign(1, w), d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return nf:return nf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return denominatorFormat:return this.denominatorFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return nOd.compareTo(dOn):return nOd.compareTo(dOn)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return format(java.lang.Double.valueOf(value), buffer, position):return format(java.lang.Double.valueOf(value), buffer, position)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(denominator, -exponent), 
org.apache.commons.math.util.ArithmeticUtils.pow(numerator, -exponent)):return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(this.denominator, -exponent), 
org.apache.commons.math.util.ArithmeticUtils.pow(this.numerator, -exponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return subtract(java.math.BigInteger.valueOf(l)):return subtract(java.math.BigInteger.valueOf(l))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.ProperBigFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale)):return new org.apache.commons.math.fraction.ProperBigFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.Fraction.class:return org.apache.commons.math.fraction.Fraction.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.FractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale)):return new org.apache.commons.math.fraction.FractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return addSub(fraction, true):return addSub(fraction, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator + (i * denominator), denominator):return new org.apache.commons.math.fraction.Fraction(this.numerator + (i * this.denominator), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionField.LazyHolder.INSTANCE:return org.apache.commons.math.fraction.FractionField.LazyHolder.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator.divide(denominator).longValue():return this.numerator.divide(this.denominator).longValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(fraction.reciprocal()):return multiply(fraction.reciprocal())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator:return this.numerator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(w.intValue(), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(denominator / d1, 
fraction.denominator / d2)):return new org.apache.commons.math.fraction.Fraction(w.intValue(), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(this.denominator / d1, 
fraction.denominator / d2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return add(java.math.BigInteger.valueOf(l)):return add(java.math.BigInteger.valueOf(l))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator.longValue():return this.numerator.longValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(100).doubleValue():return multiply(100).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(
isAdd ? org.apache.commons.math.util.ArithmeticUtils.addAndCheck(uvp, upv) : 
org.apache.commons.math.util.ArithmeticUtils.subAndCheck(uvp, upv), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(denominator, fraction.denominator)):return new org.apache.commons.math.fraction.Fraction(
isAdd ? org.apache.commons.math.util.ArithmeticUtils.addAndCheck(uvp, upv) : 
org.apache.commons.math.util.ArithmeticUtils.subAndCheck(uvp, upv), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(this.denominator, fraction.denominator))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return denominator:return this.denominator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator.divide(denominator).intValue():return this.numerator.divide(this.denominator).intValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(denominator, numerator):return new org.apache.commons.math.fraction.Fraction(this.denominator, this.numerator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((float) (doubleValue())):return ((float) (doubleValue()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new java.math.BigDecimal(numerator).divide(new java.math.BigDecimal(denominator)):return new java.math.BigDecimal(this.numerator).divide(new java.math.BigDecimal(this.denominator))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return format(java.lang.Long.valueOf(value), buffer, position):return format(java.lang.Long.valueOf(value), buffer, position)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numeratorFormat:return this.numeratorFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator, denominator):return new org.apache.commons.math.fraction.BigFraction(numerator, denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(num, den):return new org.apache.commons.math.fraction.BigFraction(num, den)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return divide(java.math.BigInteger.valueOf(i)):return divide(java.math.BigInteger.valueOf(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator, denominator * i):return new org.apache.commons.math.fraction.Fraction(this.numerator, this.denominator * i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionFormat.getImproperInstance().format(f):return org.apache.commons.math.fraction.BigFractionFormat.getImproperInstance().format(f)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(-numerator, denominator):return new org.apache.commons.math.fraction.Fraction(-this.numerator, this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (37 * ((37 * 17) + numerator.hashCode())) + denominator.hashCode():return (37 * ((37 * 17) + this.numerator.hashCode())) + this.denominator.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(denominator, eNeg), 
org.apache.commons.math.util.ArithmeticUtils.pow(numerator, eNeg)):return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(this.denominator, eNeg), 
org.apache.commons.math.util.ArithmeticUtils.pow(this.numerator, eNeg))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new java.math.BigDecimal(numerator).divide(new java.math.BigDecimal(denominator), scale, roundingMode):return new java.math.BigDecimal(this.numerator).divide(new java.math.BigDecimal(this.denominator), scale, roundingMode)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(java.math.BigInteger.valueOf(i)):return multiply(java.math.BigInteger.valueOf(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return addSub(fraction, false):return addSub(fraction, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator, denominator):return new org.apache.commons.math.fraction.Fraction(numerator, denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return str:return str
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionField.LazyHolder.INSTANCE:return org.apache.commons.math.fraction.BigFractionField.LazyHolder.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.ProperFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale)):return new org.apache.commons.math.fraction.ProperFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionField.getInstance():return org.apache.commons.math.fraction.BigFractionField.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator.intValue():return this.numerator.intValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionFormat.getImproperInstance(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.FractionFormat.getImproperInstance(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.divide(gcd), denominator.divide(gcd)):return new org.apache.commons.math.fraction.BigFraction(this.numerator.divide(gcd), this.denominator.divide(gcd))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.text.NumberFormat.getAvailableLocales():return java.text.NumberFormat.getAvailableLocales()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(java.math.BigInteger.valueOf(l)):return multiply(java.math.BigInteger.valueOf(l))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.negate(), denominator):return new org.apache.commons.math.fraction.BigFraction(this.numerator.negate(), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return this:return this
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.pow(exponent), denominator.pow(exponent)):return new org.apache.commons.math.fraction.BigFraction(this.numerator.pow(exponent), this.denominator.pow(exponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionField.getInstance():return org.apache.commons.math.fraction.FractionField.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(denominator.pow(-exponent), numerator.pow(-exponent)):return new org.apache.commons.math.fraction.BigFraction(this.denominator.pow(-exponent), this.numerator.pow(-exponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFraction.ZERO:return org.apache.commons.math.fraction.BigFraction.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return denominator.longValue():return this.denominator.longValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.Fraction.ZERO:return org.apache.commons.math.fraction.Fraction.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.subtract(denominator.multiply(bg)), denominator):return new org.apache.commons.math.fraction.BigFraction(this.numerator.subtract(this.denominator.multiply(bg)), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.util.FastMath.pow(numerator.doubleValue(), exponent) / 
org.apache.commons.math.util.FastMath.pow(denominator.doubleValue(), exponent):return org.apache.commons.math.util.FastMath.pow(this.numerator.doubleValue(), exponent) / 
org.apache.commons.math.util.FastMath.pow(this.denominator.doubleValue(), exponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return wholeFormat:return this.wholeFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return nOd < dOn ? -1 : nOd > dOn ? +1 : 0:return nOd < dOn ? -1 : nOd > dOn ? +1 : 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(denominator, numerator):return new org.apache.commons.math.fraction.BigFraction(this.denominator, this.numerator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED).doubleValue():return multiply(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (numerator == rhs.numerator) && 
(denominator == rhs.denominator):return (this.numerator == rhs.numerator) && 
(this.denominator == rhs.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator * i, denominator):return new org.apache.commons.math.fraction.Fraction(this.numerator * i, this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(num.intValue(), den.intValue()):return new org.apache.commons.math.fraction.Fraction(num.intValue(), den.intValue())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionFormat.getImproperInstance().format(f):return org.apache.commons.math.fraction.FractionFormat.getImproperInstance().format(f)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionFormat.getProperInstance(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.BigFractionFormat.getProperInstance(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((long) (doubleValue())):return ((long) (doubleValue()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(numerator, exponent), 
org.apache.commons.math.util.ArithmeticUtils.pow(denominator, exponent)):return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(this.numerator, exponent), 
org.apache.commons.math.util.ArithmeticUtils.pow(this.denominator, exponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new java.math.BigDecimal(numerator).divide(new java.math.BigDecimal(denominator), roundingMode):return new java.math.BigDecimal(this.numerator).divide(new java.math.BigDecimal(this.denominator), roundingMode)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.Fraction.getReducedFraction(
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1)):return org.apache.commons.math.fraction.Fraction.getReducedFraction(
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(this.numerator / d1, fraction.numerator / d2), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(this.denominator / d2, fraction.denominator / d1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return subtract(java.math.BigInteger.valueOf(i)):return subtract(java.math.BigInteger.valueOf(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFraction.ONE:return org.apache.commons.math.fraction.BigFraction.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.add(denominator.multiply(bg)), denominator):return new org.apache.commons.math.fraction.BigFraction(this.numerator.add(this.denominator.multiply(bg)), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return false:return false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return add(java.math.BigInteger.valueOf(i)):return add(java.math.BigInteger.valueOf(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ret:return ret
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return result:return result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return denominator.intValue():return this.denominator.intValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return isAdd ? fraction : fraction.negate():return isAdd ? fraction : fraction.negate()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(bg.multiply(numerator), denominator):return new org.apache.commons.math.fraction.BigFraction(bg.multiply(this.numerator), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((double) (numerator)) / ((double) (denominator)):return ((double) (this.numerator)) / ((double) (this.denominator))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale)):return new org.apache.commons.math.fraction.BigFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.math.BigInteger.ZERO.compareTo(numerator) <= 0 ? this : negate():return java.math.BigInteger.ZERO.compareTo(this.numerator) <= 0 ? this : negate()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (37 * ((37 * 17) + numerator)) + denominator:return (37 * ((37 * 17) + this.numerator)) + this.denominator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionFormat.getImproperInstance(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.BigFractionFormat.getImproperInstance(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return true:return true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < n) {
	ret = c;
}:if (index < n) {
	ret = c;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}:if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((k == 1) || (k == (n - 1))) {
	return n;
}:if ((k == 1) || (k == (n - 1))) {
	return n;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	ret = a - b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
}:if (a < 0) {
	ret = a - b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.NEGATIVE_INFINITY) {

	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) < 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}:if (y == java.lang.Double.NEGATIVE_INFINITY) {

	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) < 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (cotanFlag) {
	xbadj = -xbadj;
}:if (cotanFlag) {
	xbadj = -xbadj;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
} else {
	LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
}:if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
} else {
	org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	long bits = java.lang.Double.doubleToLongBits(x);
	if ((bits & 0x8000000000000000L) != 0) {

		long yi = ((long) (y));

		if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
			return -0.0;
		}
	}

	if (y < 0) {
		return java.lang.Double.POSITIVE_INFINITY;
	}
	if (y > 0) {
		return 0.0;
	}

	return java.lang.Double.NaN;
}:if (x == 0) {
	long $1 = java.lang.Double.doubleToLongBits(x);
	if (($1 & 0x8000000000000000L) != 0) {

		long $2 = ((long) (y));

		if (((y < 0) && (y == $2)) && (($2 & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		if (((y > 0) && (y == $2)) && (($2 & 1) == 1)) {
			return -0.0;
		}
	}

	if (y < 0) {
		return java.lang.Double.POSITIVE_INFINITY;
	}
	if (y > 0) {
		return 0.0;
	}

	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0.0) {
	return x;
}:if (x == 0.0) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (mostSignificantLostBit != 0) {

	mantissa++;
}:if (mostSignificantLostBit != 0) {

	mantissa++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] expInt = org.apache.commons.math.util.FastMathResources.loadExpInt();
	EXP_INT_TABLE_A = expInt[0];
	EXP_INT_TABLE_B = expInt[1];
} else {
	EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
	EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
}:if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] $0 = org.apache.commons.math.util.FastMathResources.loadExpInt();
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = $0[0];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = $0[1];
} else {
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 8.0E298) && (y > (-8.0E298))) {
	double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000;
	ya = (y + tmp1) - tmp1;
	yb = y - ya;
} else {
	double tmp1 = y * 9.313225746154785E-10;
	double tmp2 = tmp1 * 9.313225746154785E-10;
	ya = (((tmp1 + tmp2) - tmp1) * org.apache.commons.math.util.FastMath.HEX_40000000) * org.apache.commons.math.util.FastMath.HEX_40000000;
	yb = y - ya;
}:if ((y < 8.0E298) && (y > (-8.0E298))) {
	double $7 = y * org.apache.commons.math.util.FastMath.HEX_40000000;
	ya = (y + $7) - $7;
	yb = y - ya;
} else {
	double $8 = y * 9.313225746154785E-10;
	double $9 = $8 * 9.313225746154785E-10;
	ya = ((($8 + $9) - $8) * org.apache.commons.math.util.FastMath.HEX_40000000) * org.apache.commons.math.util.FastMath.HEX_40000000;
	yb = y - ya;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s1 != 0) {
	norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max));
} else {
	if (s2 == 0) {
		norm = x3max * java.lang.Math.sqrt(s3);
	} else {
		if (s2 >= x3max) {
			norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
		} else {
			norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
		}
	}
}:if (s1 != 0) {
	norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max));
} else {
	if (s2 == 0) {
		norm = x3max * java.lang.Math.sqrt(s3);
	} else {
		if (s2 >= x3max) {
			norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
		} else {
			norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x <= (-1.0)) || (x >= 1.0)) {


	double[] hiPrec = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, hiPrec);
	if (x > 0.0) {
		return ((-1.0) + hiPrec[0]) + hiPrec[1];
	} else {
		final double ra = (-1.0) + hiPrec[0];
		double rb = -((ra + 1.0) - hiPrec[0]);
		rb += hiPrec[1];
		return ra + rb;
	}
}:if ((x <= (-1.0)) || (x >= 1.0)) {


	double[] $2 = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, $2);
	if (x > 0.0) {
		return ((-1.0) + $2[0]) + $2[1];
	} else {
		final double $3 = (-1.0) + $2[0];
		double $4 = -(($3 + 1.0) - $2[0]);
		$4 += $2[1];
		return $3 + $4;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	EXP_FRAC_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];
	EXP_FRAC_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];

	final double[] tmp = new double[2];


	final double factor = 1.0 / (org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN - 1);
	for (int i = 0; i < org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length; i++) {
		org.apache.commons.math.util.FastMathCalc.slowexp(i * factor, tmp);
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] expFrac = org.apache.commons.math.util.FastMathResources.loadExpFrac();
		EXP_FRAC_TABLE_A = expFrac[0];
		EXP_FRAC_TABLE_B = expFrac[1];
	} else {
		EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
		EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
	}}:if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];

	final double[] $1 = new double[2];


	final double $2 = 1.0 / (org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN - 1);
	for (int $3 = 0; $3 < org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length; $3++) {
		org.apache.commons.math.util.FastMathCalc.slowexp($3 * $2, $1);
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[$3] = $1[0];
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[$3] = $1[1];
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] $4 = org.apache.commons.math.util.FastMathResources.loadExpFrac();
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = $4[0];
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = $4[1];
	} else {
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	return false;
}:if (o == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.apache.commons.math.util.Precision.equalsIncludingNaN(x[i], y[i])) {
	return false;
}:if (!org.apache.commons.math.util.Precision.equalsIncludingNaN(x[i], y[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}:if (x == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x != x) {
	return x;
}:if (x != x) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((exp == (-1)) || (exp == 0)) {
	if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




		double xa = x - 1.0;
		double xb = (xa - x) + 1.0;
		double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000;
		double aa = (xa + tmp) - tmp;
		double ab = xa - aa;
		xa = aa;
		xb = ab;

		double ya = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
		double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

		for (int i = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; i >= 0; i--) {

			aa = ya * xa;
			ab = ((ya * xb) + (yb * xa)) + (yb * xb);

			tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
			ya = (aa + tmp) - tmp;
			yb = (aa - ya) + ab;


			aa = ya + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][0];
			ab = yb + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][1];

			tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
			ya = (aa + tmp) - tmp;
			yb = (aa - ya) + ab;
		}


		aa = ya * xa;
		ab = ((ya * xb) + (yb * xa)) + (yb * xb);

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;

		return ya + yb;
	}
}:if ((exp == (-1)) || (exp == 0)) {
	if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




		double $8 = x - 1.0;
		double $9 = ($8 - x) + 1.0;
		double $10 = $8 * org.apache.commons.math.util.FastMath.HEX_40000000;
		double $11 = ($8 + $10) - $10;
		double $12 = $8 - $11;
		$8 = $11;
		$9 = $12;

		double $13 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
		double $14 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

		for (int $15 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; $15 >= 0; $15--) {

			$11 = $13 * $8;
			$12 = (($13 * $9) + ($14 * $8)) + ($14 * $9);

			$10 = $11 * org.apache.commons.math.util.FastMath.HEX_40000000;
			$13 = ($11 + $10) - $10;
			$14 = ($11 - $13) + $12;


			$11 = $13 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$15][0];
			$12 = $14 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$15][1];

			$10 = $11 * org.apache.commons.math.util.FastMath.HEX_40000000;
			$13 = ($11 + $10) - $10;
			$14 = ($11 - $13) + $12;
		}


		$11 = $13 * $8;
		$12 = (($13 * $9) + ($14 * $8)) + ($14 * $9);

		$10 = $11 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$13 = ($11 + $10) - $10;
		$14 = ($11 - $13) + $12;

		return $13 + $14;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prodA++;
}:if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prodA++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n > (-1023)) && (n < 1024)) {
	return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52);
}:if ((n > (-1023)) && (n < 1024)) {
	return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!result) {
	return false;
} else {
	return java.util.Arrays.equals(internalArray, other.internalArray);
}:if (!result) {
	return false;
} else {
	return java.util.Arrays.equals(this.internalArray, other.internalArray);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}:if ((sign >= 0) && 
(magnitude == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = a;
	hiPrec[1] = b;
}:if (hiPrec != null) {
	hiPrec[0] = a;
	hiPrec[1] = b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (containsKey(key, index)) {
	return values[index];
}:if (containsKey(key, index)) {
	return this.values[index];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToFieldHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToFieldHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToFieldHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToFieldHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK - xInt;
}:if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK - xInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	previous = values[index];
	newMapping = false;
}:if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	previous = this.values[index];
	newMapping = false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	return (internalArray.length / ((float) (numElements))) > contractionCriteria;
} else {
	return (internalArray.length - numElements) > contractionCriteria;
}:if (this.expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	return (this.internalArray.length / ((float) (this.numElements))) > this.contractionCriteria;
} else {
	return (this.internalArray.length - this.numElements) > this.contractionCriteria;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {
	return b;
}:if (a > b) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {

	hiPrec[0] = tempA;
	hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
}:if (hiPrec != null) {

	hiPrec[0] = tempA;
	hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d < 0.5) {
	return y;
}:if (d < 0.5) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((object instanceof org.apache.commons.math.util.ResizableDoubleArray) == false) {
	return false;
}:if ((object instanceof org.apache.commons.math.util.ResizableDoubleArray) == false) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (current < 0) {
	throw new java.util.NoSuchElementException();
}:if (this.current < 0) {
	throw new java.util.NoSuchElementException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return missingEntries;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return this.missingEntries;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0) {
	negative = true;
	xa = -xa;
}:if (x < 0) {
	negative = true;
	xa = -xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x.length != y.length) {
	return false;
}:if (x.length != y.length) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (initialArray == null) {
	this.internalArray = new double[initialCapacity];
} else {
	this.internalArray = new double[initialArray.length];
	java.lang.System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);
	initialCapacity = initialArray.length;
	numElements = initialArray.length;
}:if (initialArray == null) {
	this.internalArray = new double[this.initialCapacity];
} else {
	this.internalArray = new double[initialArray.length];
	java.lang.System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);
	this.initialCapacity = initialArray.length;
	this.numElements = initialArray.length;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expansion <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, 
	expansion);
}:if (expansion <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, 
	expansion);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math.util.FastMathCalc.slowLog(d);
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
	} else {
		LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
	}}:if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	org.apache.commons.math.util.FastMath.lnMant.LN_MANT = new double[org.apache.commons.math.util.FastMath.LN_MANT_LEN][];


	for (int $0 = 0; $0 < org.apache.commons.math.util.FastMath.lnMant.LN_MANT.length; $0++) {
		final double $1 = java.lang.Double.longBitsToDouble((((long) ($0)) << 42) | 0x3ff0000000000000L);
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT[$0] = org.apache.commons.math.util.FastMathCalc.slowLog($1);
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
	} else {
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else { 		if (scaledExponent > (-53)) {



			mantissa = mantissa | (1L << 52);


			final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if (mostSignificantLostBit != 0) {

				mantissa++;
			}
			return java.lang.Double.longBitsToDouble(sign | mantissa);

		} else {

			return sign == 0L ? 0.0 : -0.0;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 52) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0xfffffffffffffL;

		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}}
}:if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else { 		if (scaledExponent > (-53)) {



			mantissa = mantissa | (1L << 52);


			final long $2 = mantissa & (1L << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if ($2 != 0) {

				mantissa++;
			}
			return java.lang.Double.longBitsToDouble(sign | mantissa);

		} else {

			return sign == 0L ? 0.0 : -0.0;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 52) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0xfffffffffffffL;

		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shouldContract()) {
	contract();
}:if (shouldContract()) {
	contract();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
}:if (java.lang.Double.isInfinite(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shouldGrowTable()) {
	growTable();
}:if (shouldGrowTable()) {
	growTable();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(f) || java.lang.Double.isNaN(direction)) {
	return java.lang.Float.NaN;
} else { 	if (f == direction) {
		return ((float) (direction));
	} else { 		if (java.lang.Float.isInfinite(f)) {
			return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
		} else { 			if (f == 0.0F) {
				return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
			}}}}:if (java.lang.Double.isNaN(f) || java.lang.Double.isNaN(direction)) {
	return java.lang.Float.NaN;
} else { 	if (f == direction) {
		return ((float) (direction));
	} else { 		if (java.lang.Float.isInfinite(f)) {
			return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
		} else { 			if (f == 0.0F) {
				return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == 0) {


	while ((mantissa >>> 52) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0xfffffffffffffL;

	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}}:if (exponent == 0) {


	while ((mantissa >>> 52) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0xfffffffffffffL;

	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	x = -x;
	negate = true;
}:if (x < 0.0) {
	x = -x;
	negate = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 21) {
	return org.apache.commons.math.util.ArithmeticUtils.factorial(n);
}:if (n < 21) {
	return org.apache.commons.math.util.ArithmeticUtils.factorial(n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrecOut != null) {
	hiPrecOut[0] = ya;
	hiPrecOut[1] = yb;
}:if (hiPrecOut != null) {
	hiPrecOut[0] = ya;
	hiPrecOut[1] = yb;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x)) {
	return java.lang.Double.POSITIVE_INFINITY;
}:if (java.lang.Double.isInfinite(x)) {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (sum == 0) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
}:if (sum == 0) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + i) > internalArray.length) {
	expandTo(startIndex + i);
}:if ((this.startIndex + i) > this.internalArray.length) {
	expandTo(this.startIndex + i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}:if ((sign >= 0) && 
(magnitude == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.0036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
}:if (a > 0.0036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.167) {
	absAsinh = org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.FastMath.sqrt((a * a) + 1) + a);
} else {
	final double a2 = a * a;
	if (a > 0.097) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else { 			if (a > 0.0036) {
				absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			} else {
				absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			}}}
}:if (a > 0.167) {
	absAsinh = org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.FastMath.sqrt((a * a) + 1) + a);
} else {
	final double $0 = a * a;
	if (a > 0.097) {
		absAsinh = a * (1 - (($0 * (org.apache.commons.math.util.FastMath.F_1_3 - (($0 * (org.apache.commons.math.util.FastMath.F_1_5 - (($0 * (org.apache.commons.math.util.FastMath.F_1_7 - (($0 * (org.apache.commons.math.util.FastMath.F_1_9 - (($0 * (org.apache.commons.math.util.FastMath.F_1_11 - (($0 * (org.apache.commons.math.util.FastMath.F_1_13 - (($0 * (org.apache.commons.math.util.FastMath.F_1_15 - (($0 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.036) {
			absAsinh = a * (1 - (($0 * (org.apache.commons.math.util.FastMath.F_1_3 - (($0 * (org.apache.commons.math.util.FastMath.F_1_5 - (($0 * (org.apache.commons.math.util.FastMath.F_1_7 - (($0 * (org.apache.commons.math.util.FastMath.F_1_9 - (($0 * (org.apache.commons.math.util.FastMath.F_1_11 - (($0 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else { 			if (a > 0.0036) {
				absAsinh = a * (1 - (($0 * (org.apache.commons.math.util.FastMath.F_1_3 - (($0 * (org.apache.commons.math.util.FastMath.F_1_5 - (($0 * (org.apache.commons.math.util.FastMath.F_1_7 - (($0 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			} else {
				absAsinh = a * (1 - (($0 * (org.apache.commons.math.util.FastMath.F_1_3 - (($0 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((quadrant & 1) == 0) {
	result = org.apache.commons.math.util.FastMath.tanQ(xa, xb, false);
} else {
	result = -org.apache.commons.math.util.FastMath.tanQ(xa, xb, true);
}:if ((quadrant & 1) == 0) {
	result = org.apache.commons.math.util.FastMath.tanQ(xa, xb, false);
} else {
	result = -org.apache.commons.math.util.FastMath.tanQ(xa, xb, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	if ((y > 0) || ((1 / y) > 0)) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
	}
}:if (x == 0) {
	if ((y > 0) || ((1 / y) > 0)) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (abort) {
	throw new org.apache.commons.math.exception.NonMonotonicSequenceException(val[index], previous, index, dir, strict);
} else {
	return false;
}:if (abort) {
	throw new org.apache.commons.math.exception.NonMonotonicSequenceException(val[index], previous, index, dir, strict);
} else {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - xInt;
}:if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - xInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
unscaled) / 2.0)) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
}:if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
unscaled) / 2.0)) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == (-1)) {
	return x / 0.0;
}:if (x == (-1)) {
	return x / 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa == 0.0) {
	long bits = java.lang.Double.doubleToLongBits(x);
	if (bits < 0) {
		return -0.0;
	}
	return 0.0;
}:if (xa == 0.0) {
	long $0 = java.lang.Double.doubleToLongBits(x);
	if ($0 < 0) {
		return -0.0;
	}
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
	return java.lang.Double.NaN;
} else {

	final int expX = org.apache.commons.math.util.FastMath.getExponent(x);
	final int expY = org.apache.commons.math.util.FastMath.getExponent(y);
	if (expX > (expY + 27)) {

		return org.apache.commons.math.util.FastMath.abs(x);
	} else { 		if (expY > (expX + 27)) {

			return org.apache.commons.math.util.FastMath.abs(y);
		} else {


			final int middleExp = (expX + expY) / 2;


			final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
			final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


			final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


			return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

		}}

}:if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
	return java.lang.Double.NaN;
} else {

	final int $8 = org.apache.commons.math.util.FastMath.getExponent(x);
	final int $9 = org.apache.commons.math.util.FastMath.getExponent(y);
	if ($8 > ($9 + 27)) {

		return org.apache.commons.math.util.FastMath.abs(x);
	} else { 		if ($9 > ($8 + 27)) {

			return org.apache.commons.math.util.FastMath.abs(y);
		} else {


			final int $10 = ($8 + $9) / 2;


			final double $11 = org.apache.commons.math.util.FastMath.scalb(x, -$10);
			final double $12 = org.apache.commons.math.util.FastMath.scalb(y, -$10);


			final double $13 = org.apache.commons.math.util.FastMath.sqrt(($11 * $11) + ($12 * $12));


			return org.apache.commons.math.util.FastMath.scalb($13, $10);

		}}

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index == max) {

	return true;
}:if (index == max) {

	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_ELEMENT, x, i);
}:if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_ELEMENT, x, i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];
}:if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.087) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math.util.FastMath.F_1_15 + (a2 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
} else { 	if (a > 0.031) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
	} else { 		if (a > 0.003) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
		} else {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
		}}}:if (a > 0.087) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math.util.FastMath.F_1_15 + (a2 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
} else { 	if (a > 0.031) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
	} else { 		if (a > 0.003) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
		} else {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal > 746) {
	if (hiPrec != null) {
		hiPrec[0] = 0.0;
		hiPrec[1] = 0.0;
	}
	return 0.0;
}:if (intVal > 746) {
	if (hiPrec != null) {
		hiPrec[0] = 0.0;
		hiPrec[1] = 0.0;
	}
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (invx == 0) {
	if (x > 0) {
		return y;
	} else {
		return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
	}
}:if (invx == 0) {
	if (x > 0) {
		return y;
	} else {
		return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, n - k);
}:if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (u > 0) {
	u = -u;
}:if (u > 0) {
	u = -u;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((a == 0) || (b == 0)) {
	return 0;
}:if ((a == 0) || (b == 0)) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x != x) || (x == 0.0)) {
	return x;
}:if ((x != x) || (x == 0.0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (containsKey(key, index)) {
	return doRemove(index);
}:if (containsKey(key, index)) {
	return doRemove(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (extra != 0.0) {
	result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
} else {
	result = ((tempC * z) + tempB) + tempA;
}:if (extra != 0.0) {
	result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
} else {
	result = ((tempC * z) + tempB) + tempA;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 1) != 0) {
	continue;
}:if ((i & 1) != 0) {
	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(lores)) {
	return lores;
}:if (java.lang.Double.isInfinite(lores)) {
	return lores;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b < 0) {

	if (a >= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else { 	if (b > 0) {

		if ((java.lang.Long.MIN_VALUE / b) <= a) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();

		}
	} else {

		ret = 0;
	}}:if (b < 0) {

	if (a >= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else { 	if (b > 0) {

		if ((java.lang.Long.MIN_VALUE / b) <= a) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();

		}
	} else {

		ret = 0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a <= (java.lang.Long.MAX_VALUE - b)) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}:if (a <= (java.lang.Long.MAX_VALUE - b)) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs > rdwarf) {
	if (xabs > x1max) {
		double r = x1max / xabs;
		s1 = 1 + ((s1 * r) * r);
		x1max = xabs;
	} else {
		double r = xabs / x1max;
		s1 += r * r;
	}
} else {
	if (xabs > x3max) {
		double r = x3max / xabs;
		s3 = 1 + ((s3 * r) * r);
		x3max = xabs;
	} else {
		if (xabs != 0) {
			double r = xabs / x3max;
			s3 += r * r;
		}
	}
}:if (xabs > rdwarf) {
	if (xabs > x1max) {
		double $5 = x1max / xabs;
		s1 = 1 + ((s1 * $5) * $5);
		x1max = xabs;
	} else {
		double $6 = xabs / x1max;
		s1 += $6 * $6;
	}
} else {
	if (xabs > x3max) {
		double $7 = x3max / xabs;
		s3 = 1 + ((s3 * $7) * $7);
		x3max = xabs;
	} else {
		if (xabs != 0) {
			double $8 = xabs / x3max;
			s3 += $8 * $8;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y > 0) {
	long yi = ((long) (y));
	if ((y == yi) && ((yi & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}:if (y > 0) {
	long $4 = ((long) (y));
	if ((y == $4) && (($4 & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == (-1.0)) {
	return java.lang.Math.PI;
}:if (x == (-1.0)) {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (comp >= 0) {
	return false;
}:if (comp >= 0) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y > 0) || ((1 / y) > 0)) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}:if ((y > 0) || ((1 / y) > 0)) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index >= numElements) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
} else { 	if (index >= 0) {
		return internalArray[startIndex + index];
	} else {
		throw new java.lang.ArrayIndexOutOfBoundsException(index);
	}}:if (index >= this.numElements) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
} else { 	if (index >= 0) {
		return this.internalArray[this.startIndex + index];
	} else {
		throw new java.lang.ArrayIndexOutOfBoundsException(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < k) {
	throw new org.apache.commons.math.exception.NumberIsTooLargeException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, 
	k, n, true);
}:if (n < k) {
	throw new org.apache.commons.math.exception.NumberIsTooLargeException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, 
	k, n, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal > 709) {

	final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
	if (hiPrec != null) {
		hiPrec[0] /= 2.85040095144011776E17;
		hiPrec[1] /= 2.85040095144011776E17;
	}
	return result;
}:if (intVal > 709) {

	final double $0 = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
	if (hiPrec != null) {
		hiPrec[0] /= 2.85040095144011776E17;
		hiPrec[1] /= 2.85040095144011776E17;
	}
	return $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > 0) {

	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else { 	if (scaledExponent > (-24)) {



		mantissa = mantissa | (1 << 23);


		final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if (mostSignificantLostBit != 0) {

			mantissa++;
		}
		return java.lang.Float.intBitsToFloat(sign | mantissa);

	} else {

		return sign == 0 ? 0.0F : -0.0F;
	}}:if (scaledExponent > 0) {

	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else { 	if (scaledExponent > (-24)) {



		mantissa = mantissa | (1 << 23);


		final int $4 = mantissa & (1 << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if ($4 != 0) {

			mantissa++;
		}
		return java.lang.Float.intBitsToFloat(sign | mantissa);

	} else {

		return sign == 0 ? 0.0F : -0.0F;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE, 
	i);
}:if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE, 
	i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(o instanceof org.apache.commons.math.util.Pair)) {
	return false;
} else {
	org.apache.commons.math.util.Pair<?, ?> oP = ((org.apache.commons.math.util.Pair<?, ?>) (o));
	return (key == null ? 
	oP.getKey() == null : 
	key.equals(oP.getKey())) && 
	(value == null ? 
	oP.getValue() == null : 
	value.equals(oP.getValue()));
}:if (!(o instanceof org.apache.commons.math.util.Pair)) {
	return false;
} else {
	org.apache.commons.math.util.Pair<?, ?> $0 = ((org.apache.commons.math.util.Pair<?, ?>) (o));
	return (this.key == null ? 
	$0.getKey() == null : 
	this.key.equals($0.getKey())) && 
	(this.value == null ? 
	$0.getValue() == null : 
	this.value.equals($0.getValue()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x == null) || (y == null)) {
	return !((x == null) ^ (y == null));
}:if ((x == null) || (y == null)) {
	return !((x == null) ^ (y == null));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negative) {

	double denom = 1.0 + ya;
	double denomr = 1.0 / denom;
	double denomb = (-((denom - 1.0) - ya)) + yb;
	double ratio = ya * denomr;
	temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double ra = (ratio + temp) - temp;
	double rb = ratio - ra;

	temp = denom * org.apache.commons.math.util.FastMath.HEX_40000000;
	za = (denom + temp) - temp;
	zb = denom - za;

	rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;










	rb += yb * denomr;
	rb += (((-ya) * denomb) * denomr) * denomr;


	ya = -ra;
	yb = -rb;
}:if (negative) {

	double $5 = 1.0 + ya;
	double $6 = 1.0 / $5;
	double $7 = (-(($5 - 1.0) - ya)) + yb;
	double $8 = ya * $6;
	temp = $8 * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double $9 = ($8 + temp) - temp;
	double $10 = $8 - $9;

	temp = $5 * org.apache.commons.math.util.FastMath.HEX_40000000;
	za = ($5 + temp) - temp;
	zb = $5 - za;

	$10 += ((((ya - (za * $9)) - (za * $10)) - (zb * $9)) - (zb * $10)) * $6;










	$10 += yb * $6;
	$10 += (((-ya) * $7) * $6) * $6;


	ya = -$9;
	yb = -$10;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negative) {
	quadrant ^= 2;
}:if (negative) {
	quadrant ^= 2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}:if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = ((a1 * b1) + (a2 * b2)) + (a3 * b3);
}:if (java.lang.Double.isNaN(result)) {


	result = ((a1 * b1) + (a2 * b2)) + (a3 * b3);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = (a1 * b1) + (a2 * b2);
}:if (java.lang.Double.isNaN(result)) {


	result = (a1 * b1) + (a2 * b2);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x80000000) {
	return b;
}:if (bits == 0x80000000) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < y) {
	return -1;
}:if (x < y) {
	return -1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((expansionMode != org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) && 
(expansionMode != org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE, 
	expansionMode, org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE", 
	org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE, "ADDITIVE_MODE");
}:if ((expansionMode != org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) && 
(expansionMode != org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE, 
	expansionMode, org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE", 
	org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE, "ADDITIVE_MODE");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k == 63) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}:if (k == 63) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b > 0) {

	if ((java.lang.Long.MIN_VALUE / b) <= a) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();

	}
} else {

	ret = 0;
}:if (b > 0) {

	if ((java.lang.Long.MIN_VALUE / b) <= a) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();

	}
} else {

	ret = 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	intVal = ((int) (-x));

	if (intVal > 746) {
		if (hiPrec != null) {
			hiPrec[0] = 0.0;
			hiPrec[1] = 0.0;
		}
		return 0.0;
	}

	if (intVal > 709) {

		final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
		if (hiPrec != null) {
			hiPrec[0] /= 2.85040095144011776E17;
			hiPrec[1] /= 2.85040095144011776E17;
		}
		return result;
	}

	if (intVal == 709) {

		final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
		if (hiPrec != null) {
			hiPrec[0] /= 4.455505956692757;
			hiPrec[1] /= 4.455505956692757;
		}
		return result;
	}

	intVal++;

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];

	intVal = -intVal;
} else {
	intVal = ((int) (x));

	if (intVal > 709) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
			hiPrec[1] = 0.0;
		}
		return java.lang.Double.POSITIVE_INFINITY;
	}

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
}:if (x < 0.0) {
	intVal = ((int) (-x));

	if (intVal > 746) {
		if (hiPrec != null) {
			hiPrec[0] = 0.0;
			hiPrec[1] = 0.0;
		}
		return 0.0;
	}

	if (intVal > 709) {

		final double $2 = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
		if (hiPrec != null) {
			hiPrec[0] /= 2.85040095144011776E17;
			hiPrec[1] /= 2.85040095144011776E17;
		}
		return $2;
	}

	if (intVal == 709) {

		final double $3 = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
		if (hiPrec != null) {
			hiPrec[0] /= 4.455505956692757;
			hiPrec[1] /= 4.455505956692757;
		}
		return $3;
	}

	intVal++;

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];

	intVal = -intVal;
} else {
	intVal = ((int) (x));

	if (intVal > 709) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
			hiPrec[1] = 0.0;
		}
		return java.lang.Double.POSITIVE_INFINITY;
	}

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((direction < f) ^ (sign == 0)) {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
} else {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
}:if ((direction < f) ^ (sign == 0)) {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
} else {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
	ret = java.lang.Double.valueOf(value);
	pos.setIndex(endIndex);
}:if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
	ret = java.lang.Double.valueOf(value);
	pos.setIndex(endIndex);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4);
}:if (java.lang.Double.isNaN(result)) {


	result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0) {
	xa = -xa;
}:if (x < 0) {
	xa = -xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (comp > 0) {
	return false;
}:if (comp > 0) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}:if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (lcm == java.lang.Long.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
	a, b);
}:if (lcm == java.lang.Long.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
	a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);
}:if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Long.MIN_VALUE - b) <= a) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}:if ((java.lang.Long.MIN_VALUE - b) <= a) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y < 0.0) {
	return 0.0;
} else {
	return java.lang.Double.POSITIVE_INFINITY;
}:if (y < 0.0) {
	return 0.0;
} else {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > (-24)) {



	mantissa = mantissa | (1 << 23);


	final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if (mostSignificantLostBit != 0) {

		mantissa++;
	}
	return java.lang.Float.intBitsToFloat(sign | mantissa);

} else {

	return sign == 0 ? 0.0F : -0.0F;
}:if (scaledExponent > (-24)) {



	mantissa = mantissa | (1 << 23);


	final int $3 = mantissa & (1 << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if ($3 != 0) {

		mantissa++;
	}
	return java.lang.Float.intBitsToFloat(sign | mantissa);

} else {

	return sign == 0 ? 0.0F : -0.0F;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
}:if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a != b) {
	return java.lang.Double.NaN;
}:if (a != b) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (in[0] == 0.0) {
	in[0] = in[1];
	in[1] = 0.0;
}:if (in[0] == 0.0) {
	in[0] = in[1];
	in[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < b) {
	return a;
}:if (a < b) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (object == this) {
	return true;
}:if (object == this) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (ra == 0) {
	ra = org.apache.commons.math.util.FastMath.copySign(0.0, y);
}:if (ra == 0) {
	ra = org.apache.commons.math.util.FastMath.copySign(0.0, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	return java.lang.Double.NEGATIVE_INFINITY;
}:if (x == 0) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NaN;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || (x == 0.0)) {
	return x;
}:if (java.lang.Double.isInfinite(x) || (x == 0.0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}:if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa < 1) {
	idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
} else {
	final double oneOverXa = 1 / xa;
	idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
}:if (xa < 1) {
	idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
} else {
	final double $0 = 1 / xa;
	idx = ((int) ((-(((((-1.7168146928204135) * $0) * $0) + 8.0) * $0)) + 13.07));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negate ^ leftPlane) {
	result = -result;
}:if (negate ^ leftPlane) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + numElements) > internalArray.length) {
	expand();
}:if ((this.startIndex + this.numElements) > this.internalArray.length) {
	expand();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(r)) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
}:if (java.lang.Double.isNaN(r)) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 0) {
	return y;
} else {
	return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
}:if (x > 0) {
	return y;
} else {
	return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == 0) {
	final double result = x * y;
	final double invx = 1.0 / x;
	final double invy = 1.0 / y;

	if (invx == 0) {
		if (x > 0) {
			return y;
		} else {
			return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
		}
	}

	if ((x < 0) || (invx < 0)) {
		if ((y < 0) || (invy < 0)) {
			return -java.lang.Math.PI;
		} else {
			return java.lang.Math.PI;
		}
	} else {
		return result;
	}
}:if (y == 0) {
	final double $0 = x * y;
	final double $1 = 1.0 / x;
	final double $2 = 1.0 / y;

	if ($1 == 0) {
		if (x > 0) {
			return y;
		} else {
			return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
		}
	}

	if ((x < 0) || ($1 < 0)) {
		if ((y < 0) || ($2 < 0)) {
			return -java.lang.Math.PI;
		} else {
			return java.lang.Math.PI;
		}
	} else {
		return $0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];

	org.apache.commons.math.util.FastMathCalc.resplit(result);
}:if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];

	org.apache.commons.math.util.FastMathCalc.resplit(result);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d == direction) {
	return direction;
} else { 	if (java.lang.Double.isInfinite(d)) {
		return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
	} else { 		if (d == 0) {
			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
		}}}:if (d == direction) {
	return direction;
} else { 	if (java.lang.Double.isInfinite(d)) {
		return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
	} else { 		if (d == 0) {
			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK - yInt;
}:if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK - yInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x >= 0.5) {
	double[] hiPrec = new double[2];

	org.apache.commons.math.util.FastMath.exp(x * 2.0, 0.0, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);


	double na = (-1.0) + ya;
	double nb = -((na + 1.0) - ya);
	double temp = na + yb;
	nb += -((temp - na) - yb);
	na = temp;


	double da = 1.0 + ya;
	double db = -((da - 1.0) - ya);
	temp = da + yb;
	db += -((temp - da) - yb);
	da = temp;

	temp = da * org.apache.commons.math.util.FastMath.HEX_40000000;
	double daa = (da + temp) - temp;
	double dab = da - daa;


	double ratio = na / da;
	temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	double ratioa = (ratio + temp) - temp;
	double ratiob = ratio - ratioa;


	ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;


	ratiob += nb / da;

	ratiob += (((-db) * na) / da) / da;

	result = ratioa + ratiob;
} else 
{
	double[] hiPrec = new double[2];

	org.apache.commons.math.util.FastMath.expm1(x * 2.0, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);


	double na = ya;
	double nb = yb;


	double da = 2.0 + ya;
	double db = -((da - 2.0) - ya);
	double temp = da + yb;
	db += -((temp - da) - yb);
	da = temp;

	temp = da * org.apache.commons.math.util.FastMath.HEX_40000000;
	double daa = (da + temp) - temp;
	double dab = da - daa;


	double ratio = na / da;
	temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	double ratioa = (ratio + temp) - temp;
	double ratiob = ratio - ratioa;


	ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;


	ratiob += nb / da;

	ratiob += (((-db) * na) / da) / da;

	result = ratioa + ratiob;
}:if (x >= 0.5) {
	double[] $0 = new double[2];

	org.apache.commons.math.util.FastMath.exp(x * 2.0, 0.0, $0);

	double $1 = $0[0] + $0[1];
	double $2 = -(($1 - $0[0]) - $0[1]);


	double $3 = (-1.0) + $1;
	double $4 = -(($3 + 1.0) - $1);
	double $5 = $3 + $2;
	$4 += -(($5 - $3) - $2);
	$3 = $5;


	double $6 = 1.0 + $1;
	double $7 = -(($6 - 1.0) - $1);
	$5 = $6 + $2;
	$7 += -(($5 - $6) - $2);
	$6 = $5;

	$5 = $6 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $8 = ($6 + $5) - $5;
	double $9 = $6 - $8;


	double $10 = $3 / $6;
	$5 = $10 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $11 = ($10 + $5) - $5;
	double $12 = $10 - $11;


	$12 += (((($3 - ($8 * $11)) - ($8 * $12)) - ($9 * $11)) - ($9 * $12)) / $6;


	$12 += $4 / $6;

	$12 += (((-$7) * $3) / $6) / $6;

	result = $11 + $12;
} else 
{
	double[] $13 = new double[2];

	org.apache.commons.math.util.FastMath.expm1(x * 2.0, $13);

	double $14 = $13[0] + $13[1];
	double $15 = -(($14 - $13[0]) - $13[1]);


	double $16 = $14;
	double $17 = $15;


	double $18 = 2.0 + $14;
	double $19 = -(($18 - 2.0) - $14);
	double $20 = $18 + $15;
	$19 += -(($20 - $18) - $15);
	$18 = $20;

	$20 = $18 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $21 = ($18 + $20) - $20;
	double $22 = $18 - $21;


	double $23 = $16 / $18;
	$20 = $23 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $24 = ($23 + $20) - $20;
	double $25 = $23 - $24;


	$25 += (((($16 - ($21 * $24)) - ($21 * $25)) - ($22 * $24)) - ($22 * $25)) / $18;


	$25 += $17 / $18;

	$25 += (((-$19) * $16) / $18) / $18;

	result = $24 + $25;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (number != null) {
	break;
}:if (number != null) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e.compareTo(java.math.BigInteger.ZERO) < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}:if (e.compareTo(java.math.BigInteger.ZERO) < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expY > (expX + 27)) {

	return org.apache.commons.math.util.FastMath.abs(y);
} else {


	final int middleExp = (expX + expY) / 2;


	final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
	final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


	final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


	return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

}:if (expY > (expX + 27)) {

	return org.apache.commons.math.util.FastMath.abs(y);
} else {


	final int $0 = (expX + expY) / 2;


	final double $1 = org.apache.commons.math.util.FastMath.scalb(x, -$0);
	final double $2 = org.apache.commons.math.util.FastMath.scalb(y, -$0);


	final double $3 = org.apache.commons.math.util.FastMath.sqrt(($1 * $1) + ($2 * $2));


	return org.apache.commons.math.util.FastMath.scalb($3, $0);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d == 0) {
	return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
}:if (d == 0) {
	return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (cotanFlag) {
	double tmp;
	tmp = cosa; 	cosa = sina; 	sina = tmp;
	tmp = cosb; 	cosb = sinb; 	sinb = tmp;
}:if (cotanFlag) {
	double $0;
	$0 = cosa; 	cosa = sina; 	sina = $0;
	$0 = cosb; 	cosb = sinb; 	sinb = $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xb != 0.0) {


	double xbadj = xb + ((est * est) * xb);
	if (cotanFlag) {
		xbadj = -xbadj;
	}

	err += xbadj;
}:if (xb != 0.0) {


	double $1 = xb + ((est * est) * xb);
	if (cotanFlag) {
		$1 = -$1;
	}

	err += $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (contraction <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, 
	contraction);
}:if (contraction <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, 
	contraction);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n > 2097) {
	return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}:if (n > 2097) {
	return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (tS <= 0) {
	throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
}:if (tS <= 0) {
	throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0) {




	if (a <= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else {

	ret = 0;
}:if (a > 0) {




	if (a <= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else {

	ret = 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	if ((y > 0) || ((1 / y) > 0)) {
		return 0.0;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -0.0;
	}
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	if ((y > 0) || ((1 / y) > 0)) {
		return 0.0;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal == 709) {

	final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
	if (hiPrec != null) {
		hiPrec[0] /= 4.455505956692757;
		hiPrec[1] /= 4.455505956692757;
	}
	return result;
}:if (intVal == 709) {

	final double $1 = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
	if (hiPrec != null) {
		hiPrec[0] /= 4.455505956692757;
		hiPrec[1] /= 4.455505956692757;
	}
	return $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y > 0) {
	return 0.0;
}:if (y > 0) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n > 20) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if (n > 20) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n > 276) {
	return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}:if (n > 276) {
	return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b == java.lang.Long.MIN_VALUE) {
	if (a < 0) {
		ret = a - b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
	}
} else {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION);
}:if (b == java.lang.Long.MIN_VALUE) {
	if (a < 0) {
		ret = a - b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
	}
} else {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == (-1.0)) {
	return -0.0;
}:if (y == (-1.0)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (initialCapacity > 0) {
	synchronized(this) {
		this.initialCapacity = initialCapacity;
	}
} else {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE, 
	initialCapacity);
}:if (initialCapacity > 0) {
	synchronized(this) {
		this.initialCapacity = initialCapacity;
	}
} else {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE, 
	initialCapacity);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}:if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0) {

	if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
		return org.apache.commons.math.util.FastMath.pow(-x, y);
	}

	if (y == ((long) (y))) {

		return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
	} else {
		return java.lang.Double.NaN;
	}
}:if (x < 0) {

	if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
		return org.apache.commons.math.util.FastMath.pow(-x, y);
	}

	if (y == ((long) (y))) {

		return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
	} else {
		return java.lang.Double.NaN;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 1.633123935319537E16) {
	return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}:if (xa > 1.633123935319537E16) {
	return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || ((1 / y) < 0)) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}:if ((y < 0) || ((1 / y) < 0)) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b < 0) {

	if ((java.lang.Long.MIN_VALUE - b) <= a) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
} else {

	ret = a + b;
}:if (b < 0) {

	if ((java.lang.Long.MIN_VALUE - b) <= a) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
} else {

	ret = a + b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 2) != 0) {
	facts[0] = -facts[0];
	facts[1] = -facts[1];
}:if ((i & 2) != 0) {
	facts[0] = -facts[0];
	facts[1] = -facts[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.Precision.equals(x, y, maxUlps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}:if (org.apache.commons.math.util.Precision.equals(x, y, maxUlps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y.length != len) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(y.length, len);
}:if (y.length != len) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(y.length, len);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d > 0.5) {
	if (y == (-1.0)) {
		return -0.0;
	}
	return y + 1.0;
}:if (d > 0.5) {
	if (y == (-1.0)) {
		return -0.0;
	}
	return y + 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (counter[i] == (size[i] - 1)) {
	counter[i] = 0;
} else {
	++counter[i];
	break;
}:if (this.counter[i] == (this.size[i] - 1)) {
	this.counter[i] = 0;
} else {
	++this.counter[i];
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 20.0) {
	return 1.0;
}:if (x > 20.0) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((e & 0x1) != 0) {
	result = result.multiply(k2p);
}:if ((e & 0x1) != 0) {
	result = result.multiply(k2p);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e.testBit(0)) {
	result = result.multiply(k2p);
}:if (e.testBit(0)) {
	result = result.multiply(k2p);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || java.lang.Double.isInfinite(y)) {
	return java.lang.Double.POSITIVE_INFINITY;
} else { 	if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
		return java.lang.Double.NaN;
	} else {

		final int expX = org.apache.commons.math.util.FastMath.getExponent(x);
		final int expY = org.apache.commons.math.util.FastMath.getExponent(y);
		if (expX > (expY + 27)) {

			return org.apache.commons.math.util.FastMath.abs(x);
		} else { 			if (expY > (expX + 27)) {

				return org.apache.commons.math.util.FastMath.abs(y);
			} else {


				final int middleExp = (expX + expY) / 2;


				final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
				final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


				final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


				return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

			}}

	}}:if (java.lang.Double.isInfinite(x) || java.lang.Double.isInfinite(y)) {
	return java.lang.Double.POSITIVE_INFINITY;
} else { 	if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
		return java.lang.Double.NaN;
	} else {

		final int $14 = org.apache.commons.math.util.FastMath.getExponent(x);
		final int $15 = org.apache.commons.math.util.FastMath.getExponent(y);
		if ($14 > ($15 + 27)) {

			return org.apache.commons.math.util.FastMath.abs(x);
		} else { 			if ($15 > ($14 + 27)) {

				return org.apache.commons.math.util.FastMath.abs(y);
			} else {


				final int $16 = ($14 + $15) / 2;


				final double $17 = org.apache.commons.math.util.FastMath.scalb(x, -$16);
				final double $18 = org.apache.commons.math.util.FastMath.scalb(y, -$16);


				final double $19 = org.apache.commons.math.util.FastMath.sqrt(($17 * $17) + ($18 * $18));


				return org.apache.commons.math.util.FastMath.scalb($19, $16);

			}}

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y < 0) {
	return java.lang.Double.POSITIVE_INFINITY;
}:if (y < 0) {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y == yi) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}:if ((y == yi) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x * x) == 1.0) {
	return java.lang.Double.NaN;
}:if ((x * x) == 1.0) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {

	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.NEGATIVE_INFINITY;
}:if (x == 0) {

	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Float.isInfinite(f)) {
	return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
} else { 	if (f == 0.0F) {
		return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
	}}:if (java.lang.Float.isInfinite(f)) {
	return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
} else { 	if (f == 0.0F) {
		return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expX > (expY + 27)) {

	return org.apache.commons.math.util.FastMath.abs(x);
} else { 	if (expY > (expX + 27)) {

		return org.apache.commons.math.util.FastMath.abs(y);
	} else {


		final int middleExp = (expX + expY) / 2;


		final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
		final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


		final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


		return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

	}}:if (expX > (expY + 27)) {

	return org.apache.commons.math.util.FastMath.abs(x);
} else { 	if (expY > (expX + 27)) {

		return org.apache.commons.math.util.FastMath.abs(y);
	} else {


		final int $4 = (expX + expY) / 2;


		final double $5 = org.apache.commons.math.util.FastMath.scalb(x, -$4);
		final double $6 = org.apache.commons.math.util.FastMath.scalb(y, -$4);


		final double $7 = org.apache.commons.math.util.FastMath.sqrt(($5 * $5) + ($6 * $6));


		return org.apache.commons.math.util.FastMath.scalb($7, $4);

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Float.isNaN(f) || java.lang.Float.isInfinite(f)) || (f == 0.0F)) {
	return f;
}:if ((java.lang.Float.isNaN(f) || java.lang.Float.isInfinite(f)) || (f == 0.0F)) {
	return f;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < n) {
	char c;
	do {
		c = source.charAt(index++);
	} while (java.lang.Character.isWhitespace(c) && (index < n) );
	pos.setIndex(index);

	if (index < n) {
		ret = c;
	}
}:if (index < n) {
	char $0;
	do {
		$0 = source.charAt(index++);
	} while (java.lang.Character.isWhitespace($0) && (index < n) );
	pos.setIndex(index);

	if (index < n) {
		ret = $0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 1.5707963267948966) {




	int k = ((int) (xa * 0.6366197723675814));


	double remA;
	double remB;
	while (true) {
		double a = (-k) * 1.570796251296997;
		remA = xa + a;
		remB = -((remA - xa) - a);

		a = (-k) * 7.549789948768648E-8;
		double b = remA;
		remA = a + b;
		remB += -((remA - b) - a);

		a = (-k) * 6.123233995736766E-17;
		b = remA;
		remA = a + b;
		remB += -((remA - b) - a);

		if (remA > 0.0) {
			break;
		}




		k--;
	} 
	quadrant = k & 3;
	xa = remA;
	xb = remB;
}:if (xa > 1.5707963267948966) {




	int $1 = ((int) (xa * 0.6366197723675814));


	double $2;
	double $3;
	while (true) {
		double $4 = (-$1) * 1.570796251296997;
		$2 = xa + $4;
		$3 = -(($2 - xa) - $4);

		$4 = (-$1) * 7.549789948768648E-8;
		double $5 = $2;
		$2 = $4 + $5;
		$3 += -(($2 - $5) - $4);

		$4 = (-$1) * 6.123233995736766E-17;
		$5 = $2;
		$2 = $4 + $5;
		$3 += -(($2 - $5) - $4);

		if ($2 > 0.0) {
			break;
		}




		$1--;
	} 
	quadrant = $1 & 3;
	xa = $2;
	xb = $3;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expectedLen != actual) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(actual, expectedLen);
}:if (expectedLen != actual) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(actual, expectedLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (resDir.exists()) {
	if (!resDir.isDirectory()) {
		throw new org.apache.commons.math.exception.MathInternalError();
	}
} else {
	try {
		resDir.mkdirs();
	} catch (java.lang.SecurityException e) {
		throw new org.apache.commons.math.exception.MathInternalError(e);
	}
}:if (resDir.exists()) {
	if (!resDir.isDirectory()) {
		throw new org.apache.commons.math.exception.MathInternalError();
	}
} else {
	try {
		resDir.mkdirs();
	} catch (java.lang.SecurityException e) {
		throw new org.apache.commons.math.exception.MathInternalError(e);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result == 0) {
	result = result * x;
}:if (result == 0) {
	result = result * x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa == 0.0) {
	return leftPlane ? org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
}:if (xa == 0.0) {
	return leftPlane ? org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result[1] != result[1]) {
	result[1] = 0.0;
}:if (result[1] != result[1]) {
	result[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y > 0) || ((1 / y) > 0)) {
	return 0.0;
}:if ((y > 0) || ((1 / y) > 0)) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x * x) < 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}:if ((x * x) < 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.0036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	}}:if (a > 0.036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.0036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 1030) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, k));
}:if (n < 1030) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, k));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x != x) {
	return java.lang.Double.NaN;
}:if (x != x) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x > 1.0E-6) || (x < (-1.0E-6))) {
	double xpa = 1.0 + x;
	double xpb = -((xpa - 1.0) - x);

	double[] hiPrec = new double[2];

	final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec);
	if (java.lang.Double.isInfinite(lores)) {
		return lores;
	}



	double fx1 = xpb / xpa;

	double epsilon = (0.5 * fx1) + 1.0;
	epsilon = epsilon * fx1;

	return (epsilon + hiPrec[1]) + hiPrec[0];
}:if ((x > 1.0E-6) || (x < (-1.0E-6))) {
	double $0 = 1.0 + x;
	double $1 = -(($0 - 1.0) - x);

	double[] $2 = new double[2];

	final double $3 = org.apache.commons.math.util.FastMath.log($0, $2);
	if (java.lang.Double.isInfinite($3)) {
		return $3;
	}



	double $4 = $1 / $0;

	double $5 = (0.5 * $4) + 1.0;
	$5 = $5 * $4;

	return ($5 + $2[1]) + $2[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((xa != xa) || (xa == java.lang.Double.POSITIVE_INFINITY)) {
	return java.lang.Double.NaN;
}:if ((xa != xa) || (xa == java.lang.Double.POSITIVE_INFINITY)) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else { 	if (fraction < 0.5) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {

		if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
		unscaled) / 2.0)) {
			unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
		} else {
			unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
		}
	}}:if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else { 	if (fraction < 0.5) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {

		if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
		unscaled) / 2.0)) {
			unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
		} else {
			unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent < 2047) {
	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else {
	return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}:if (scaledExponent < 2047) {
	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else {
	return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == 0) {
	return x * y;
}:if (y == 0) {
	return x * y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (other == null) {
	return false;
}:if (other == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || ((1 / y) < 0)) {
	return -0.0;
}:if ((y < 0) || ((1 / y) < 0)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index < 0) || 
(index >= totalSize)) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
}:if ((index < 0) || 
(index >= this.totalSize)) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, this.totalSize);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] /= 4.455505956692757;
	hiPrec[1] /= 4.455505956692757;
}:if (hiPrec != null) {
	hiPrec[0] /= 4.455505956692757;
	hiPrec[1] /= 4.455505956692757;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == (-1.0)) {
	return (-java.lang.Math.PI) / 2.0;
}:if (x == (-1.0)) {
	return (-java.lang.Math.PI) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
}:if (java.lang.Double.isNaN(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}:if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < (-20)) {
	return -1.0;
}:if (x < (-20)) {
	return -1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (lcm == java.lang.Integer.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
	a, b);
}:if (lcm == java.lang.Integer.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
	a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scale <= 0) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}:if (scale <= 0) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n > (-127)) && (n < 128)) {
	return f * java.lang.Float.intBitsToFloat((n + 127) << 23);
}:if ((n > (-127)) && (n < 128)) {
	return f * java.lang.Float.intBitsToFloat((n + 127) << 23);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n <= 61) {

	int i = (n - k) + 1;
	for (int j = 1; j <= k; j++) {
		result = (result * i) / j;
		i++;
	}
} else { 	if (n <= 66) {


		int i = (n - k) + 1;
		for (int j = 1; j <= k; j++) {






			final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
			result = (result / (j / d)) * (i / d);
			i++;
		}
	} else {



		int i = (n - k) + 1;
		for (int j = 1; j <= k; j++) {
			final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
			result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d);
			i++;
		}
	}}:if (n <= 61) {

	int $6 = (n - k) + 1;
	for (int $7 = 1; $7 <= k; $7++) {
		result = (result * $6) / $7;
		$6++;
	}
} else { 	if (n <= 66) {


		int $8 = (n - k) + 1;
		for (int $9 = 1; $9 <= k; $9++) {






			final long $10 = org.apache.commons.math.util.ArithmeticUtils.gcd($8, $9);
			result = (result / ($9 / $10)) * ($8 / $10);
			$8++;
		}
	} else {



		int $11 = (n - k) + 1;
		for (int $12 = 1; $12 <= k; $12++) {
			final long $13 = org.apache.commons.math.util.ArithmeticUtils.gcd($11, $12);
			result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / ($12 / $13), $11 / $13);
			$11++;
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i > numElements) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, 
	i, numElements);
} else { 	if (i < 0) {
		throw new org.apache.commons.math.exception.MathIllegalArgumentException(
		org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
		i);
	} else {

		numElements -= i;
		if (front) {
			startIndex += i;
		}
	}}:if (i > this.numElements) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, 
	i, this.numElements);
} else { 	if (i < 0) {
		throw new org.apache.commons.math.exception.MathIllegalArgumentException(
		org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
		i);
	} else {

		this.numElements -= i;
		if (front) {
			this.startIndex += i;
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || (invy < 0)) {
	return -java.lang.Math.PI;
} else {
	return java.lang.Math.PI;
}:if ((y < 0) || (invy < 0)) {
	return -java.lang.Math.PI;
} else {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent < 255) {
	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else {
	return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}:if (scaledExponent < 255) {
	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else {
	return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {
	return a;
}:if (a > b) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits < 0) {
	return -0.0;
}:if (bits < 0) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 3294198.0) {



	double[] reduceResults = new double[3];
	org.apache.commons.math.util.FastMath.reducePayneHanek(xa, reduceResults);
	quadrant = ((int) (reduceResults[0])) & 3;
	xa = reduceResults[1];
	xb = reduceResults[2];
} else { 	if (xa > 1.5707963267948966) {




		int k = ((int) (xa * 0.6366197723675814));


		double remA;
		double remB;
		while (true) {
			double a = (-k) * 1.570796251296997;
			remA = xa + a;
			remB = -((remA - xa) - a);

			a = (-k) * 7.549789948768648E-8;
			double b = remA;
			remA = a + b;
			remB += -((remA - b) - a);

			a = (-k) * 6.123233995736766E-17;
			b = remA;
			remA = a + b;
			remB += -((remA - b) - a);

			if (remA > 0.0) {
				break;
			}




			k--;
		} 
		quadrant = k & 3;
		xa = remA;
		xb = remB;
	}}:if (xa > 3294198.0) {



	double[] $6 = new double[3];
	org.apache.commons.math.util.FastMath.reducePayneHanek(xa, $6);
	quadrant = ((int) ($6[0])) & 3;
	xa = $6[1];
	xb = $6[2];
} else { 	if (xa > 1.5707963267948966) {




		int $7 = ((int) (xa * 0.6366197723675814));


		double $8;
		double $9;
		while (true) {
			double $10 = (-$7) * 1.570796251296997;
			$8 = xa + $10;
			$9 = -(($8 - xa) - $10);

			$10 = (-$7) * 7.549789948768648E-8;
			double $11 = $8;
			$8 = $10 + $11;
			$9 += -(($8 - $11) - $10);

			$10 = (-$7) * 6.123233995736766E-17;
			$11 = $8;
			$8 = $10 + $11;
			$9 += -(($8 - $11) - $10);

			if ($8 > 0.0) {
				break;
			}




			$7--;
		} 
		quadrant = $7 & 3;
		xa = $8;
		xb = $9;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 0.25) {
	double[] hiPrec = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);

	double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000;
	double yaa = (ya + temp) - temp;
	double yab = ya - yaa;


	double recip = 1.0 / ya;
	temp = recip * org.apache.commons.math.util.FastMath.HEX_40000000;
	double recipa = (recip + temp) - temp;
	double recipb = recip - recipa;


	recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;

	recipb += ((-yb) * recip) * recip;

	recipa = -recipa;
	recipb = -recipb;


	temp = ya + recipa;
	yb += -((temp - ya) - recipa);
	ya = temp;
	temp = ya + recipb;
	yb += -((temp - ya) - recipb);
	ya = temp;

	result = ya + yb;
	result *= 0.5;
} else 
{
	double[] hiPrec = new double[2];
	org.apache.commons.math.util.FastMath.expm1(x, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);


	double denom = 1.0 + ya;
	double denomr = 1.0 / denom;
	double denomb = (-((denom - 1.0) - ya)) + yb;
	double ratio = ya * denomr;
	double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	double ra = (ratio + temp) - temp;
	double rb = ratio - ra;

	temp = denom * org.apache.commons.math.util.FastMath.HEX_40000000;
	double za = (denom + temp) - temp;
	double zb = denom - za;

	rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;


	rb += yb * denomr;
	rb += (((-ya) * denomb) * denomr) * denomr;


	temp = ya + ra;
	yb += -((temp - ya) - ra);
	ya = temp;
	temp = ya + rb;
	yb += -((temp - ya) - rb);
	ya = temp;

	result = ya + yb;
	result *= 0.5;
}:if (x > 0.25) {
	double[] $0 = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, $0);

	double $1 = $0[0] + $0[1];
	double $2 = -(($1 - $0[0]) - $0[1]);

	double $3 = $1 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $4 = ($1 + $3) - $3;
	double $5 = $1 - $4;


	double $6 = 1.0 / $1;
	$3 = $6 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $7 = ($6 + $3) - $3;
	double $8 = $6 - $7;


	$8 += ((((1.0 - ($4 * $7)) - ($4 * $8)) - ($5 * $7)) - ($5 * $8)) * $6;

	$8 += ((-$2) * $6) * $6;

	$7 = -$7;
	$8 = -$8;


	$3 = $1 + $7;
	$2 += -(($3 - $1) - $7);
	$1 = $3;
	$3 = $1 + $8;
	$2 += -(($3 - $1) - $8);
	$1 = $3;

	result = $1 + $2;
	result *= 0.5;
} else 
{
	double[] $9 = new double[2];
	org.apache.commons.math.util.FastMath.expm1(x, $9);

	double $10 = $9[0] + $9[1];
	double $11 = -(($10 - $9[0]) - $9[1]);


	double $12 = 1.0 + $10;
	double $13 = 1.0 / $12;
	double $14 = (-(($12 - 1.0) - $10)) + $11;
	double $15 = $10 * $13;
	double $16 = $15 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $17 = ($15 + $16) - $16;
	double $18 = $15 - $17;

	$16 = $12 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $19 = ($12 + $16) - $16;
	double $20 = $12 - $19;

	$18 += (((($10 - ($19 * $17)) - ($19 * $18)) - ($20 * $17)) - ($20 * $18)) * $13;


	$18 += $11 * $13;
	$18 += (((-$10) * $14) * $13) * $13;


	$16 = $10 + $17;
	$11 += -(($16 - $10) - $17);
	$10 = $16;
	$16 = $10 + $18;
	$11 += -(($16 - $10) - $18);
	$10 = $16;

	result = $10 + $11;
	result *= 0.5;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((p & 1) != 0) {
	org.apache.commons.math.util.FastMathCalc.quadMult(ys, xs, as);
	ys[0] = as[0]; 	ys[1] = as[1];
}:if ((p & 1) != 0) {
	org.apache.commons.math.util.FastMathCalc.quadMult(ys, xs, as);
	ys[0] = as[0]; 	ys[1] = as[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (0 <= comp) {
	return false;
}:if (0 <= comp) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < (-277)) {
	return f > 0 ? 0.0F : -0.0F;
}:if (n < (-277)) {
	return f > 0 ? 0.0F : -0.0F;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] expFrac = org.apache.commons.math.util.FastMathResources.loadExpFrac();
	EXP_FRAC_TABLE_A = expFrac[0];
	EXP_FRAC_TABLE_B = expFrac[1];
} else {
	EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
	EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
}:if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] $0 = org.apache.commons.math.util.FastMathResources.loadExpFrac();
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = $0[0];
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = $0[1];
} else {
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	x = -x;
	negative = true;
}:if (x < 0.0) {
	x = -x;
	negative = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x80000000) {
	return a;
}:if (bits == 0x80000000) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x8000000000000000L) {
	return b;
}:if (bits == 0x8000000000000000L) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return org.apache.commons.math.util.FastMath.pow(-x, y);
}:if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return org.apache.commons.math.util.FastMath.pow(-x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	hiPrec[1] = 0.0;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	hiPrec[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}:if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(b, a, pattern);
} else {


	if (a < 0) {
		if (b < 0) {

			if ((java.lang.Long.MIN_VALUE - b) <= a) {
				ret = a + b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
			}
		} else {

			ret = a + b;
		}
	} else {




		if (a <= (java.lang.Long.MAX_VALUE - b)) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	}
}:if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(b, a, pattern);
} else {


	if (a < 0) {
		if (b < 0) {

			if ((java.lang.Long.MIN_VALUE - b) <= a) {
				ret = a + b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
			}
		} else {

			ret = a + b;
		}
	} else {




		if (a <= (java.lang.Long.MAX_VALUE - b)) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 1.0) {
	return 0.0;
}:if (x == 1.0) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
}:if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index < 0) || 
(index >= size[i])) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, size[i] - 1);
}:if ((index < 0) || 
(index >= this.size[i])) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, this.size[i] - 1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
	i);
} else {

	numElements -= i;
	if (front) {
		startIndex += i;
	}
}:if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
	i);
} else {

	this.numElements -= i;
	if (front) {
		this.startIndex += i;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x)) {
	return x;
} else {
	return java.lang.Double.NaN;
}:if (java.lang.Double.isInfinite(x)) {
	return x;
} else {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (f == 0.0F) {
	return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
}:if (f == 0.0F) {
	return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (f == direction) {
	return ((float) (direction));
} else { 	if (java.lang.Float.isInfinite(f)) {
		return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
	} else { 		if (f == 0.0F) {
			return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
		}}}:if (f == direction) {
	return ((float) (direction));
} else { 	if (java.lang.Float.isInfinite(f)) {
		return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
	} else { 		if (f == 0.0F) {
			return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
	break;
}:if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x < 0) && (y != x)) {
	y--;
}:if ((x < 0) && (y != x)) {
	y--;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




	double xa = x - 1.0;
	double xb = (xa - x) + 1.0;
	double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000;
	double aa = (xa + tmp) - tmp;
	double ab = xa - aa;
	xa = aa;
	xb = ab;

	double ya = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
	double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

	for (int i = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; i >= 0; i--) {

		aa = ya * xa;
		ab = ((ya * xb) + (yb * xa)) + (yb * xb);

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;


		aa = ya + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][0];
		ab = yb + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][1];

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;
	}


	aa = ya * xa;
	ab = ((ya * xb) + (yb * xa)) + (yb * xb);

	tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
	ya = (aa + tmp) - tmp;
	yb = (aa - ya) + ab;

	return ya + yb;
}:if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




	double $0 = x - 1.0;
	double $1 = ($0 - x) + 1.0;
	double $2 = $0 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $3 = ($0 + $2) - $2;
	double $4 = $0 - $3;
	$0 = $3;
	$1 = $4;

	double $5 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
	double $6 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

	for (int $7 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; $7 >= 0; $7--) {

		$3 = $5 * $0;
		$4 = (($5 * $1) + ($6 * $0)) + ($6 * $1);

		$2 = $3 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$5 = ($3 + $2) - $2;
		$6 = ($3 - $5) + $4;


		$3 = $5 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$7][0];
		$4 = $6 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$7][1];

		$2 = $3 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$5 = ($3 + $2) - $2;
		$6 = ($3 - $5) + $4;
	}


	$3 = $5 * $0;
	$4 = (($5 * $1) + ($6 * $0)) + ($6 * $1);

	$2 = $3 * org.apache.commons.math.util.FastMath.HEX_40000000;
	$5 = ($3 + $2) - $2;
	$6 = ($3 - $5) + $4;

	return $5 + $6;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.Precision.equals(x, y, eps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}:if (org.apache.commons.math.util.Precision.equals(x, y, eps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index >= 0) {
	return internalArray[startIndex + index];
} else {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}:if (index >= 0) {
	return this.internalArray[this.startIndex + index];
} else {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa < 0) {

	xa = -xa;
	xb = -xb;
	negate = true;
}:if (xa < 0) {

	xa = -xa;
	xb = -xb;
	negate = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	EXP_INT_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];
	EXP_INT_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];

	final double[] tmp = new double[2];
	final double[] recip = new double[2];


	for (int i = 0; i < org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX; i++) {
		org.apache.commons.math.util.FastMathCalc.expint(i, tmp);
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[i + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[i + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];

		if (i != 0) {

			org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
		}
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] expInt = org.apache.commons.math.util.FastMathResources.loadExpInt();
		EXP_INT_TABLE_A = expInt[0];
		EXP_INT_TABLE_B = expInt[1];
	} else {
		EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
		EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
	}}:if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];

	final double[] $1 = new double[2];
	final double[] $2 = new double[2];


	for (int $3 = 0; $3 < org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX; $3++) {
		org.apache.commons.math.util.FastMathCalc.expint($3, $1);
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[$3 + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = $1[0];
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[$3 + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = $1[1];

		if ($3 != 0) {

			org.apache.commons.math.util.FastMathCalc.splitReciprocal($1, $2);
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $3] = $2[0];
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $3] = $2[1];
		}
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] $4 = org.apache.commons.math.util.FastMathResources.loadExpInt();
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = $4[0];
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = $4[1];
	} else {
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (y != y) {
		return y;
	}
	if (y < 0.0) {
		return 0.0;
	} else {
		return java.lang.Double.POSITIVE_INFINITY;
	}
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (y != y) {
		return y;
	}
	if (y < 0.0) {
		return 0.0;
	} else {
		return java.lang.Double.POSITIVE_INFINITY;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n == k) || (k == 0)) {
	return 1.0;
}:if ((n == k) || (k == 0)) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k);
}:if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 67) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k);
}:if (n < 67) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	if (b < 0) {

		if (a >= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else { 		if (b > 0) {

			if ((java.lang.Long.MIN_VALUE / b) <= a) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();

			}
		} else {

			ret = 0;
		}}
} else { 	if (a > 0) {




		if (a <= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else {

		ret = 0;
	}}:if (a < 0) {
	if (b < 0) {

		if (a >= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else { 		if (b > 0) {

			if ((java.lang.Long.MIN_VALUE / b) <= a) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();

			}
		} else {

			ret = 0;
		}}
} else { 	if (a > 0) {




		if (a <= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else {

		ret = 0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.POSITIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}:if (y == java.lang.Double.POSITIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (counter[i] != (size[i] - 1)) {
	return true;
}:if (this.counter[i] != (this.size[i] - 1)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}:if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y < 0) {
	long yi = ((long) (y));
	if ((y == yi) && ((yi & 1) == 1)) {
		return -0.0;
	}

	return 0.0;
}:if (y < 0) {
	long $3 = ((long) (y));
	if ((y == $3) && (($3 & 1) == 1)) {
		return -0.0;
	}

	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((d > (-org.apache.commons.math.util.Precision.SAFE_MIN)) && (d < org.apache.commons.math.util.Precision.SAFE_MIN)) {
	return d;
}:if ((d > (-org.apache.commons.math.util.Precision.SAFE_MIN)) && (d < org.apache.commons.math.util.Precision.SAFE_MIN)) {
	return d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.POSITIVE_INFINITY) {
	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) > 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}:if (y == java.lang.Double.POSITIVE_INFINITY) {
	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) > 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(d) || java.lang.Double.isNaN(direction)) {
	return java.lang.Double.NaN;
} else { 	if (d == direction) {
		return direction;
	} else { 		if (java.lang.Double.isInfinite(d)) {
			return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
		} else { 			if (d == 0) {
				return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
			}}}}:if (java.lang.Double.isNaN(d) || java.lang.Double.isNaN(direction)) {
	return java.lang.Double.NaN;
} else { 	if (d == direction) {
		return direction;
	} else { 		if (java.lang.Double.isInfinite(d)) {
			return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
		} else { 			if (d == 0) {
				return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (trans != null) {
	value = trans.transform(o);
}:if (trans != null) {
	value = trans.transform(o);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > 0) {

	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else { 	if (scaledExponent > (-53)) {



		mantissa = mantissa | (1L << 52);


		final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if (mostSignificantLostBit != 0) {

			mantissa++;
		}
		return java.lang.Double.longBitsToDouble(sign | mantissa);

	} else {

		return sign == 0L ? 0.0 : -0.0;
	}}:if (scaledExponent > 0) {

	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else { 	if (scaledExponent > (-53)) {



		mantissa = mantissa | (1L << 52);


		final long $1 = mantissa & (1L << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if ($1 != 0) {

			mantissa++;
		}
		return java.lang.Double.longBitsToDouble(sign | mantissa);

	} else {

		return sign == 0L ? 0.0 : -0.0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < (-20)) {
	return (-org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;
}:if (x < (-20)) {
	return (-org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((++count) > maximalCount) {
	maxCountCallback.trigger(maximalCount);
}:if ((++this.count) > this.maximalCount) {
	this.maxCountCallback.trigger(this.maximalCount);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x < 0) || (invx < 0)) {
	if ((y < 0) || (invy < 0)) {
		return -java.lang.Math.PI;
	} else {
		return java.lang.Math.PI;
	}
} else {
	return result;
}:if ((x < 0) || (invx < 0)) {
	if ((y < 0) || (invy < 0)) {
		return -java.lang.Math.PI;
	} else {
		return java.lang.Math.PI;
	}
} else {
	return result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(x);
}:if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (x <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return x;
}:if ((x >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (x <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (newMapping) {
	++size;
	if (shouldGrowTable()) {
		growTable();
	}
	++count;
}:if (newMapping) {
	++this.size;
	if (shouldGrowTable()) {
		growTable();
	}
	++this.count;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (map.size() != rhs.map.size()) {
	return false;
}:if (this.map.size() != rhs.map.size()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((direction < d) ^ (sign == 0L)) {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
} else {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
}:if ((direction < d) ^ (sign == 0L)) {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
} else {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 20.0) {
	return org.apache.commons.math.util.FastMath.exp(x) / 2.0;
}:if (x > 20.0) {
	return org.apache.commons.math.util.FastMath.exp(x) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (other instanceof org.apache.commons.math.util.BigReal) {
	return d.equals(((org.apache.commons.math.util.BigReal) (other)).d);
}:if (other instanceof org.apache.commons.math.util.BigReal) {
	return this.d.equals(((org.apache.commons.math.util.BigReal) (other)).d);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d != d) {
	return "Double.NaN,";
} else {
	return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,";
}:if (d != d) {
	return "Double.NaN,";
} else {
	return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,";
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == x) {
	return y;
}:if (y == x) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}:if (index < 0) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!infinite) {
	break;
}:if (!infinite) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 0.0) {
	return ((-1.0) + hiPrec[0]) + hiPrec[1];
} else {
	final double ra = (-1.0) + hiPrec[0];
	double rb = -((ra + 1.0) - hiPrec[0]);
	rb += hiPrec[1];
	return ra + rb;
}:if (x > 0.0) {
	return ((-1.0) + hiPrec[0]) + hiPrec[1];
} else {
	final double $0 = (-1.0) + hiPrec[0];
	double $1 = -(($0 + 1.0) - hiPrec[0]);
	$1 += hiPrec[1];
	return $0 + $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.NEGATIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}:if (y == java.lang.Double.NEGATIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x != x) || (y != y)) {
	return java.lang.Double.NaN;
}:if ((x != x) || (y != y)) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((a != 0.0) && (a > b)) {
	p2 = (p1 / lastScaleFactor) + ((b / scaleFactor) * p0);
	q2 = (q1 / lastScaleFactor) + ((b / scaleFactor) * q0);
} else { 	if (b != 0) {
		p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
		q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
	}}:if ((a != 0.0) && (a > b)) {
	p2 = (p1 / lastScaleFactor) + ((b / scaleFactor) * p0);
	q2 = (q1 / lastScaleFactor) + ((b / scaleFactor) * q0);
} else { 	if (b != 0) {
		p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
		q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a >= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if (a >= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}:if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (oldStates[i] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	final int key = oldKeys[i];
	final int index = org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, key, newMask);
	newKeys[index] = key;
	newValues[index] = oldValues[i];
	newStates[index] = org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL;
}:if (oldStates[i] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	final int $0 = oldKeys[i];
	final int $1 = org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, $0, newMask);
	newKeys[$1] = $0;
	newValues[$1] = oldValues[i];
	newStates[$1] = org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x != 0.0) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NaN;
	}

	return java.lang.Double.NaN;
}:if (x != 0.0) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NaN;
	}

	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) 
{
	if ((y > 0.0) || ((1 / y) > 0.0)) {
		return java.lang.Math.PI;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -java.lang.Math.PI;
	}
}:if (x == java.lang.Double.NEGATIVE_INFINITY) 
{
	if ((y > 0.0) || ((1 / y) > 0.0)) {
		return java.lang.Math.PI;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -java.lang.Math.PI;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a != b) {
	return java.lang.Float.NaN;
}:if (a != b) {
	return java.lang.Float.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs != 0) {
	double r = xabs / x3max;
	s3 += r * r;
}:if (xabs != 0) {
	double $2 = xabs / x3max;
	s3 += $2 * $2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s2 == 0) {
	norm = x3max * java.lang.Math.sqrt(s3);
} else {
	if (s2 >= x3max) {
		norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
	} else {
		norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
	}
}:if (s2 == 0) {
	norm = x3max * java.lang.Math.sqrt(s3);
} else {
	if (s2 >= x3max) {
		norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
	} else {
		norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(b, a);
} else {
	if (a < 0) {
		if (b < 0) {

			if (a >= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else { 			if (b > 0) {

				if ((java.lang.Long.MIN_VALUE / b) <= a) {
					ret = a * b;
				} else {
					throw new org.apache.commons.math.exception.MathArithmeticException();

				}
			} else {

				ret = 0;
			}}
	} else { 		if (a > 0) {




			if (a <= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else {

			ret = 0;
		}}
}:if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(b, a);
} else {
	if (a < 0) {
		if (b < 0) {

			if (a >= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else { 			if (b > 0) {

				if ((java.lang.Long.MIN_VALUE / b) <= a) {
					ret = a * b;
				} else {
					throw new org.apache.commons.math.exception.MathArithmeticException();

				}
			} else {

				ret = 0;
			}}
	} else { 		if (a > 0) {




			if (a <= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else {

			ret = 0;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((startIndex >= source.length()) || 
(endIndex > source.length())) || 
(source.substring(startIndex, endIndex).compareTo(expected) != 0)) {

	pos.setIndex(startIndex);
	pos.setErrorIndex(startIndex);
	return false;
}:if (((startIndex >= source.length()) || 
(endIndex > source.length())) || 
(source.substring(startIndex, endIndex).compareTo(expected) != 0)) {

	pos.setIndex(startIndex);
	pos.setErrorIndex(startIndex);
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == 0.0) {
	return 1.0;
}:if (y == 0.0) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	negative = true;
	a = -a;
}:if (a < 0) {
	negative = true;
	a = -a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((d < 8.0E298) && (d > (-8.0E298))) {
	final double a = d * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[0] = (d + a) - a;
	split[1] = d - split[0];
} else {
	final double a = d * 9.313225746154785E-10;
	split[0] = ((d + a) - d) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[1] = d - split[0];
}:if ((d < 8.0E298) && (d > (-8.0E298))) {
	final double $0 = d * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[0] = (d + $0) - $0;
	split[1] = d - split[0];
} else {
	final double $1 = d * 9.313225746154785E-10;
	split[0] = ((d + $1) - d) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[1] = d - split[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x8000000000000000L) {
	return a;
}:if (bits == 0x8000000000000000L) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
	return false;
}:if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + index) >= internalArray.length) {
	expandTo(startIndex + (index + 1));
}:if ((this.startIndex + index) >= this.internalArray.length) {
	expandTo(this.startIndex + (index + 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!defaultTransformer.equals(rhs.defaultTransformer)) {
	return false;
}:if (!this.defaultTransformer.equals(rhs.defaultTransformer)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (infinite) {

	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}:if (infinite) {

	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == 1024) {

	return x;
}:if (exponent == 1024) {

	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < (-2098)) {
	return d > 0 ? 0.0 : -0.0;
}:if (n < (-2098)) {
	return d > 0 ? 0.0 : -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] > previous) {
	break ITEM;
}:if (val[index] > previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!resDir.isDirectory()) {
	throw new org.apache.commons.math.exception.MathInternalError();
}:if (!resDir.isDirectory()) {
	throw new org.apache.commons.math.exception.MathInternalError();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.lang.Double.isNaN(values[i])) {
	sum += values[i];
}:if (!java.lang.Double.isNaN(values[i])) {
	sum += values[i];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction >= 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}:if (fraction >= 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	x = -x;
}:if (x < 0.0) {
	x = -x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n == k) || (k == 0)) {
	return 0;
}:if ((n == k) || (k == 0)) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 67) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k));
}:if (n < 67) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (remA > 0.0) {
	break;
}:if (remA > 0.0) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negative) {
	result = -result;
}:if (negative) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y != y) {
	return y;
}:if (y != y) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == (-1023)) {
	if (x == 0) {
		return x;
	}


	subnormal = true;
	x *= 1.8014398509481984E16;
	inbits = java.lang.Double.doubleToLongBits(x);
	exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023;
}:if (exponent == (-1023)) {
	if (x == 0) {
		return x;
	}


	subnormal = true;
	x *= 1.8014398509481984E16;
	inbits = java.lang.Double.doubleToLongBits(x);
	exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) {
	if (y != y) {
		return y;
	}

	if (y < 0) {
		long yi = ((long) (y));
		if ((y == yi) && ((yi & 1) == 1)) {
			return -0.0;
		}

		return 0.0;
	}

	if (y > 0) {
		long yi = ((long) (y));
		if ((y == yi) && ((yi & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.POSITIVE_INFINITY;
	}
}:if (x == java.lang.Double.NEGATIVE_INFINITY) {
	if (y != y) {
		return y;
	}

	if (y < 0) {
		long $5 = ((long) (y));
		if ((y == $5) && (($5 & 1) == 1)) {
			return -0.0;
		}

		return 0.0;
	}

	if (y > 0) {
		long $6 = ((long) (y));
		if ((y == $6) && (($6 & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.POSITIVE_INFINITY;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negate) {
	result = -result;
}:if (negate) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal > 709) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
		hiPrec[1] = 0.0;
	}
	return java.lang.Double.POSITIVE_INFINITY;
}:if (intVal > 709) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
		hiPrec[1] = 0.0;
	}
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else { 		if (scaledExponent > (-24)) {



			mantissa = mantissa | (1 << 23);


			final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if (mostSignificantLostBit != 0) {

				mantissa++;
			}
			return java.lang.Float.intBitsToFloat(sign | mantissa);

		} else {

			return sign == 0 ? 0.0F : -0.0F;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 23) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0x7fffff;

		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}}
}:if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else { 		if (scaledExponent > (-24)) {



			mantissa = mantissa | (1 << 23);


			final int $5 = mantissa & (1 << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if ($5 != 0) {

				mantissa++;
			}
			return java.lang.Float.intBitsToFloat(sign | mantissa);

		} else {

			return sign == 0 ? 0.0F : -0.0F;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 23) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0x7fffff;

		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] <= previous) {
	break ITEM;
}:if (val[index] <= previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return false;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(values[i])) {
	out[i] = java.lang.Double.NaN;
} else {
	out[i] = (values[i] * normalizedSum) / sum;
}:if (java.lang.Double.isNaN(values[i])) {
	out[i] = java.lang.Double.NaN;
} else {
	out[i] = (values[i] * normalizedSum) / sum;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}:if (y == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (referenceCount != count) {
	throw new java.util.ConcurrentModificationException();
}:if (this.referenceCount != this.count) {
	throw new java.util.ConcurrentModificationException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.apache.commons.math.util.Precision.equals(x[i], y[i])) {
	return false;
}:if (!org.apache.commons.math.util.Precision.equals(x[i], y[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs > x1max) {
	double r = x1max / xabs;
	s1 = 1 + ((s1 * r) * r);
	x1max = xabs;
} else {
	double r = xabs / x1max;
	s1 += r * r;
}:if (xabs > x1max) {
	double $0 = x1max / xabs;
	s1 = 1 + ((s1 * $0) * $0);
	x1max = xabs;
} else {
	double $1 = xabs / x1max;
	s1 += $1 * $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 1) == 0) {
	continue;
}:if ((i & 1) == 0) {
	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return magnitude;
}:if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}:if (e < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - yInt;
}:if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - yInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x > 0) && ((1 / x) == 0)) {
	return x;
}:if ((x > 0) && ((1 / x) == 0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (powerOfTwo == capacity) {
	return capacity;
}:if (powerOfTwo == capacity) {
	return capacity;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	newSize = ((int) (org.apache.commons.math.util.FastMath.ceil(internalArray.length * expansionFactor)));
} else {
	newSize = internalArray.length + org.apache.commons.math.util.FastMath.round(expansionFactor);
}:if (this.expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	newSize = ((int) (org.apache.commons.math.util.FastMath.ceil(this.internalArray.length * this.expansionFactor)));
} else {
	newSize = this.internalArray.length + org.apache.commons.math.util.FastMath.round(this.expansionFactor);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return missingEntries;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return this.missingEntries;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(r)) {
	return java.lang.Math.PI / 2;
}:if (java.lang.Double.isInfinite(r)) {
	return java.lang.Math.PI / 2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (subnormal) {
	est *= 3.814697265625E-6;
}:if (subnormal) {
	est *= 3.814697265625E-6;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((o instanceof java.lang.Number) || (o instanceof java.lang.String)) {
	value = defaultTransformer.transform(o);
} else {
	org.apache.commons.math.util.NumberTransformer trans = getTransformer(o.getClass());
	if (trans != null) {
		value = trans.transform(o);
	}
}:if ((o instanceof java.lang.Number) || (o instanceof java.lang.String)) {
	value = this.defaultTransformer.transform(o);
} else {
	org.apache.commons.math.util.NumberTransformer $0 = getTransformer(o.getClass());
	if ($0 != null) {
		value = $0.transform(o);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x > 1.0) || (x < (-1.0))) {
	return java.lang.Double.NaN;
}:if ((x > 1.0) || (x < (-1.0))) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (startIndex == endIndex) {

	final double[] special = new double[]{ 
	java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY };

	for (int i = 0; i < special.length; ++i) {
		number = org.apache.commons.math.util.CompositeFormat.parseNumber(source, special[i], pos);
		if (number != null) {
			break;
		}
	}
}:if (startIndex == endIndex) {

	final double[] $0 = new double[]{ 
	java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY };

	for (int $1 = 0; $1 < $0.length; ++$1) {
		number = org.apache.commons.math.util.CompositeFormat.parseNumber(source, $0[$1], pos);
		if (number != null) {
			break;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k == 31) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}:if (k == 31) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.031) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
} else { 	if (a > 0.003) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
	} else {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
	}}:if (a > 0.031) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
} else { 	if (a > 0.003) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
	} else {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 1.5) {

	final double pi2a = 1.5707963267948966;
	final double pi2b = 6.123233995736766E-17;

	final double a = pi2a - xa;
	double b = -((a - pi2a) + xa);
	b += pi2b - xb;

	xa = a + b;
	xb = -((xa - a) - b);
	quadrant ^= 1;
	negative ^= true;
}:if (xa > 1.5) {

	final double $0 = 1.5707963267948966;
	final double $1 = 6.123233995736766E-17;

	final double $2 = $0 - xa;
	double $3 = -(($2 - $0) + xa);
	$3 += $1 - xb;

	xa = $2 + $3;
	xb = -((xa - $2) - $3);
	quadrant ^= 1;
	negative ^= true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 1.0) {
	return java.lang.Math.PI / 2.0;
}:if (x == 1.0) {
	return java.lang.Math.PI / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y == yi) && ((yi & 1) == 1)) {
	return -0.0;
}:if ((y == yi) && ((yi & 1) == 1)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < b) {
	return b;
}:if (a < b) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(r)) {
	return org.apache.commons.math.util.FastMath.atan(r, 0, x < 0);
}:if (java.lang.Double.isInfinite(r)) {
	return org.apache.commons.math.util.FastMath.atan(r, 0, x < 0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((c < 8.0E298) && (c > (-8.0E298))) {
	double z = c * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[0] = (c + z) - z;
	a[1] = (c - a[0]) + d;
} else {
	double z = c * 9.313225746154785E-10;
	a[0] = ((c + z) - c) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[1] = (c - a[0]) + d;
}:if ((c < 8.0E298) && (c > (-8.0E298))) {
	double $0 = c * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[0] = (c + $0) - $0;
	a[1] = (c - a[0]) + d;
} else {
	double $1 = c * 9.313225746154785E-10;
	a[0] = ((c + $1) - c) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[1] = (c - a[0]) + d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (contraction < expansion) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, 
	contraction, expansion);
}:if (contraction < expansion) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, 
	contraction, expansion);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == ((long) (y))) {

	return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
} else {
	return java.lang.Double.NaN;
}:if (y == ((long) (y))) {

	return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
} else {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.OBJECT_TRANSFORMATION);
}:if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.OBJECT_TRANSFORMATION);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (idx == 0) {


	final double denom = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx])));

	ya = epsA * denom;
	yb = epsB * denom;
} else {
	double temp2 = xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx];
	double za = 1.0 + temp2;
	double zb = -((za - 1.0) - temp2);
	temp2 = (xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]);
	temp = za + temp2;
	zb += -((temp - za) - temp2);
	za = temp;

	zb += xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx];
	ya = epsA / za;

	temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double yaa = (ya + temp) - temp;
	final double yab = ya - yaa;

	temp = za * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double zaa = (za + temp) - temp;
	final double zab = za - zaa;


	yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;

	yb += (((-epsA) * zb) / za) / za;
	yb += epsB / za;
}:if (idx == 0) {


	final double $1 = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx])));

	ya = epsA * $1;
	yb = epsB * $1;
} else {
	double $2 = xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx];
	double $3 = 1.0 + $2;
	double $4 = -(($3 - 1.0) - $2);
	$2 = (xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]);
	temp = $3 + $2;
	$4 += -((temp - $3) - $2);
	$3 = temp;

	$4 += xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx];
	ya = epsA / $3;

	temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double $5 = (ya + temp) - temp;
	final double $6 = ya - $5;

	temp = $3 * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double $7 = ($3 + temp) - temp;
	final double $8 = $3 - $7;


	yb = ((((epsA - ($5 * $7)) - ($5 * $8)) - ($6 * $7)) - ($6 * $8)) / $3;

	yb += (((-epsA) * $4) / $3) / $3;
	yb += epsB / $3;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > (-53)) {



	mantissa = mantissa | (1L << 52);


	final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if (mostSignificantLostBit != 0) {

		mantissa++;
	}
	return java.lang.Double.longBitsToDouble(sign | mantissa);

} else {

	return sign == 0L ? 0.0 : -0.0;
}:if (scaledExponent > (-53)) {



	mantissa = mantissa | (1L << 52);


	final long $0 = mantissa & (1L << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if ($0 != 0) {

		mantissa++;
	}
	return java.lang.Double.longBitsToDouble(sign | mantissa);

} else {

	return sign == 0L ? 0.0 : -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.length != dimension) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
}:if (c.length != this.dimension) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, this.dimension);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
}:if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Byte.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((byte) (-magnitude));
}:if ((sign >= 0) && 
(magnitude == java.lang.Byte.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((byte) (-magnitude));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == 0) {


	while ((mantissa >>> 23) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0x7fffff;

	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}}:if (exponent == 0) {


	while ((mantissa >>> 23) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0x7fffff;

	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return false;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction < 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {

	if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
	unscaled) / 2.0)) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {
		unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
	}
}:if (fraction < 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {

	if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
	unscaled) / 2.0)) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {
		unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prod2A++;
}:if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prod2A++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Byte.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((byte) (-magnitude));
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Byte.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((byte) (-magnitude));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	if (b < 0) {

		if ((java.lang.Long.MIN_VALUE - b) <= a) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	} else {

		ret = a + b;
	}
} else {




	if (a <= (java.lang.Long.MAX_VALUE - b)) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
}:if (a < 0) {
	if (b < 0) {

		if ((java.lang.Long.MIN_VALUE - b) <= a) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	} else {

		ret = a + b;
	}
} else {




	if (a <= (java.lang.Long.MAX_VALUE - b)) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n >= maxIterations) {
	throw new org.apache.commons.math.exception.MaxCountExceededException(org.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, 
	maxIterations, x);
}:if (n >= maxIterations) {
	throw new org.apache.commons.math.exception.MaxCountExceededException(org.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, 
	maxIterations, x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x * x) > 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}:if ((x * x) > 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || ((1 / y) < 0)) {
	return -java.lang.Math.PI;
}:if ((y < 0) || ((1 / y) < 0)) {
	return -java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = 0;
	for (int i = 0; i < len; ++i) {
		result += a[i] * b[i];
	}
}:if (java.lang.Double.isNaN(result)) {


	result = 0;
	for (int $0 = 0; $0 < len; ++$0) {
		result += a[$0] * b[$0];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (oldStates[i] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	final int key = oldKeys[i];
	final int index = org.apache.commons.math.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, key, newMask);
	newKeys[index] = key;
	newValues[index] = oldValues[i];
	newStates[index] = org.apache.commons.math.util.OpenIntToFieldHashMap.FULL;
}:if (oldStates[i] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	final int $0 = oldKeys[i];
	final int $1 = org.apache.commons.math.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, $0, newMask);
	newKeys[$1] = $0;
	newValues[$1] = oldValues[i];
	newStates[$1] = org.apache.commons.math.util.OpenIntToFieldHashMap.FULL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index + 1) > numElements) {
	numElements = index + 1;
}:if ((index + 1) > this.numElements) {
	this.numElements = index + 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] < previous) {
	break ITEM;
}:if (val[index] < previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < (-20)) {
	return org.apache.commons.math.util.FastMath.exp(-x) / 2.0;
}:if (x < (-20)) {
	return org.apache.commons.math.util.FastMath.exp(-x) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] /= 2.85040095144011776E17;
	hiPrec[1] /= 2.85040095144011776E17;
}:if (hiPrec != null) {
	hiPrec[0] /= 2.85040095144011776E17;
	hiPrec[1] /= 2.85040095144011776E17;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bits & 0x7ff0000000000000L) == 0) {

	if (x == 0) {

		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.NEGATIVE_INFINITY;
	}


	bits <<= 1;
	while ((bits & 0x10000000000000L) == 0) {
		exp--;
		bits <<= 1;
	} 
}:if ((bits & 0x7ff0000000000000L) == 0) {

	if (x == 0) {

		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.NEGATIVE_INFINITY;
	}


	bits <<= 1;
	while ((bits & 0x10000000000000L) == 0) {
		exp--;
		bits <<= 1;
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Float.isInfinite(x)) {
	return java.lang.Float.POSITIVE_INFINITY;
}:if (java.lang.Float.isInfinite(x)) {
	return java.lang.Float.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (leftPlane) {

	final double pia = 1.5707963267948966 * 2;
	final double pib = 6.123233995736766E-17 * 2;

	za = pia - result;
	zb = -((za - pia) + result);
	zb += pib - resultb;

	result = za + zb;
	resultb = -((result - za) - zb);
}:if (leftPlane) {

	final double $9 = 1.5707963267948966 * 2;
	final double $10 = 6.123233995736766E-17 * 2;

	za = $9 - result;
	zb = -((za - $9) + result);
	zb += $10 - resultb;

	result = za + zb;
	resultb = -((result - za) - zb);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a <= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if (a <= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((k == 1) || (k == (n - 1))) {
	return org.apache.commons.math.util.FastMath.log(n);
}:if ((k == 1) || (k == (n - 1))) {
	return org.apache.commons.math.util.FastMath.log(n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this == other) {
	return true;
}:if (this == other) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {

	double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000;
	double aa = (epsilon + tmp) - tmp;
	double ab = epsilon - aa;
	double xa = aa;
	double xb = ab;


	double numer = bits & 0x3ffffffffffL;
	double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L);
	aa = (numer - (xa * denom)) - (xb * denom);
	xb += aa / denom;


	double ya = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0];
	double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1];

	for (int i = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 2; i >= 0; i--) {

		aa = ya * xa;
		ab = ((ya * xb) + (yb * xa)) + (yb * xb);

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;


		aa = ya + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[i][0];
		ab = yb + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[i][1];

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;
	}


	aa = ya * xa;
	ab = ((ya * xb) + (yb * xa)) + (yb * xb);







	lnza = aa + ab;
	lnzb = -((lnza - aa) - ab);
} else {


	lnza = -0.16624882440418567;
	lnza = (lnza * epsilon) + 0.19999954120254515;
	lnza = (lnza * epsilon) + (-0.2499999997677497);
	lnza = (lnza * epsilon) + 0.3333333333332802;
	lnza = (lnza * epsilon) + (-0.5);
	lnza = (lnza * epsilon) + 1.0;
	lnza = lnza * epsilon;
}:if (hiPrec != null) {

	double $16 = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $17 = (epsilon + $16) - $16;
	double $18 = epsilon - $17;
	double $19 = $17;
	double $20 = $18;


	double $21 = bits & 0x3ffffffffffL;
	double $22 = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L);
	$17 = ($21 - ($19 * $22)) - ($20 * $22);
	$20 += $17 / $22;


	double $23 = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0];
	double $24 = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1];

	for (int $25 = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 2; $25 >= 0; $25--) {

		$17 = $23 * $19;
		$18 = (($23 * $20) + ($24 * $19)) + ($24 * $20);

		$16 = $17 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$23 = ($17 + $16) - $16;
		$24 = ($17 - $23) + $18;


		$17 = $23 + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[$25][0];
		$18 = $24 + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[$25][1];

		$16 = $17 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$23 = ($17 + $16) - $16;
		$24 = ($17 - $23) + $18;
	}


	$17 = $23 * $19;
	$18 = (($23 * $20) + ($24 * $19)) + ($24 * $20);







	lnza = $17 + $18;
	lnzb = -((lnza - $17) - $18);
} else {


	lnza = -0.16624882440418567;
	lnza = (lnza * epsilon) + 0.19999954120254515;
	lnza = (lnza * epsilon) + (-0.2499999997677497);
	lnza = (lnza * epsilon) + 0.3333333333332802;
	lnza = (lnza * epsilon) + (-0.5);
	lnza = (lnza * epsilon) + 1.0;
	lnza = lnza * epsilon;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) || (d == 0)) {
	return d;
}:if ((java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) || (d == 0)) {
	return d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
	break;
}:if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Short.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((short) (-magnitude));
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Short.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((short) (-magnitude));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	return java.lang.Math.PI / 2.0;
}:if (x == 0) {
	return java.lang.Math.PI / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((xabs < rdwarf) || (xabs > agiant)) {
	if (xabs > rdwarf) {
		if (xabs > x1max) {
			double r = x1max / xabs;
			s1 = 1 + ((s1 * r) * r);
			x1max = xabs;
		} else {
			double r = xabs / x1max;
			s1 += r * r;
		}
	} else {
		if (xabs > x3max) {
			double r = x3max / xabs;
			s3 = 1 + ((s3 * r) * r);
			x3max = xabs;
		} else {
			if (xabs != 0) {
				double r = xabs / x3max;
				s3 += r * r;
			}
		}
	}
} else {
	s2 += xabs * xabs;
}:if ((xabs < rdwarf) || (xabs > agiant)) {
	if (xabs > rdwarf) {
		if (xabs > x1max) {
			double $9 = x1max / xabs;
			s1 = 1 + ((s1 * $9) * $9);
			x1max = xabs;
		} else {
			double $10 = xabs / x1max;
			s1 += $10 * $10;
		}
	} else {
		if (xabs > x3max) {
			double $11 = x3max / xabs;
			s3 = 1 + ((s3 * $11) * $11);
			x3max = xabs;
		} else {
			if (xabs != 0) {
				double $12 = xabs / x3max;
				s3 += $12 * $12;
			}
		}
	}
} else {
	s2 += xabs * xabs;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (len != b.length) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(len, b.length);
}:if (len != b.length) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(len, b.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 21) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.factorial(n));
}:if (n < 21) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.factorial(n));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] >= previous) {
	break ITEM;
}:if (val[index] >= previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (front) {
	startIndex += i;
}:if (front) {
	this.startIndex += i;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b != 0) {
	p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
	q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
}:if (b != 0) {
	p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
	q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Long.MIN_VALUE / b) <= a) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();

}:if ((java.lang.Long.MIN_VALUE / b) <= a) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((e & 0x1) != 0) {
	result *= k2p;
}:if ((e & 0x1) != 0) {
	result *= k2p;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((bits & 0x8000000000000000L) != 0) || (x != x)) {
	if (x != 0.0) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NaN;
		}

		return java.lang.Double.NaN;
	}
}:if (((bits & 0x8000000000000000L) != 0) || (x != x)) {
	if (x != 0.0) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NaN;
		}

		return java.lang.Double.NaN;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s2 >= x3max) {
	norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
} else {
	norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
}:if (s2 >= x3max) {
	norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
} else {
	norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (t > 0) {
	u = -t;
} else {
	v = t;
}:if (t > 0) {
	u = -t;
} else {
	v = t;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkNotNull
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#checkLen
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#checkLen
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkFinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkFinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#checkBinomial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#checkBinomial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#checkBinomial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#checkBinomial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#substituteMostRecentElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#substituteMostRecentElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkFinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#checkFinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#checkContractExpand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setInitialCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setInitialCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#doubleHighPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#doubleHighPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ceil
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ceil
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathResources#createAll
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#expand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#expand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseFixedstring
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseFixedstring
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#shouldContract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#shouldContract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#hasNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#hasNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#remove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#remove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#formatDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#formatDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowSin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowSin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#incrementCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#incrementCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElementRolling
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElementRolling
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setExpansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setExpansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#discardExtremeElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientLog(n, n - k);
}:if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientLog(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n <= 66) {


	int i = (n - k) + 1;
	for (int j = 1; j <= k; j++) {






		final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
		result = (result / (j / d)) * (i / d);
		i++;
	}
} else {



	int i = (n - k) + 1;
	for (int j = 1; j <= k; j++) {
		final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
		result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d);
		i++;
	}
}:if (n <= 66) {


	int $14 = (n - k) + 1;
	for (int $15 = 1; $15 <= k; $15++) {






		final long $16 = org.apache.commons.math.util.ArithmeticUtils.gcd($14, $15);
		result = (result / ($15 / $16)) * ($14 / $16);
		$14++;
	}
} else {



	int $17 = (n - k) + 1;
	for (int $18 = 1; $18 <= k; $18++) {
		final long $19 = org.apache.commons.math.util.ArithmeticUtils.gcd($17, $18);
		result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / ($18 / $19), $17 / $19);
		$17++;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(pattern, args);
}:if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(pattern, args);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
}:if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n == k) || (k == 0)) {
	return 1;
}:if ((n == k) || (k == 0)) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}:if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y > 0.0) || ((1 / y) > 0.0)) {
	return java.lang.Math.PI;
}:if ((y > 0.0) || ((1 / y) > 0.0)) {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.097) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.0036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		}}}:if (a > 0.097) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.0036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bits & 0x8000000000000000L) != 0) {

	long yi = ((long) (y));

	if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
		return -0.0;
	}
}:if ((bits & 0x8000000000000000L) != 0) {

	long $15 = ((long) (y));

	if (((y < 0) && (y == $15)) && (($15 & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	if (((y > 0) && (y == $15)) && (($15 & 1) == 1)) {
		return -0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToDoubleHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToDoubleHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToDoubleHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o instanceof java.lang.Number) {
	return ((java.lang.Number) (o)).doubleValue();
}:if (o instanceof java.lang.Number) {
	return ((java.lang.Number) (o)).doubleValue();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	return x;
}:if (x == 0) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xb != 0.0) {
	t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
	((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
	c = a + t;
	d = -((c - a) - t);
	a = c;
	b = b + d;
}:if (xb != 0.0) {
	t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
	((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
	c = a + t;
	d = -((c - a) - t);
	a = c;
	b = b + d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Short.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((short) (-magnitude));
}:if ((sign >= 0) && 
(magnitude == java.lang.Short.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((short) (-magnitude));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.15) {
	absAtanh = 0.5 * org.apache.commons.math.util.FastMath.log((1 + a) / (1 - a));
} else {
	final double a2 = a * a;
	if (a > 0.087) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math.util.FastMath.F_1_15 + (a2 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
	} else { 		if (a > 0.031) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
		} else { 			if (a > 0.003) {
				absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
			} else {
				absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
			}}}
}:if (a > 0.15) {
	absAtanh = 0.5 * org.apache.commons.math.util.FastMath.log((1 + a) / (1 - a));
} else {
	final double $1 = a * a;
	if (a > 0.087) {
		absAtanh = a * (1 + ($1 * (org.apache.commons.math.util.FastMath.F_1_3 + ($1 * (org.apache.commons.math.util.FastMath.F_1_5 + ($1 * (org.apache.commons.math.util.FastMath.F_1_7 + ($1 * (org.apache.commons.math.util.FastMath.F_1_9 + ($1 * (org.apache.commons.math.util.FastMath.F_1_11 + ($1 * (org.apache.commons.math.util.FastMath.F_1_13 + ($1 * (org.apache.commons.math.util.FastMath.F_1_15 + ($1 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
	} else { 		if (a > 0.031) {
			absAtanh = a * (1 + ($1 * (org.apache.commons.math.util.FastMath.F_1_3 + ($1 * (org.apache.commons.math.util.FastMath.F_1_5 + ($1 * (org.apache.commons.math.util.FastMath.F_1_7 + ($1 * (org.apache.commons.math.util.FastMath.F_1_9 + ($1 * (org.apache.commons.math.util.FastMath.F_1_11 + ($1 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
		} else { 			if (a > 0.003) {
				absAtanh = a * (1 + ($1 * (org.apache.commons.math.util.FastMath.F_1_3 + ($1 * (org.apache.commons.math.util.FastMath.F_1_5 + ($1 * (org.apache.commons.math.util.FastMath.F_1_7 + ($1 * org.apache.commons.math.util.FastMath.F_1_9))))))));
			} else {
				absAtanh = a * (1 + ($1 * (org.apache.commons.math.util.FastMath.F_1_3 + ($1 * org.apache.commons.math.util.FastMath.F_1_5))));
			}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expectedSize == 0) {
	return 1;
}:if (expectedSize == 0) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (numElements < 1) {
	throw new org.apache.commons.math.exception.MathIllegalStateException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY);
}:if (this.numElements < 1) {
	throw new org.apache.commons.math.exception.MathIllegalStateException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shift != 0) {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1] << shift;
	shpi0 |= org.apache.commons.math.util.FastMath.RECIP_2PI[idx] >>> (64 - shift);
	shpiA = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift));
	shpiB = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift));
} else {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1];
	shpiA = org.apache.commons.math.util.FastMath.RECIP_2PI[idx];
	shpiB = org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1];
}:if (shift != 0) {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1] << shift;
	shpi0 |= org.apache.commons.math.util.FastMath.RECIP_2PI[idx] >>> (64 - shift);
	shpiA = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift));
	shpiB = (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift));
} else {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math.util.FastMath.RECIP_2PI[idx - 1];
	shpiA = org.apache.commons.math.util.FastMath.RECIP_2PI[idx];
	shpiB = org.apache.commons.math.util.FastMath.RECIP_2PI[idx + 1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(values[i])) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
}:if (java.lang.Double.isInfinite(values[i])) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(value) || java.lang.Double.isInfinite(value)) {
	toAppendTo.append('(');
	toAppendTo.append(value);
	toAppendTo.append(')');
} else {
	format.format(value, toAppendTo, pos);
}:if (java.lang.Double.isNaN(value) || java.lang.Double.isInfinite(value)) {
	toAppendTo.append('(');
	toAppendTo.append(value);
	toAppendTo.append(')');
} else {
	format.format(value, toAppendTo, pos);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
	n);
}:if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
	n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 1) == 0) {

	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, ys, result);
	SINE_TABLE_A[i] = result[0] * 2.0;
	SINE_TABLE_B[i] = result[1] * 2.0;


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, ys, as);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, xs, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(as, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
} else {
	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];
	as[0] = SINE_TABLE_A[(i / 2) + 1];
	as[1] = SINE_TABLE_B[(i / 2) + 1];
	bs[0] = COSINE_TABLE_A[(i / 2) + 1];
	bs[1] = COSINE_TABLE_B[(i / 2) + 1];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, bs, temps);
	org.apache.commons.math.util.FastMathCalc.splitMult(ys, as, result);
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	SINE_TABLE_A[i] = result[0];
	SINE_TABLE_B[i] = result[1];


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, bs, result);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, as, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
}:if ((i & 1) == 0) {

	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, ys, result);
	SINE_TABLE_A[i] = result[0] * 2.0;
	SINE_TABLE_B[i] = result[1] * 2.0;


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, ys, as);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, xs, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(as, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
} else {
	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];
	as[0] = SINE_TABLE_A[(i / 2) + 1];
	as[1] = SINE_TABLE_B[(i / 2) + 1];
	bs[0] = COSINE_TABLE_A[(i / 2) + 1];
	bs[1] = COSINE_TABLE_B[(i / 2) + 1];


	org.apache.commons.math.util.FastMathCalc.splitMult(xs, bs, temps);
	org.apache.commons.math.util.FastMathCalc.splitMult(ys, as, result);
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	SINE_TABLE_A[i] = result[0];
	SINE_TABLE_B[i] = result[1];


	org.apache.commons.math.util.FastMathCalc.splitMult(ys, bs, result);
	org.apache.commons.math.util.FastMathCalc.splitMult(xs, as, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math.util.FastMathCalc.splitAdd(result, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(d)) {
	return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
} else { 	if (d == 0) {
		return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
	}}:if (java.lang.Double.isInfinite(d)) {
	return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
} else { 	if (d == 0) {
		return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (containsKey(key, index)) {
	return true;
}:if (containsKey(key, index)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + (numElements + 1)) > internalArray.length) {
	expand();
}:if ((this.startIndex + (this.numElements + 1)) > this.internalArray.length) {
	expand();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (other instanceof org.apache.commons.math.util.TransformerMap) {
	org.apache.commons.math.util.TransformerMap rhs = ((org.apache.commons.math.util.TransformerMap) (other));
	if (!defaultTransformer.equals(rhs.defaultTransformer)) {
		return false;
	}
	if (map.size() != rhs.map.size()) {
		return false;
	}
	for (java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math.util.NumberTransformer> entry : map.entrySet()) {
		if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
			return false;
		}
	}
	return true;
}:if (other instanceof org.apache.commons.math.util.TransformerMap) {
	org.apache.commons.math.util.TransformerMap $2 = ((org.apache.commons.math.util.TransformerMap) (other));
	if (!this.defaultTransformer.equals($2.defaultTransformer)) {
		return false;
	}
	if (this.map.size() != $2.map.size()) {
		return false;
	}
	for (java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math.util.NumberTransformer> $3 : this.map.entrySet()) {
		if (!$3.getValue().equals($2.map.get($3.getKey()))) {
			return false;
		}
	}
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	previous = values[index];
	newMapping = false;
}:if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	previous = this.values[index];
	newMapping = false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2)) {





	double scaleFactor = 1.0;
	double lastScaleFactor = 1.0;
	final int maxPower = 5;
	final double scale = org.apache.commons.math.util.FastMath.max(a, b);
	if (scale <= 0) {
		throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	infinite = true;
	for (int i = 0; i < maxPower; i++) {
		lastScaleFactor = scaleFactor;
		scaleFactor *= scale;
		if ((a != 0.0) && (a > b)) {
			p2 = (p1 / lastScaleFactor) + ((b / scaleFactor) * p0);
			q2 = (q1 / lastScaleFactor) + ((b / scaleFactor) * q0);
		} else { 			if (b != 0) {
				p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
				q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
			}}
		infinite = java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2);
		if (!infinite) {
			break;
		}
	}
}:if (java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2)) {





	double $5 = 1.0;
	double $6 = 1.0;
	final int $7 = 5;
	final double $8 = org.apache.commons.math.util.FastMath.max(a, b);
	if ($8 <= 0) {
		throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	infinite = true;
	for (int $9 = 0; $9 < $7; $9++) {
		$6 = $5;
		$5 *= $8;
		if ((a != 0.0) && (a > b)) {
			p2 = (p1 / $6) + ((b / $5) * p0);
			q2 = (q1 / $6) + ((b / $5) * q0);
		} else { 			if (b != 0) {
				p2 = ((a / $5) * p1) + (p0 / $6);
				q2 = ((a / $5) * q1) + (q0 / $6);
			}}
		infinite = java.lang.Double.isInfinite(p2) || java.lang.Double.isInfinite(q2);
		if (!infinite) {
			break;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs > x3max) {
	double r = x3max / xabs;
	s3 = 1 + ((s3 * r) * r);
	x3max = xabs;
} else {
	if (xabs != 0) {
		double r = xabs / x3max;
		s3 += r * r;
	}
}:if (xabs > x3max) {
	double $16 = x3max / xabs;
	s3 = 1 + ((s3 * $16) * $16);
	x3max = xabs;
} else {
	if (xabs != 0) {
		double $17 = xabs / x3max;
		s3 += $17 * $17;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = 0.0;
	hiPrec[1] = 0.0;
}:if (hiPrec != null) {
	hiPrec[0] = 0.0;
	hiPrec[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
	return -0.0;
}:if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.003) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
} else {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
}:if (a > 0.003) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
} else {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (v > 0) {
	v = -v;
}:if (v > 0) {
	v = -v;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (endIndex < source.length()) {
	if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
		ret = java.lang.Double.valueOf(value);
		pos.setIndex(endIndex);
	}
}:if (endIndex < source.length()) {
	if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
		ret = java.lang.Double.valueOf(value);
		pos.setIndex(endIndex);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	expIntA[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	expIntB[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}:if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	expIntA[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	expIntB[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.multiply(fraction.numerator), 
denominator.multiply(fraction.denominator)):return new org.apache.commons.math.fraction.BigFraction(this.numerator.multiply(fraction.numerator), 
this.denominator.multiply(fraction.denominator))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionFormat.getProperInstance(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.FractionFormat.getProperInstance(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return null:return null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.Fraction.ONE:return org.apache.commons.math.fraction.Fraction.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator - (i * denominator), denominator):return new org.apache.commons.math.fraction.Fraction(this.numerator - (i * this.denominator), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return toAppendTo:return toAppendTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return:return
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator, denominator.multiply(bg)):return new org.apache.commons.math.fraction.BigFraction(this.numerator, this.denominator.multiply(bg))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFraction.class:return org.apache.commons.math.fraction.BigFraction.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((int) (doubleValue())):return ((int) (doubleValue()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return n:return n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return divide(java.math.BigInteger.valueOf(l)):return divide(java.math.BigInteger.valueOf(l))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(((java.lang.Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.copySign(1, w), d):return new org.apache.commons.math.fraction.Fraction(((java.lang.Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.copySign(1, w), d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return nf:return nf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return denominatorFormat:return this.denominatorFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return nOd.compareTo(dOn):return nOd.compareTo(dOn)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return format(java.lang.Double.valueOf(value), buffer, position):return format(java.lang.Double.valueOf(value), buffer, position)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(denominator, -exponent), 
org.apache.commons.math.util.ArithmeticUtils.pow(numerator, -exponent)):return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(this.denominator, -exponent), 
org.apache.commons.math.util.ArithmeticUtils.pow(this.numerator, -exponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return subtract(java.math.BigInteger.valueOf(l)):return subtract(java.math.BigInteger.valueOf(l))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.ProperBigFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale)):return new org.apache.commons.math.fraction.ProperBigFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.Fraction.class:return org.apache.commons.math.fraction.Fraction.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.FractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale)):return new org.apache.commons.math.fraction.FractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return addSub(fraction, true):return addSub(fraction, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator + (i * denominator), denominator):return new org.apache.commons.math.fraction.Fraction(this.numerator + (i * this.denominator), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionField.LazyHolder.INSTANCE:return org.apache.commons.math.fraction.FractionField.LazyHolder.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator.divide(denominator).longValue():return this.numerator.divide(this.denominator).longValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(fraction.reciprocal()):return multiply(fraction.reciprocal())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator:return this.numerator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(w.intValue(), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(denominator / d1, 
fraction.denominator / d2)):return new org.apache.commons.math.fraction.Fraction(w.intValue(), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(this.denominator / d1, 
fraction.denominator / d2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return add(java.math.BigInteger.valueOf(l)):return add(java.math.BigInteger.valueOf(l))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator.longValue():return this.numerator.longValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(100).doubleValue():return multiply(100).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(
isAdd ? org.apache.commons.math.util.ArithmeticUtils.addAndCheck(uvp, upv) : 
org.apache.commons.math.util.ArithmeticUtils.subAndCheck(uvp, upv), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(denominator, fraction.denominator)):return new org.apache.commons.math.fraction.Fraction(
isAdd ? org.apache.commons.math.util.ArithmeticUtils.addAndCheck(uvp, upv) : 
org.apache.commons.math.util.ArithmeticUtils.subAndCheck(uvp, upv), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(this.denominator, fraction.denominator))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return denominator:return this.denominator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator.divide(denominator).intValue():return this.numerator.divide(this.denominator).intValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(denominator, numerator):return new org.apache.commons.math.fraction.Fraction(this.denominator, this.numerator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((float) (doubleValue())):return ((float) (doubleValue()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new java.math.BigDecimal(numerator).divide(new java.math.BigDecimal(denominator)):return new java.math.BigDecimal(this.numerator).divide(new java.math.BigDecimal(this.denominator))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return format(java.lang.Long.valueOf(value), buffer, position):return format(java.lang.Long.valueOf(value), buffer, position)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numeratorFormat:return this.numeratorFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator, denominator):return new org.apache.commons.math.fraction.BigFraction(numerator, denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(num, den):return new org.apache.commons.math.fraction.BigFraction(num, den)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return divide(java.math.BigInteger.valueOf(i)):return divide(java.math.BigInteger.valueOf(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator, denominator * i):return new org.apache.commons.math.fraction.Fraction(this.numerator, this.denominator * i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionFormat.getImproperInstance().format(f):return org.apache.commons.math.fraction.BigFractionFormat.getImproperInstance().format(f)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(-numerator, denominator):return new org.apache.commons.math.fraction.Fraction(-this.numerator, this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (37 * ((37 * 17) + numerator.hashCode())) + denominator.hashCode():return (37 * ((37 * 17) + this.numerator.hashCode())) + this.denominator.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(denominator, eNeg), 
org.apache.commons.math.util.ArithmeticUtils.pow(numerator, eNeg)):return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(this.denominator, eNeg), 
org.apache.commons.math.util.ArithmeticUtils.pow(this.numerator, eNeg))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new java.math.BigDecimal(numerator).divide(new java.math.BigDecimal(denominator), scale, roundingMode):return new java.math.BigDecimal(this.numerator).divide(new java.math.BigDecimal(this.denominator), scale, roundingMode)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(java.math.BigInteger.valueOf(i)):return multiply(java.math.BigInteger.valueOf(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return addSub(fraction, false):return addSub(fraction, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator, denominator):return new org.apache.commons.math.fraction.Fraction(numerator, denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return str:return str
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionField.LazyHolder.INSTANCE:return org.apache.commons.math.fraction.BigFractionField.LazyHolder.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.ProperFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale)):return new org.apache.commons.math.fraction.ProperFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionField.getInstance():return org.apache.commons.math.fraction.BigFractionField.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numerator.intValue():return this.numerator.intValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionFormat.getImproperInstance(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.FractionFormat.getImproperInstance(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.divide(gcd), denominator.divide(gcd)):return new org.apache.commons.math.fraction.BigFraction(this.numerator.divide(gcd), this.denominator.divide(gcd))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.text.NumberFormat.getAvailableLocales():return java.text.NumberFormat.getAvailableLocales()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(java.math.BigInteger.valueOf(l)):return multiply(java.math.BigInteger.valueOf(l))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.negate(), denominator):return new org.apache.commons.math.fraction.BigFraction(this.numerator.negate(), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return this:return this
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.pow(exponent), denominator.pow(exponent)):return new org.apache.commons.math.fraction.BigFraction(this.numerator.pow(exponent), this.denominator.pow(exponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionField.getInstance():return org.apache.commons.math.fraction.FractionField.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(denominator.pow(-exponent), numerator.pow(-exponent)):return new org.apache.commons.math.fraction.BigFraction(this.denominator.pow(-exponent), this.numerator.pow(-exponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFraction.ZERO:return org.apache.commons.math.fraction.BigFraction.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return denominator.longValue():return this.denominator.longValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.Fraction.ZERO:return org.apache.commons.math.fraction.Fraction.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.subtract(denominator.multiply(bg)), denominator):return new org.apache.commons.math.fraction.BigFraction(this.numerator.subtract(this.denominator.multiply(bg)), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.util.FastMath.pow(numerator.doubleValue(), exponent) / 
org.apache.commons.math.util.FastMath.pow(denominator.doubleValue(), exponent):return org.apache.commons.math.util.FastMath.pow(this.numerator.doubleValue(), exponent) / 
org.apache.commons.math.util.FastMath.pow(this.denominator.doubleValue(), exponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return wholeFormat:return this.wholeFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return nOd < dOn ? -1 : nOd > dOn ? +1 : 0:return nOd < dOn ? -1 : nOd > dOn ? +1 : 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(denominator, numerator):return new org.apache.commons.math.fraction.BigFraction(this.denominator, this.numerator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return multiply(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED).doubleValue():return multiply(org.apache.commons.math.fraction.BigFraction.ONE_HUNDRED).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (numerator == rhs.numerator) && 
(denominator == rhs.denominator):return (this.numerator == rhs.numerator) && 
(this.denominator == rhs.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(numerator * i, denominator):return new org.apache.commons.math.fraction.Fraction(this.numerator * i, this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.Fraction(num.intValue(), den.intValue()):return new org.apache.commons.math.fraction.Fraction(num.intValue(), den.intValue())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.FractionFormat.getImproperInstance().format(f):return org.apache.commons.math.fraction.FractionFormat.getImproperInstance().format(f)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionFormat.getProperInstance(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.BigFractionFormat.getProperInstance(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((long) (doubleValue())):return ((long) (doubleValue()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(numerator, exponent), 
org.apache.commons.math.util.ArithmeticUtils.pow(denominator, exponent)):return new org.apache.commons.math.fraction.BigFraction(org.apache.commons.math.util.ArithmeticUtils.pow(this.numerator, exponent), 
org.apache.commons.math.util.ArithmeticUtils.pow(this.denominator, exponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new java.math.BigDecimal(numerator).divide(new java.math.BigDecimal(denominator), roundingMode):return new java.math.BigDecimal(this.numerator).divide(new java.math.BigDecimal(this.denominator), roundingMode)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.Fraction.getReducedFraction(
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(numerator / d1, fraction.numerator / d2), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(denominator / d2, fraction.denominator / d1)):return org.apache.commons.math.fraction.Fraction.getReducedFraction(
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(this.numerator / d1, fraction.numerator / d2), 
org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(this.denominator / d2, fraction.denominator / d1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return subtract(java.math.BigInteger.valueOf(i)):return subtract(java.math.BigInteger.valueOf(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFraction.ONE:return org.apache.commons.math.fraction.BigFraction.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(numerator.add(denominator.multiply(bg)), denominator):return new org.apache.commons.math.fraction.BigFraction(this.numerator.add(this.denominator.multiply(bg)), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return false:return false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return add(java.math.BigInteger.valueOf(i)):return add(java.math.BigInteger.valueOf(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ret:return ret
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return result:return result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return denominator.intValue():return this.denominator.intValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return isAdd ? fraction : fraction.negate():return isAdd ? fraction : fraction.negate()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFraction(bg.multiply(numerator), denominator):return new org.apache.commons.math.fraction.BigFraction(bg.multiply(this.numerator), this.denominator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((double) (numerator)) / ((double) (denominator)):return ((double) (this.numerator)) / ((double) (this.denominator))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math.fraction.BigFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale)):return new org.apache.commons.math.fraction.BigFractionFormat(org.apache.commons.math.fraction.AbstractFormat.getDefaultNumberFormat(locale))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.math.BigInteger.ZERO.compareTo(numerator) <= 0 ? this : negate():return java.math.BigInteger.ZERO.compareTo(this.numerator) <= 0 ? this : negate()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (37 * ((37 * 17) + numerator)) + denominator:return (37 * ((37 * 17) + this.numerator)) + this.denominator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math.fraction.BigFractionFormat.getImproperInstance(java.util.Locale.getDefault()):return org.apache.commons.math.fraction.BigFractionFormat.getImproperInstance(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return true:return true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < n) {
	ret = c;
}:if (index < n) {
	ret = c;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}:if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((k == 1) || (k == (n - 1))) {
	return n;
}:if ((k == 1) || (k == (n - 1))) {
	return n;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	ret = a - b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
}:if (a < 0) {
	ret = a - b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.NEGATIVE_INFINITY) {

	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) < 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}:if (y == java.lang.Double.NEGATIVE_INFINITY) {

	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) < 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (cotanFlag) {
	xbadj = -xbadj;
}:if (cotanFlag) {
	xbadj = -xbadj;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
} else {
	LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
}:if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
} else {
	org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	long bits = java.lang.Double.doubleToLongBits(x);
	if ((bits & 0x8000000000000000L) != 0) {

		long yi = ((long) (y));

		if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
			return -0.0;
		}
	}

	if (y < 0) {
		return java.lang.Double.POSITIVE_INFINITY;
	}
	if (y > 0) {
		return 0.0;
	}

	return java.lang.Double.NaN;
}:if (x == 0) {
	long $18 = java.lang.Double.doubleToLongBits(x);
	if (($18 & 0x8000000000000000L) != 0) {

		long $19 = ((long) (y));

		if (((y < 0) && (y == $19)) && (($19 & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		if (((y > 0) && (y == $19)) && (($19 & 1) == 1)) {
			return -0.0;
		}
	}

	if (y < 0) {
		return java.lang.Double.POSITIVE_INFINITY;
	}
	if (y > 0) {
		return 0.0;
	}

	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0.0) {
	return x;
}:if (x == 0.0) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (mostSignificantLostBit != 0) {

	mantissa++;
}:if (mostSignificantLostBit != 0) {

	mantissa++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] expInt = org.apache.commons.math.util.FastMathResources.loadExpInt();
	EXP_INT_TABLE_A = expInt[0];
	EXP_INT_TABLE_B = expInt[1];
} else {
	EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
	EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
}:if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] $5 = org.apache.commons.math.util.FastMathResources.loadExpInt();
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = $5[0];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = $5[1];
} else {
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 8.0E298) && (y > (-8.0E298))) {
	double tmp1 = y * org.apache.commons.math.util.FastMath.HEX_40000000;
	ya = (y + tmp1) - tmp1;
	yb = y - ya;
} else {
	double tmp1 = y * 9.313225746154785E-10;
	double tmp2 = tmp1 * 9.313225746154785E-10;
	ya = (((tmp1 + tmp2) - tmp1) * org.apache.commons.math.util.FastMath.HEX_40000000) * org.apache.commons.math.util.FastMath.HEX_40000000;
	yb = y - ya;
}:if ((y < 8.0E298) && (y > (-8.0E298))) {
	double $11 = y * org.apache.commons.math.util.FastMath.HEX_40000000;
	ya = (y + $11) - $11;
	yb = y - ya;
} else {
	double $12 = y * 9.313225746154785E-10;
	double $13 = $12 * 9.313225746154785E-10;
	ya = ((($12 + $13) - $12) * org.apache.commons.math.util.FastMath.HEX_40000000) * org.apache.commons.math.util.FastMath.HEX_40000000;
	yb = y - ya;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s1 != 0) {
	norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max));
} else {
	if (s2 == 0) {
		norm = x3max * java.lang.Math.sqrt(s3);
	} else {
		if (s2 >= x3max) {
			norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
		} else {
			norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
		}
	}
}:if (s1 != 0) {
	norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max));
} else {
	if (s2 == 0) {
		norm = x3max * java.lang.Math.sqrt(s3);
	} else {
		if (s2 >= x3max) {
			norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
		} else {
			norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x <= (-1.0)) || (x >= 1.0)) {


	double[] hiPrec = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, hiPrec);
	if (x > 0.0) {
		return ((-1.0) + hiPrec[0]) + hiPrec[1];
	} else {
		final double ra = (-1.0) + hiPrec[0];
		double rb = -((ra + 1.0) - hiPrec[0]);
		rb += hiPrec[1];
		return ra + rb;
	}
}:if ((x <= (-1.0)) || (x >= 1.0)) {


	double[] $11 = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, $11);
	if (x > 0.0) {
		return ((-1.0) + $11[0]) + $11[1];
	} else {
		final double $12 = (-1.0) + $11[0];
		double $13 = -(($12 + 1.0) - $11[0]);
		$13 += $11[1];
		return $12 + $13;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	EXP_FRAC_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];
	EXP_FRAC_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];

	final double[] tmp = new double[2];


	final double factor = 1.0 / (org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN - 1);
	for (int i = 0; i < org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length; i++) {
		org.apache.commons.math.util.FastMathCalc.slowexp(i * factor, tmp);
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] expFrac = org.apache.commons.math.util.FastMathResources.loadExpFrac();
		EXP_FRAC_TABLE_A = expFrac[0];
		EXP_FRAC_TABLE_B = expFrac[1];
	} else {
		EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
		EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
	}}:if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN];

	final double[] $6 = new double[2];


	final double $7 = 1.0 / (org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_LEN - 1);
	for (int $8 = 0; $8 < org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length; $8++) {
		org.apache.commons.math.util.FastMathCalc.slowexp($8 * $7, $6);
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[$8] = $6[0];
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[$8] = $6[1];
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] $9 = org.apache.commons.math.util.FastMathResources.loadExpFrac();
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = $9[0];
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = $9[1];
	} else {
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
		org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	return false;
}:if (o == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.apache.commons.math.util.Precision.equalsIncludingNaN(x[i], y[i])) {
	return false;
}:if (!org.apache.commons.math.util.Precision.equalsIncludingNaN(x[i], y[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}:if (x == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x != x) {
	return x;
}:if (x != x) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((exp == (-1)) || (exp == 0)) {
	if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




		double xa = x - 1.0;
		double xb = (xa - x) + 1.0;
		double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000;
		double aa = (xa + tmp) - tmp;
		double ab = xa - aa;
		xa = aa;
		xb = ab;

		double ya = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
		double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

		for (int i = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; i >= 0; i--) {

			aa = ya * xa;
			ab = ((ya * xb) + (yb * xa)) + (yb * xb);

			tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
			ya = (aa + tmp) - tmp;
			yb = (aa - ya) + ab;


			aa = ya + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][0];
			ab = yb + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][1];

			tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
			ya = (aa + tmp) - tmp;
			yb = (aa - ya) + ab;
		}


		aa = ya * xa;
		ab = ((ya * xb) + (yb * xa)) + (yb * xb);

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;

		return ya + yb;
	}
}:if ((exp == (-1)) || (exp == 0)) {
	if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




		double $34 = x - 1.0;
		double $35 = ($34 - x) + 1.0;
		double $36 = $34 * org.apache.commons.math.util.FastMath.HEX_40000000;
		double $37 = ($34 + $36) - $36;
		double $38 = $34 - $37;
		$34 = $37;
		$35 = $38;

		double $39 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
		double $40 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

		for (int $41 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; $41 >= 0; $41--) {

			$37 = $39 * $34;
			$38 = (($39 * $35) + ($40 * $34)) + ($40 * $35);

			$36 = $37 * org.apache.commons.math.util.FastMath.HEX_40000000;
			$39 = ($37 + $36) - $36;
			$40 = ($37 - $39) + $38;


			$37 = $39 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$41][0];
			$38 = $40 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$41][1];

			$36 = $37 * org.apache.commons.math.util.FastMath.HEX_40000000;
			$39 = ($37 + $36) - $36;
			$40 = ($37 - $39) + $38;
		}


		$37 = $39 * $34;
		$38 = (($39 * $35) + ($40 * $34)) + ($40 * $35);

		$36 = $37 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$39 = ($37 + $36) - $36;
		$40 = ($37 - $39) + $38;

		return $39 + $40;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prodA++;
}:if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prodA++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n > (-1023)) && (n < 1024)) {
	return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52);
}:if ((n > (-1023)) && (n < 1024)) {
	return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!result) {
	return false;
} else {
	return java.util.Arrays.equals(internalArray, other.internalArray);
}:if (!result) {
	return false;
} else {
	return java.util.Arrays.equals(this.internalArray, other.internalArray);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}:if ((sign >= 0) && 
(magnitude == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = a;
	hiPrec[1] = b;
}:if (hiPrec != null) {
	hiPrec[0] = a;
	hiPrec[1] = b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (containsKey(key, index)) {
	return values[index];
}:if (containsKey(key, index)) {
	return this.values[index];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToFieldHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToFieldHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math.util.OpenIntToFieldHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math.util.OpenIntToFieldHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK - xInt;
}:if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK - xInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	previous = values[index];
	newMapping = false;
}:if (index < 0) {
	index = org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	previous = this.values[index];
	newMapping = false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	return (internalArray.length / ((float) (numElements))) > contractionCriteria;
} else {
	return (internalArray.length - numElements) > contractionCriteria;
}:if (this.expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	return (this.internalArray.length / ((float) (this.numElements))) > this.contractionCriteria;
} else {
	return (this.internalArray.length - this.numElements) > this.contractionCriteria;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {
	return b;
}:if (a > b) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {

	hiPrec[0] = tempA;
	hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
}:if (hiPrec != null) {

	hiPrec[0] = tempA;
	hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d < 0.5) {
	return y;
}:if (d < 0.5) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((object instanceof org.apache.commons.math.util.ResizableDoubleArray) == false) {
	return false;
}:if ((object instanceof org.apache.commons.math.util.ResizableDoubleArray) == false) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (current < 0) {
	throw new java.util.NoSuchElementException();
}:if (this.current < 0) {
	throw new java.util.NoSuchElementException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return missingEntries;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return this.missingEntries;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0) {
	negative = true;
	xa = -xa;
}:if (x < 0) {
	negative = true;
	xa = -xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x.length != y.length) {
	return false;
}:if (x.length != y.length) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (initialArray == null) {
	this.internalArray = new double[initialCapacity];
} else {
	this.internalArray = new double[initialArray.length];
	java.lang.System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);
	initialCapacity = initialArray.length;
	numElements = initialArray.length;
}:if (initialArray == null) {
	this.internalArray = new double[this.initialCapacity];
} else {
	this.internalArray = new double[initialArray.length];
	java.lang.System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);
	this.initialCapacity = initialArray.length;
	this.numElements = initialArray.length;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expansion <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, 
	expansion);
}:if (expansion <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, 
	expansion);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math.util.FastMathCalc.slowLog(d);
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
	} else {
		LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
	}}:if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	org.apache.commons.math.util.FastMath.lnMant.LN_MANT = new double[org.apache.commons.math.util.FastMath.LN_MANT_LEN][];


	for (int $2 = 0; $2 < org.apache.commons.math.util.FastMath.lnMant.LN_MANT.length; $2++) {
		final double $3 = java.lang.Double.longBitsToDouble((((long) ($2)) << 42) | 0x3ff0000000000000L);
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT[$2] = org.apache.commons.math.util.FastMathCalc.slowLog($3);
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathResources.loadLnMant();
	} else {
		org.apache.commons.math.util.FastMath.lnMant.LN_MANT = org.apache.commons.math.util.FastMathLiteralArrays.loadLnMant();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else { 		if (scaledExponent > (-53)) {



			mantissa = mantissa | (1L << 52);


			final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if (mostSignificantLostBit != 0) {

				mantissa++;
			}
			return java.lang.Double.longBitsToDouble(sign | mantissa);

		} else {

			return sign == 0L ? 0.0 : -0.0;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 52) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0xfffffffffffffL;

		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}}
}:if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else { 		if (scaledExponent > (-53)) {



			mantissa = mantissa | (1L << 52);


			final long $11 = mantissa & (1L << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if ($11 != 0) {

				mantissa++;
			}
			return java.lang.Double.longBitsToDouble(sign | mantissa);

		} else {

			return sign == 0L ? 0.0 : -0.0;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 52) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0xfffffffffffffL;

		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shouldContract()) {
	contract();
}:if (shouldContract()) {
	contract();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
}:if (java.lang.Double.isInfinite(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shouldGrowTable()) {
	growTable();
}:if (shouldGrowTable()) {
	growTable();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(f) || java.lang.Double.isNaN(direction)) {
	return java.lang.Float.NaN;
} else { 	if (f == direction) {
		return ((float) (direction));
	} else { 		if (java.lang.Float.isInfinite(f)) {
			return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
		} else { 			if (f == 0.0F) {
				return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
			}}}}:if (java.lang.Double.isNaN(f) || java.lang.Double.isNaN(direction)) {
	return java.lang.Float.NaN;
} else { 	if (f == direction) {
		return ((float) (direction));
	} else { 		if (java.lang.Float.isInfinite(f)) {
			return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
		} else { 			if (f == 0.0F) {
				return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == 0) {


	while ((mantissa >>> 52) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0xfffffffffffffL;

	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}}:if (exponent == 0) {


	while ((mantissa >>> 52) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0xfffffffffffffL;

	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	x = -x;
	negate = true;
}:if (x < 0.0) {
	x = -x;
	negate = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 21) {
	return org.apache.commons.math.util.ArithmeticUtils.factorial(n);
}:if (n < 21) {
	return org.apache.commons.math.util.ArithmeticUtils.factorial(n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrecOut != null) {
	hiPrecOut[0] = ya;
	hiPrecOut[1] = yb;
}:if (hiPrecOut != null) {
	hiPrecOut[0] = ya;
	hiPrecOut[1] = yb;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x)) {
	return java.lang.Double.POSITIVE_INFINITY;
}:if (java.lang.Double.isInfinite(x)) {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (sum == 0) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
}:if (sum == 0) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + i) > internalArray.length) {
	expandTo(startIndex + i);
}:if ((this.startIndex + i) > this.internalArray.length) {
	expandTo(this.startIndex + i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}:if ((sign >= 0) && 
(magnitude == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.0036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
}:if (a > 0.0036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.167) {
	absAsinh = org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.FastMath.sqrt((a * a) + 1) + a);
} else {
	final double a2 = a * a;
	if (a > 0.097) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else { 			if (a > 0.0036) {
				absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			} else {
				absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			}}}
}:if (a > 0.167) {
	absAsinh = org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.FastMath.sqrt((a * a) + 1) + a);
} else {
	final double $1 = a * a;
	if (a > 0.097) {
		absAsinh = a * (1 - (($1 * (org.apache.commons.math.util.FastMath.F_1_3 - (($1 * (org.apache.commons.math.util.FastMath.F_1_5 - (($1 * (org.apache.commons.math.util.FastMath.F_1_7 - (($1 * (org.apache.commons.math.util.FastMath.F_1_9 - (($1 * (org.apache.commons.math.util.FastMath.F_1_11 - (($1 * (org.apache.commons.math.util.FastMath.F_1_13 - (($1 * (org.apache.commons.math.util.FastMath.F_1_15 - (($1 * org.apache.commons.math.util.FastMath.F_1_17) * org.apache.commons.math.util.FastMath.F_15_16))) * org.apache.commons.math.util.FastMath.F_13_14))) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else { 		if (a > 0.036) {
			absAsinh = a * (1 - (($1 * (org.apache.commons.math.util.FastMath.F_1_3 - (($1 * (org.apache.commons.math.util.FastMath.F_1_5 - (($1 * (org.apache.commons.math.util.FastMath.F_1_7 - (($1 * (org.apache.commons.math.util.FastMath.F_1_9 - (($1 * (org.apache.commons.math.util.FastMath.F_1_11 - (($1 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
		} else { 			if (a > 0.0036) {
				absAsinh = a * (1 - (($1 * (org.apache.commons.math.util.FastMath.F_1_3 - (($1 * (org.apache.commons.math.util.FastMath.F_1_5 - (($1 * (org.apache.commons.math.util.FastMath.F_1_7 - (($1 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			} else {
				absAsinh = a * (1 - (($1 * (org.apache.commons.math.util.FastMath.F_1_3 - (($1 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
			}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((quadrant & 1) == 0) {
	result = org.apache.commons.math.util.FastMath.tanQ(xa, xb, false);
} else {
	result = -org.apache.commons.math.util.FastMath.tanQ(xa, xb, true);
}:if ((quadrant & 1) == 0) {
	result = org.apache.commons.math.util.FastMath.tanQ(xa, xb, false);
} else {
	result = -org.apache.commons.math.util.FastMath.tanQ(xa, xb, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	if ((y > 0) || ((1 / y) > 0)) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
	}
}:if (x == 0) {
	if ((y > 0) || ((1 / y) > 0)) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (abort) {
	throw new org.apache.commons.math.exception.NonMonotonicSequenceException(val[index], previous, index, dir, strict);
} else {
	return false;
}:if (abort) {
	throw new org.apache.commons.math.exception.NonMonotonicSequenceException(val[index], previous, index, dir, strict);
} else {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - xInt;
}:if (xInt < 0) {
	xInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - xInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
unscaled) / 2.0)) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
}:if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
unscaled) / 2.0)) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == (-1)) {
	return x / 0.0;
}:if (x == (-1)) {
	return x / 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa == 0.0) {
	long bits = java.lang.Double.doubleToLongBits(x);
	if (bits < 0) {
		return -0.0;
	}
	return 0.0;
}:if (xa == 0.0) {
	long $12 = java.lang.Double.doubleToLongBits(x);
	if ($12 < 0) {
		return -0.0;
	}
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
	return java.lang.Double.NaN;
} else {

	final int expX = org.apache.commons.math.util.FastMath.getExponent(x);
	final int expY = org.apache.commons.math.util.FastMath.getExponent(y);
	if (expX > (expY + 27)) {

		return org.apache.commons.math.util.FastMath.abs(x);
	} else { 		if (expY > (expX + 27)) {

			return org.apache.commons.math.util.FastMath.abs(y);
		} else {


			final int middleExp = (expX + expY) / 2;


			final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
			final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


			final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


			return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

		}}

}:if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
	return java.lang.Double.NaN;
} else {

	final int $28 = org.apache.commons.math.util.FastMath.getExponent(x);
	final int $29 = org.apache.commons.math.util.FastMath.getExponent(y);
	if ($28 > ($29 + 27)) {

		return org.apache.commons.math.util.FastMath.abs(x);
	} else { 		if ($29 > ($28 + 27)) {

			return org.apache.commons.math.util.FastMath.abs(y);
		} else {


			final int $30 = ($28 + $29) / 2;


			final double $31 = org.apache.commons.math.util.FastMath.scalb(x, -$30);
			final double $32 = org.apache.commons.math.util.FastMath.scalb(y, -$30);


			final double $33 = org.apache.commons.math.util.FastMath.sqrt(($31 * $31) + ($32 * $32));


			return org.apache.commons.math.util.FastMath.scalb($33, $30);

		}}

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index == max) {

	return true;
}:if (index == max) {

	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_ELEMENT, x, i);
}:if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(org.apache.commons.math.exception.util.LocalizedFormats.ARRAY_ELEMENT, x, i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];
}:if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.087) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math.util.FastMath.F_1_15 + (a2 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
} else { 	if (a > 0.031) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
	} else { 		if (a > 0.003) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
		} else {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
		}}}:if (a > 0.087) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math.util.FastMath.F_1_15 + (a2 * org.apache.commons.math.util.FastMath.F_1_17))))))))))))))));
} else { 	if (a > 0.031) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
	} else { 		if (a > 0.003) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
		} else {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal > 746) {
	if (hiPrec != null) {
		hiPrec[0] = 0.0;
		hiPrec[1] = 0.0;
	}
	return 0.0;
}:if (intVal > 746) {
	if (hiPrec != null) {
		hiPrec[0] = 0.0;
		hiPrec[1] = 0.0;
	}
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (invx == 0) {
	if (x > 0) {
		return y;
	} else {
		return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
	}
}:if (invx == 0) {
	if (x > 0) {
		return y;
	} else {
		return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, n - k);
}:if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (u > 0) {
	u = -u;
}:if (u > 0) {
	u = -u;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((a == 0) || (b == 0)) {
	return 0;
}:if ((a == 0) || (b == 0)) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x != x) || (x == 0.0)) {
	return x;
}:if ((x != x) || (x == 0.0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (containsKey(key, index)) {
	return doRemove(index);
}:if (containsKey(key, index)) {
	return doRemove(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (extra != 0.0) {
	result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
} else {
	result = ((tempC * z) + tempB) + tempA;
}:if (extra != 0.0) {
	result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
} else {
	result = ((tempC * z) + tempB) + tempA;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 1) != 0) {
	continue;
}:if ((i & 1) != 0) {
	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(lores)) {
	return lores;
}:if (java.lang.Double.isInfinite(lores)) {
	return lores;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b < 0) {

	if (a >= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else { 	if (b > 0) {

		if ((java.lang.Long.MIN_VALUE / b) <= a) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();

		}
	} else {

		ret = 0;
	}}:if (b < 0) {

	if (a >= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else { 	if (b > 0) {

		if ((java.lang.Long.MIN_VALUE / b) <= a) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();

		}
	} else {

		ret = 0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a <= (java.lang.Long.MAX_VALUE - b)) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}:if (a <= (java.lang.Long.MAX_VALUE - b)) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs > rdwarf) {
	if (xabs > x1max) {
		double r = x1max / xabs;
		s1 = 1 + ((s1 * r) * r);
		x1max = xabs;
	} else {
		double r = xabs / x1max;
		s1 += r * r;
	}
} else {
	if (xabs > x3max) {
		double r = x3max / xabs;
		s3 = 1 + ((s3 * r) * r);
		x3max = xabs;
	} else {
		if (xabs != 0) {
			double r = xabs / x3max;
			s3 += r * r;
		}
	}
}:if (xabs > rdwarf) {
	if (xabs > x1max) {
		double $18 = x1max / xabs;
		s1 = 1 + ((s1 * $18) * $18);
		x1max = xabs;
	} else {
		double $19 = xabs / x1max;
		s1 += $19 * $19;
	}
} else {
	if (xabs > x3max) {
		double $20 = x3max / xabs;
		s3 = 1 + ((s3 * $20) * $20);
		x3max = xabs;
	} else {
		if (xabs != 0) {
			double $21 = xabs / x3max;
			s3 += $21 * $21;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y > 0) {
	long yi = ((long) (y));
	if ((y == yi) && ((yi & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}:if (y > 0) {
	long $10 = ((long) (y));
	if ((y == $10) && (($10 & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == (-1.0)) {
	return java.lang.Math.PI;
}:if (x == (-1.0)) {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (comp >= 0) {
	return false;
}:if (comp >= 0) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y > 0) || ((1 / y) > 0)) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}:if ((y > 0) || ((1 / y) > 0)) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index >= numElements) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
} else { 	if (index >= 0) {
		return internalArray[startIndex + index];
	} else {
		throw new java.lang.ArrayIndexOutOfBoundsException(index);
	}}:if (index >= this.numElements) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
} else { 	if (index >= 0) {
		return this.internalArray[this.startIndex + index];
	} else {
		throw new java.lang.ArrayIndexOutOfBoundsException(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < k) {
	throw new org.apache.commons.math.exception.NumberIsTooLargeException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, 
	k, n, true);
}:if (n < k) {
	throw new org.apache.commons.math.exception.NumberIsTooLargeException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, 
	k, n, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal > 709) {

	final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
	if (hiPrec != null) {
		hiPrec[0] /= 2.85040095144011776E17;
		hiPrec[1] /= 2.85040095144011776E17;
	}
	return result;
}:if (intVal > 709) {

	final double $5 = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
	if (hiPrec != null) {
		hiPrec[0] /= 2.85040095144011776E17;
		hiPrec[1] /= 2.85040095144011776E17;
	}
	return $5;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > 0) {

	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else { 	if (scaledExponent > (-24)) {



		mantissa = mantissa | (1 << 23);


		final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if (mostSignificantLostBit != 0) {

			mantissa++;
		}
		return java.lang.Float.intBitsToFloat(sign | mantissa);

	} else {

		return sign == 0 ? 0.0F : -0.0F;
	}}:if (scaledExponent > 0) {

	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else { 	if (scaledExponent > (-24)) {



		mantissa = mantissa | (1 << 23);


		final int $9 = mantissa & (1 << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if ($9 != 0) {

			mantissa++;
		}
		return java.lang.Float.intBitsToFloat(sign | mantissa);

	} else {

		return sign == 0 ? 0.0F : -0.0F;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE, 
	i);
}:if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE, 
	i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(o instanceof org.apache.commons.math.util.Pair)) {
	return false;
} else {
	org.apache.commons.math.util.Pair<?, ?> oP = ((org.apache.commons.math.util.Pair<?, ?>) (o));
	return (key == null ? 
	oP.getKey() == null : 
	key.equals(oP.getKey())) && 
	(value == null ? 
	oP.getValue() == null : 
	value.equals(oP.getValue()));
}:if (!(o instanceof org.apache.commons.math.util.Pair)) {
	return false;
} else {
	org.apache.commons.math.util.Pair<?, ?> $1 = ((org.apache.commons.math.util.Pair<?, ?>) (o));
	return (this.key == null ? 
	$1.getKey() == null : 
	this.key.equals($1.getKey())) && 
	(this.value == null ? 
	$1.getValue() == null : 
	this.value.equals($1.getValue()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x == null) || (y == null)) {
	return !((x == null) ^ (y == null));
}:if ((x == null) || (y == null)) {
	return !((x == null) ^ (y == null));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negative) {

	double denom = 1.0 + ya;
	double denomr = 1.0 / denom;
	double denomb = (-((denom - 1.0) - ya)) + yb;
	double ratio = ya * denomr;
	temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double ra = (ratio + temp) - temp;
	double rb = ratio - ra;

	temp = denom * org.apache.commons.math.util.FastMath.HEX_40000000;
	za = (denom + temp) - temp;
	zb = denom - za;

	rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;










	rb += yb * denomr;
	rb += (((-ya) * denomb) * denomr) * denomr;


	ya = -ra;
	yb = -rb;
}:if (negative) {

	double $16 = 1.0 + ya;
	double $17 = 1.0 / $16;
	double $18 = (-(($16 - 1.0) - ya)) + yb;
	double $19 = ya * $17;
	temp = $19 * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double $20 = ($19 + temp) - temp;
	double $21 = $19 - $20;

	temp = $16 * org.apache.commons.math.util.FastMath.HEX_40000000;
	za = ($16 + temp) - temp;
	zb = $16 - za;

	$21 += ((((ya - (za * $20)) - (za * $21)) - (zb * $20)) - (zb * $21)) * $17;










	$21 += yb * $17;
	$21 += (((-ya) * $18) * $17) * $17;


	ya = -$20;
	yb = -$21;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negative) {
	quadrant ^= 2;
}:if (negative) {
	quadrant ^= 2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}:if (i != 0) {

	org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = ((a1 * b1) + (a2 * b2)) + (a3 * b3);
}:if (java.lang.Double.isNaN(result)) {


	result = ((a1 * b1) + (a2 * b2)) + (a3 * b3);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = (a1 * b1) + (a2 * b2);
}:if (java.lang.Double.isNaN(result)) {


	result = (a1 * b1) + (a2 * b2);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x80000000) {
	return b;
}:if (bits == 0x80000000) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < y) {
	return -1;
}:if (x < y) {
	return -1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((expansionMode != org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) && 
(expansionMode != org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE, 
	expansionMode, org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE", 
	org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE, "ADDITIVE_MODE");
}:if ((expansionMode != org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) && 
(expansionMode != org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE, 
	expansionMode, org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE", 
	org.apache.commons.math.util.ResizableDoubleArray.ADDITIVE_MODE, "ADDITIVE_MODE");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k == 63) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}:if (k == 63) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b > 0) {

	if ((java.lang.Long.MIN_VALUE / b) <= a) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();

	}
} else {

	ret = 0;
}:if (b > 0) {

	if ((java.lang.Long.MIN_VALUE / b) <= a) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();

	}
} else {

	ret = 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	intVal = ((int) (-x));

	if (intVal > 746) {
		if (hiPrec != null) {
			hiPrec[0] = 0.0;
			hiPrec[1] = 0.0;
		}
		return 0.0;
	}

	if (intVal > 709) {

		final double result = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
		if (hiPrec != null) {
			hiPrec[0] /= 2.85040095144011776E17;
			hiPrec[1] /= 2.85040095144011776E17;
		}
		return result;
	}

	if (intVal == 709) {

		final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
		if (hiPrec != null) {
			hiPrec[0] /= 4.455505956692757;
			hiPrec[1] /= 4.455505956692757;
		}
		return result;
	}

	intVal++;

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];

	intVal = -intVal;
} else {
	intVal = ((int) (x));

	if (intVal > 709) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
			hiPrec[1] = 0.0;
		}
		return java.lang.Double.POSITIVE_INFINITY;
	}

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
}:if (x < 0.0) {
	intVal = ((int) (-x));

	if (intVal > 746) {
		if (hiPrec != null) {
			hiPrec[0] = 0.0;
			hiPrec[1] = 0.0;
		}
		return 0.0;
	}

	if (intVal > 709) {

		final double $6 = org.apache.commons.math.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
		if (hiPrec != null) {
			hiPrec[0] /= 2.85040095144011776E17;
			hiPrec[1] /= 2.85040095144011776E17;
		}
		return $6;
	}

	if (intVal == 709) {

		final double $7 = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
		if (hiPrec != null) {
			hiPrec[0] /= 4.455505956692757;
			hiPrec[1] /= 4.455505956692757;
		}
		return $7;
	}

	intVal++;

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];

	intVal = -intVal;
} else {
	intVal = ((int) (x));

	if (intVal > 709) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
			hiPrec[1] = 0.0;
		}
		return java.lang.Double.POSITIVE_INFINITY;
	}

	intPartA = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
	intPartB = org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((direction < f) ^ (sign == 0)) {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
} else {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
}:if ((direction < f) ^ (sign == 0)) {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
} else {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
	ret = java.lang.Double.valueOf(value);
	pos.setIndex(endIndex);
}:if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
	ret = java.lang.Double.valueOf(value);
	pos.setIndex(endIndex);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4);
}:if (java.lang.Double.isNaN(result)) {


	result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0) {
	xa = -xa;
}:if (x < 0) {
	xa = -xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (comp > 0) {
	return false;
}:if (comp > 0) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}:if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (lcm == java.lang.Long.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
	a, b);
}:if (lcm == java.lang.Long.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
	a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);
}:if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Long.MIN_VALUE - b) <= a) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}:if ((java.lang.Long.MIN_VALUE - b) <= a) {
	ret = a + b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y < 0.0) {
	return 0.0;
} else {
	return java.lang.Double.POSITIVE_INFINITY;
}:if (y < 0.0) {
	return 0.0;
} else {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > (-24)) {



	mantissa = mantissa | (1 << 23);


	final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if (mostSignificantLostBit != 0) {

		mantissa++;
	}
	return java.lang.Float.intBitsToFloat(sign | mantissa);

} else {

	return sign == 0 ? 0.0F : -0.0F;
}:if (scaledExponent > (-24)) {



	mantissa = mantissa | (1 << 23);


	final int $7 = mantissa & (1 << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if ($7 != 0) {

		mantissa++;
	}
	return java.lang.Float.intBitsToFloat(sign | mantissa);

} else {

	return sign == 0 ? 0.0F : -0.0F;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
}:if (n < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a != b) {
	return java.lang.Double.NaN;
}:if (a != b) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (in[0] == 0.0) {
	in[0] = in[1];
	in[1] = 0.0;
}:if (in[0] == 0.0) {
	in[0] = in[1];
	in[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < b) {
	return a;
}:if (a < b) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (object == this) {
	return true;
}:if (object == this) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (ra == 0) {
	ra = org.apache.commons.math.util.FastMath.copySign(0.0, y);
}:if (ra == 0) {
	ra = org.apache.commons.math.util.FastMath.copySign(0.0, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	return java.lang.Double.NEGATIVE_INFINITY;
}:if (x == 0) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NaN;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || (x == 0.0)) {
	return x;
}:if (java.lang.Double.isInfinite(x) || (x == 0.0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}:if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa < 1) {
	idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
} else {
	final double oneOverXa = 1 / xa;
	idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07));
}:if (xa < 1) {
	idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
} else {
	final double $13 = 1 / xa;
	idx = ((int) ((-(((((-1.7168146928204135) * $13) * $13) + 8.0) * $13)) + 13.07));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negate ^ leftPlane) {
	result = -result;
}:if (negate ^ leftPlane) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + numElements) > internalArray.length) {
	expand();
}:if ((this.startIndex + this.numElements) > this.internalArray.length) {
	expand();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(r)) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
}:if (java.lang.Double.isNaN(r)) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 0) {
	return y;
} else {
	return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
}:if (x > 0) {
	return y;
} else {
	return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == 0) {
	final double result = x * y;
	final double invx = 1.0 / x;
	final double invy = 1.0 / y;

	if (invx == 0) {
		if (x > 0) {
			return y;
		} else {
			return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
		}
	}

	if ((x < 0) || (invx < 0)) {
		if ((y < 0) || (invy < 0)) {
			return -java.lang.Math.PI;
		} else {
			return java.lang.Math.PI;
		}
	} else {
		return result;
	}
}:if (y == 0) {
	final double $3 = x * y;
	final double $4 = 1.0 / x;
	final double $5 = 1.0 / y;

	if ($4 == 0) {
		if (x > 0) {
			return y;
		} else {
			return org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, y);
		}
	}

	if ((x < 0) || ($4 < 0)) {
		if ((y < 0) || ($5 < 0)) {
			return -java.lang.Math.PI;
		} else {
			return java.lang.Math.PI;
		}
	} else {
		return $3;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];

	org.apache.commons.math.util.FastMathCalc.resplit(result);
}:if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];

	org.apache.commons.math.util.FastMathCalc.resplit(result);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d == direction) {
	return direction;
} else { 	if (java.lang.Double.isInfinite(d)) {
		return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
	} else { 		if (d == 0) {
			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
		}}}:if (d == direction) {
	return direction;
} else { 	if (java.lang.Double.isInfinite(d)) {
		return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
	} else { 		if (d == 0) {
			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK - yInt;
}:if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK - yInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x >= 0.5) {
	double[] hiPrec = new double[2];

	org.apache.commons.math.util.FastMath.exp(x * 2.0, 0.0, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);


	double na = (-1.0) + ya;
	double nb = -((na + 1.0) - ya);
	double temp = na + yb;
	nb += -((temp - na) - yb);
	na = temp;


	double da = 1.0 + ya;
	double db = -((da - 1.0) - ya);
	temp = da + yb;
	db += -((temp - da) - yb);
	da = temp;

	temp = da * org.apache.commons.math.util.FastMath.HEX_40000000;
	double daa = (da + temp) - temp;
	double dab = da - daa;


	double ratio = na / da;
	temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	double ratioa = (ratio + temp) - temp;
	double ratiob = ratio - ratioa;


	ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;


	ratiob += nb / da;

	ratiob += (((-db) * na) / da) / da;

	result = ratioa + ratiob;
} else 
{
	double[] hiPrec = new double[2];

	org.apache.commons.math.util.FastMath.expm1(x * 2.0, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);


	double na = ya;
	double nb = yb;


	double da = 2.0 + ya;
	double db = -((da - 2.0) - ya);
	double temp = da + yb;
	db += -((temp - da) - yb);
	da = temp;

	temp = da * org.apache.commons.math.util.FastMath.HEX_40000000;
	double daa = (da + temp) - temp;
	double dab = da - daa;


	double ratio = na / da;
	temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	double ratioa = (ratio + temp) - temp;
	double ratiob = ratio - ratioa;


	ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da;


	ratiob += nb / da;

	ratiob += (((-db) * na) / da) / da;

	result = ratioa + ratiob;
}:if (x >= 0.5) {
	double[] $26 = new double[2];

	org.apache.commons.math.util.FastMath.exp(x * 2.0, 0.0, $26);

	double $27 = $26[0] + $26[1];
	double $28 = -(($27 - $26[0]) - $26[1]);


	double $29 = (-1.0) + $27;
	double $30 = -(($29 + 1.0) - $27);
	double $31 = $29 + $28;
	$30 += -(($31 - $29) - $28);
	$29 = $31;


	double $32 = 1.0 + $27;
	double $33 = -(($32 - 1.0) - $27);
	$31 = $32 + $28;
	$33 += -(($31 - $32) - $28);
	$32 = $31;

	$31 = $32 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $34 = ($32 + $31) - $31;
	double $35 = $32 - $34;


	double $36 = $29 / $32;
	$31 = $36 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $37 = ($36 + $31) - $31;
	double $38 = $36 - $37;


	$38 += (((($29 - ($34 * $37)) - ($34 * $38)) - ($35 * $37)) - ($35 * $38)) / $32;


	$38 += $30 / $32;

	$38 += (((-$33) * $29) / $32) / $32;

	result = $37 + $38;
} else 
{
	double[] $39 = new double[2];

	org.apache.commons.math.util.FastMath.expm1(x * 2.0, $39);

	double $40 = $39[0] + $39[1];
	double $41 = -(($40 - $39[0]) - $39[1]);


	double $42 = $40;
	double $43 = $41;


	double $44 = 2.0 + $40;
	double $45 = -(($44 - 2.0) - $40);
	double $46 = $44 + $41;
	$45 += -(($46 - $44) - $41);
	$44 = $46;

	$46 = $44 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $47 = ($44 + $46) - $46;
	double $48 = $44 - $47;


	double $49 = $42 / $44;
	$46 = $49 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $50 = ($49 + $46) - $46;
	double $51 = $49 - $50;


	$51 += (((($42 - ($47 * $50)) - ($47 * $51)) - ($48 * $50)) - ($48 * $51)) / $44;


	$51 += $43 / $44;

	$51 += (((-$45) * $42) / $44) / $44;

	result = $50 + $51;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (number != null) {
	break;
}:if (number != null) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e.compareTo(java.math.BigInteger.ZERO) < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}:if (e.compareTo(java.math.BigInteger.ZERO) < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expY > (expX + 27)) {

	return org.apache.commons.math.util.FastMath.abs(y);
} else {


	final int middleExp = (expX + expY) / 2;


	final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
	final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


	final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


	return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

}:if (expY > (expX + 27)) {

	return org.apache.commons.math.util.FastMath.abs(y);
} else {


	final int $20 = (expX + expY) / 2;


	final double $21 = org.apache.commons.math.util.FastMath.scalb(x, -$20);
	final double $22 = org.apache.commons.math.util.FastMath.scalb(y, -$20);


	final double $23 = org.apache.commons.math.util.FastMath.sqrt(($21 * $21) + ($22 * $22));


	return org.apache.commons.math.util.FastMath.scalb($23, $20);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d == 0) {
	return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
}:if (d == 0) {
	return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (cotanFlag) {
	double tmp;
	tmp = cosa; 	cosa = sina; 	sina = tmp;
	tmp = cosb; 	cosb = sinb; 	sinb = tmp;
}:if (cotanFlag) {
	double $3;
	$3 = cosa; 	cosa = sina; 	sina = $3;
	$3 = cosb; 	cosb = sinb; 	sinb = $3;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xb != 0.0) {


	double xbadj = xb + ((est * est) * xb);
	if (cotanFlag) {
		xbadj = -xbadj;
	}

	err += xbadj;
}:if (xb != 0.0) {


	double $2 = xb + ((est * est) * xb);
	if (cotanFlag) {
		$2 = -$2;
	}

	err += $2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (contraction <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, 
	contraction);
}:if (contraction <= 1.0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, 
	contraction);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n > 2097) {
	return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}:if (n > 2097) {
	return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (tS <= 0) {
	throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
}:if (tS <= 0) {
	throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0) {




	if (a <= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else {

	ret = 0;
}:if (a > 0) {




	if (a <= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException();
	}
} else {

	ret = 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	if ((y > 0) || ((1 / y) > 0)) {
		return 0.0;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -0.0;
	}
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	if ((y > 0) || ((1 / y) > 0)) {
		return 0.0;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal == 709) {

	final double result = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
	if (hiPrec != null) {
		hiPrec[0] /= 4.455505956692757;
		hiPrec[1] /= 4.455505956692757;
	}
	return result;
}:if (intVal == 709) {

	final double $4 = org.apache.commons.math.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
	if (hiPrec != null) {
		hiPrec[0] /= 4.455505956692757;
		hiPrec[1] /= 4.455505956692757;
	}
	return $4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y > 0) {
	return 0.0;
}:if (y > 0) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n > 20) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if (n > 20) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n > 276) {
	return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}:if (n > 276) {
	return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b == java.lang.Long.MIN_VALUE) {
	if (a < 0) {
		ret = a - b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
	}
} else {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION);
}:if (b == java.lang.Long.MIN_VALUE) {
	if (a < 0) {
		ret = a - b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
	}
} else {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == (-1.0)) {
	return -0.0;
}:if (y == (-1.0)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (initialCapacity > 0) {
	synchronized(this) {
		this.initialCapacity = initialCapacity;
	}
} else {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE, 
	initialCapacity);
}:if (initialCapacity > 0) {
	synchronized(this) {
		this.initialCapacity = initialCapacity;
	}
} else {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE, 
	initialCapacity);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}:if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
		p, q);
	}
	return org.apache.commons.math.util.FastMath.abs(u) + org.apache.commons.math.util.FastMath.abs(v);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0) {

	if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
		return org.apache.commons.math.util.FastMath.pow(-x, y);
	}

	if (y == ((long) (y))) {

		return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
	} else {
		return java.lang.Double.NaN;
	}
}:if (x < 0) {

	if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
		return org.apache.commons.math.util.FastMath.pow(-x, y);
	}

	if (y == ((long) (y))) {

		return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
	} else {
		return java.lang.Double.NaN;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 1.633123935319537E16) {
	return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}:if (xa > 1.633123935319537E16) {
	return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || ((1 / y) < 0)) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}:if ((y < 0) || ((1 / y) < 0)) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b < 0) {

	if ((java.lang.Long.MIN_VALUE - b) <= a) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
} else {

	ret = a + b;
}:if (b < 0) {

	if ((java.lang.Long.MIN_VALUE - b) <= a) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
} else {

	ret = a + b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 2) != 0) {
	facts[0] = -facts[0];
	facts[1] = -facts[1];
}:if ((i & 2) != 0) {
	facts[0] = -facts[0];
	facts[1] = -facts[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.Precision.equals(x, y, maxUlps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}:if (org.apache.commons.math.util.Precision.equals(x, y, maxUlps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y.length != len) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(y.length, len);
}:if (y.length != len) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(y.length, len);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d > 0.5) {
	if (y == (-1.0)) {
		return -0.0;
	}
	return y + 1.0;
}:if (d > 0.5) {
	if (y == (-1.0)) {
		return -0.0;
	}
	return y + 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (counter[i] == (size[i] - 1)) {
	counter[i] = 0;
} else {
	++counter[i];
	break;
}:if (this.counter[i] == (this.size[i] - 1)) {
	this.counter[i] = 0;
} else {
	++this.counter[i];
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 20.0) {
	return 1.0;
}:if (x > 20.0) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((e & 0x1) != 0) {
	result = result.multiply(k2p);
}:if ((e & 0x1) != 0) {
	result = result.multiply(k2p);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e.testBit(0)) {
	result = result.multiply(k2p);
}:if (e.testBit(0)) {
	result = result.multiply(k2p);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || java.lang.Double.isInfinite(y)) {
	return java.lang.Double.POSITIVE_INFINITY;
} else { 	if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
		return java.lang.Double.NaN;
	} else {

		final int expX = org.apache.commons.math.util.FastMath.getExponent(x);
		final int expY = org.apache.commons.math.util.FastMath.getExponent(y);
		if (expX > (expY + 27)) {

			return org.apache.commons.math.util.FastMath.abs(x);
		} else { 			if (expY > (expX + 27)) {

				return org.apache.commons.math.util.FastMath.abs(y);
			} else {


				final int middleExp = (expX + expY) / 2;


				final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
				final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


				final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


				return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

			}}

	}}:if (java.lang.Double.isInfinite(x) || java.lang.Double.isInfinite(y)) {
	return java.lang.Double.POSITIVE_INFINITY;
} else { 	if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
		return java.lang.Double.NaN;
	} else {

		final int $34 = org.apache.commons.math.util.FastMath.getExponent(x);
		final int $35 = org.apache.commons.math.util.FastMath.getExponent(y);
		if ($34 > ($35 + 27)) {

			return org.apache.commons.math.util.FastMath.abs(x);
		} else { 			if ($35 > ($34 + 27)) {

				return org.apache.commons.math.util.FastMath.abs(y);
			} else {


				final int $36 = ($34 + $35) / 2;


				final double $37 = org.apache.commons.math.util.FastMath.scalb(x, -$36);
				final double $38 = org.apache.commons.math.util.FastMath.scalb(y, -$36);


				final double $39 = org.apache.commons.math.util.FastMath.sqrt(($37 * $37) + ($38 * $38));


				return org.apache.commons.math.util.FastMath.scalb($39, $36);

			}}

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y < 0) {
	return java.lang.Double.POSITIVE_INFINITY;
}:if (y < 0) {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y == yi) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}:if ((y == yi) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x * x) == 1.0) {
	return java.lang.Double.NaN;
}:if ((x * x) == 1.0) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {

	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.NEGATIVE_INFINITY;
}:if (x == 0) {

	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Float.isInfinite(f)) {
	return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
} else { 	if (f == 0.0F) {
		return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
	}}:if (java.lang.Float.isInfinite(f)) {
	return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
} else { 	if (f == 0.0F) {
		return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expX > (expY + 27)) {

	return org.apache.commons.math.util.FastMath.abs(x);
} else { 	if (expY > (expX + 27)) {

		return org.apache.commons.math.util.FastMath.abs(y);
	} else {


		final int middleExp = (expX + expY) / 2;


		final double scaledX = org.apache.commons.math.util.FastMath.scalb(x, -middleExp);
		final double scaledY = org.apache.commons.math.util.FastMath.scalb(y, -middleExp);


		final double scaledH = org.apache.commons.math.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY));


		return org.apache.commons.math.util.FastMath.scalb(scaledH, middleExp);

	}}:if (expX > (expY + 27)) {

	return org.apache.commons.math.util.FastMath.abs(x);
} else { 	if (expY > (expX + 27)) {

		return org.apache.commons.math.util.FastMath.abs(y);
	} else {


		final int $24 = (expX + expY) / 2;


		final double $25 = org.apache.commons.math.util.FastMath.scalb(x, -$24);
		final double $26 = org.apache.commons.math.util.FastMath.scalb(y, -$24);


		final double $27 = org.apache.commons.math.util.FastMath.sqrt(($25 * $25) + ($26 * $26));


		return org.apache.commons.math.util.FastMath.scalb($27, $24);

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Float.isNaN(f) || java.lang.Float.isInfinite(f)) || (f == 0.0F)) {
	return f;
}:if ((java.lang.Float.isNaN(f) || java.lang.Float.isInfinite(f)) || (f == 0.0F)) {
	return f;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < n) {
	char c;
	do {
		c = source.charAt(index++);
	} while (java.lang.Character.isWhitespace(c) && (index < n) );
	pos.setIndex(index);

	if (index < n) {
		ret = c;
	}
}:if (index < n) {
	char $1;
	do {
		$1 = source.charAt(index++);
	} while (java.lang.Character.isWhitespace($1) && (index < n) );
	pos.setIndex(index);

	if (index < n) {
		ret = $1;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 1.5707963267948966) {




	int k = ((int) (xa * 0.6366197723675814));


	double remA;
	double remB;
	while (true) {
		double a = (-k) * 1.570796251296997;
		remA = xa + a;
		remB = -((remA - xa) - a);

		a = (-k) * 7.549789948768648E-8;
		double b = remA;
		remA = a + b;
		remB += -((remA - b) - a);

		a = (-k) * 6.123233995736766E-17;
		b = remA;
		remA = a + b;
		remB += -((remA - b) - a);

		if (remA > 0.0) {
			break;
		}




		k--;
	} 
	quadrant = k & 3;
	xa = remA;
	xb = remB;
}:if (xa > 1.5707963267948966) {




	int $19 = ((int) (xa * 0.6366197723675814));


	double $20;
	double $21;
	while (true) {
		double $22 = (-$19) * 1.570796251296997;
		$20 = xa + $22;
		$21 = -(($20 - xa) - $22);

		$22 = (-$19) * 7.549789948768648E-8;
		double $23 = $20;
		$20 = $22 + $23;
		$21 += -(($20 - $23) - $22);

		$22 = (-$19) * 6.123233995736766E-17;
		$23 = $20;
		$20 = $22 + $23;
		$21 += -(($20 - $23) - $22);

		if ($20 > 0.0) {
			break;
		}




		$19--;
	} 
	quadrant = $19 & 3;
	xa = $20;
	xb = $21;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expectedLen != actual) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(actual, expectedLen);
}:if (expectedLen != actual) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(actual, expectedLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (resDir.exists()) {
	if (!resDir.isDirectory()) {
		throw new org.apache.commons.math.exception.MathInternalError();
	}
} else {
	try {
		resDir.mkdirs();
	} catch (java.lang.SecurityException e) {
		throw new org.apache.commons.math.exception.MathInternalError(e);
	}
}:if (resDir.exists()) {
	if (!resDir.isDirectory()) {
		throw new org.apache.commons.math.exception.MathInternalError();
	}
} else {
	try {
		resDir.mkdirs();
	} catch (java.lang.SecurityException e) {
		throw new org.apache.commons.math.exception.MathInternalError(e);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result == 0) {
	result = result * x;
}:if (result == 0) {
	result = result * x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa == 0.0) {
	return leftPlane ? org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
}:if (xa == 0.0) {
	return leftPlane ? org.apache.commons.math.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (result[1] != result[1]) {
	result[1] = 0.0;
}:if (result[1] != result[1]) {
	result[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y > 0) || ((1 / y) > 0)) {
	return 0.0;
}:if ((y > 0) || ((1 / y) > 0)) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x * x) < 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}:if ((x * x) < 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.0036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	}}:if (a > 0.036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math.util.FastMath.F_1_13) * org.apache.commons.math.util.FastMath.F_11_12))) * org.apache.commons.math.util.FastMath.F_9_10))) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
} else { 	if (a > 0.0036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math.util.FastMath.F_1_9) * org.apache.commons.math.util.FastMath.F_7_8))) * org.apache.commons.math.util.FastMath.F_5_6))) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	} else {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math.util.FastMath.F_1_5) * org.apache.commons.math.util.FastMath.F_3_4))) * org.apache.commons.math.util.FastMath.F_1_2));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 1030) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, k));
}:if (n < 1030) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, k));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x != x) {
	return java.lang.Double.NaN;
}:if (x != x) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x > 1.0E-6) || (x < (-1.0E-6))) {
	double xpa = 1.0 + x;
	double xpb = -((xpa - 1.0) - x);

	double[] hiPrec = new double[2];

	final double lores = org.apache.commons.math.util.FastMath.log(xpa, hiPrec);
	if (java.lang.Double.isInfinite(lores)) {
		return lores;
	}



	double fx1 = xpb / xpa;

	double epsilon = (0.5 * fx1) + 1.0;
	epsilon = epsilon * fx1;

	return (epsilon + hiPrec[1]) + hiPrec[0];
}:if ((x > 1.0E-6) || (x < (-1.0E-6))) {
	double $6 = 1.0 + x;
	double $7 = -(($6 - 1.0) - x);

	double[] $8 = new double[2];

	final double $9 = org.apache.commons.math.util.FastMath.log($6, $8);
	if (java.lang.Double.isInfinite($9)) {
		return $9;
	}



	double $10 = $7 / $6;

	double $11 = (0.5 * $10) + 1.0;
	$11 = $11 * $10;

	return ($11 + $8[1]) + $8[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((xa != xa) || (xa == java.lang.Double.POSITIVE_INFINITY)) {
	return java.lang.Double.NaN;
}:if ((xa != xa) || (xa == java.lang.Double.POSITIVE_INFINITY)) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else { 	if (fraction < 0.5) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {

		if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
		unscaled) / 2.0)) {
			unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
		} else {
			unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
		}
	}}:if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else { 	if (fraction < 0.5) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {

		if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
		unscaled) / 2.0)) {
			unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
		} else {
			unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent < 2047) {
	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else {
	return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}:if (scaledExponent < 2047) {
	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else {
	return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == 0) {
	return x * y;
}:if (y == 0) {
	return x * y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (other == null) {
	return false;
}:if (other == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || ((1 / y) < 0)) {
	return -0.0;
}:if ((y < 0) || ((1 / y) < 0)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index < 0) || 
(index >= totalSize)) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
}:if ((index < 0) || 
(index >= this.totalSize)) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, this.totalSize);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] /= 4.455505956692757;
	hiPrec[1] /= 4.455505956692757;
}:if (hiPrec != null) {
	hiPrec[0] /= 4.455505956692757;
	hiPrec[1] /= 4.455505956692757;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == (-1.0)) {
	return (-java.lang.Math.PI) / 2.0;
}:if (x == (-1.0)) {
	return (-java.lang.Math.PI) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
}:if (java.lang.Double.isNaN(normalizedSum)) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.NORMALIZE_NAN);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}:if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < (-20)) {
	return -1.0;
}:if (x < (-20)) {
	return -1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (lcm == java.lang.Integer.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
	a, b);
}:if (lcm == java.lang.Integer.MIN_VALUE) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
	a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scale <= 0) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}:if (scale <= 0) {
	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n > (-127)) && (n < 128)) {
	return f * java.lang.Float.intBitsToFloat((n + 127) << 23);
}:if ((n > (-127)) && (n < 128)) {
	return f * java.lang.Float.intBitsToFloat((n + 127) << 23);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n <= 61) {

	int i = (n - k) + 1;
	for (int j = 1; j <= k; j++) {
		result = (result * i) / j;
		i++;
	}
} else { 	if (n <= 66) {


		int i = (n - k) + 1;
		for (int j = 1; j <= k; j++) {






			final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
			result = (result / (j / d)) * (i / d);
			i++;
		}
	} else {



		int i = (n - k) + 1;
		for (int j = 1; j <= k; j++) {
			final long d = org.apache.commons.math.util.ArithmeticUtils.gcd(i, j);
			result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d);
			i++;
		}
	}}:if (n <= 61) {

	int $20 = (n - k) + 1;
	for (int $21 = 1; $21 <= k; $21++) {
		result = (result * $20) / $21;
		$20++;
	}
} else { 	if (n <= 66) {


		int $22 = (n - k) + 1;
		for (int $23 = 1; $23 <= k; $23++) {






			final long $24 = org.apache.commons.math.util.ArithmeticUtils.gcd($22, $23);
			result = (result / ($23 / $24)) * ($22 / $24);
			$22++;
		}
	} else {



		int $25 = (n - k) + 1;
		for (int $26 = 1; $26 <= k; $26++) {
			final long $27 = org.apache.commons.math.util.ArithmeticUtils.gcd($25, $26);
			result = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(result / ($26 / $27), $25 / $27);
			$25++;
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i > numElements) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, 
	i, numElements);
} else { 	if (i < 0) {
		throw new org.apache.commons.math.exception.MathIllegalArgumentException(
		org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
		i);
	} else {

		numElements -= i;
		if (front) {
			startIndex += i;
		}
	}}:if (i > this.numElements) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, 
	i, this.numElements);
} else { 	if (i < 0) {
		throw new org.apache.commons.math.exception.MathIllegalArgumentException(
		org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
		i);
	} else {

		this.numElements -= i;
		if (front) {
			this.startIndex += i;
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || (invy < 0)) {
	return -java.lang.Math.PI;
} else {
	return java.lang.Math.PI;
}:if ((y < 0) || (invy < 0)) {
	return -java.lang.Math.PI;
} else {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent < 255) {
	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else {
	return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}:if (scaledExponent < 255) {
	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else {
	return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {
	return a;
}:if (a > b) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits < 0) {
	return -0.0;
}:if (bits < 0) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 3294198.0) {



	double[] reduceResults = new double[3];
	org.apache.commons.math.util.FastMath.reducePayneHanek(xa, reduceResults);
	quadrant = ((int) (reduceResults[0])) & 3;
	xa = reduceResults[1];
	xb = reduceResults[2];
} else { 	if (xa > 1.5707963267948966) {




		int k = ((int) (xa * 0.6366197723675814));


		double remA;
		double remB;
		while (true) {
			double a = (-k) * 1.570796251296997;
			remA = xa + a;
			remB = -((remA - xa) - a);

			a = (-k) * 7.549789948768648E-8;
			double b = remA;
			remA = a + b;
			remB += -((remA - b) - a);

			a = (-k) * 6.123233995736766E-17;
			b = remA;
			remA = a + b;
			remB += -((remA - b) - a);

			if (remA > 0.0) {
				break;
			}




			k--;
		} 
		quadrant = k & 3;
		xa = remA;
		xb = remB;
	}}:if (xa > 3294198.0) {



	double[] $13 = new double[3];
	org.apache.commons.math.util.FastMath.reducePayneHanek(xa, $13);
	quadrant = ((int) ($13[0])) & 3;
	xa = $13[1];
	xb = $13[2];
} else { 	if (xa > 1.5707963267948966) {




		int $14 = ((int) (xa * 0.6366197723675814));


		double $15;
		double $16;
		while (true) {
			double $17 = (-$14) * 1.570796251296997;
			$15 = xa + $17;
			$16 = -(($15 - xa) - $17);

			$17 = (-$14) * 7.549789948768648E-8;
			double $18 = $15;
			$15 = $17 + $18;
			$16 += -(($15 - $18) - $17);

			$17 = (-$14) * 6.123233995736766E-17;
			$18 = $15;
			$15 = $17 + $18;
			$16 += -(($15 - $18) - $17);

			if ($15 > 0.0) {
				break;
			}




			$14--;
		} 
		quadrant = $14 & 3;
		xa = $15;
		xb = $16;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 0.25) {
	double[] hiPrec = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);

	double temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000;
	double yaa = (ya + temp) - temp;
	double yab = ya - yaa;


	double recip = 1.0 / ya;
	temp = recip * org.apache.commons.math.util.FastMath.HEX_40000000;
	double recipa = (recip + temp) - temp;
	double recipb = recip - recipa;


	recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip;

	recipb += ((-yb) * recip) * recip;

	recipa = -recipa;
	recipb = -recipb;


	temp = ya + recipa;
	yb += -((temp - ya) - recipa);
	ya = temp;
	temp = ya + recipb;
	yb += -((temp - ya) - recipb);
	ya = temp;

	result = ya + yb;
	result *= 0.5;
} else 
{
	double[] hiPrec = new double[2];
	org.apache.commons.math.util.FastMath.expm1(x, hiPrec);

	double ya = hiPrec[0] + hiPrec[1];
	double yb = -((ya - hiPrec[0]) - hiPrec[1]);


	double denom = 1.0 + ya;
	double denomr = 1.0 / denom;
	double denomb = (-((denom - 1.0) - ya)) + yb;
	double ratio = ya * denomr;
	double temp = ratio * org.apache.commons.math.util.FastMath.HEX_40000000;
	double ra = (ratio + temp) - temp;
	double rb = ratio - ra;

	temp = denom * org.apache.commons.math.util.FastMath.HEX_40000000;
	double za = (denom + temp) - temp;
	double zb = denom - za;

	rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr;


	rb += yb * denomr;
	rb += (((-ya) * denomb) * denomr) * denomr;


	temp = ya + ra;
	yb += -((temp - ya) - ra);
	ya = temp;
	temp = ya + rb;
	yb += -((temp - ya) - rb);
	ya = temp;

	result = ya + yb;
	result *= 0.5;
}:if (x > 0.25) {
	double[] $21 = new double[2];
	org.apache.commons.math.util.FastMath.exp(x, 0.0, $21);

	double $22 = $21[0] + $21[1];
	double $23 = -(($22 - $21[0]) - $21[1]);

	double $24 = $22 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $25 = ($22 + $24) - $24;
	double $26 = $22 - $25;


	double $27 = 1.0 / $22;
	$24 = $27 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $28 = ($27 + $24) - $24;
	double $29 = $27 - $28;


	$29 += ((((1.0 - ($25 * $28)) - ($25 * $29)) - ($26 * $28)) - ($26 * $29)) * $27;

	$29 += ((-$23) * $27) * $27;

	$28 = -$28;
	$29 = -$29;


	$24 = $22 + $28;
	$23 += -(($24 - $22) - $28);
	$22 = $24;
	$24 = $22 + $29;
	$23 += -(($24 - $22) - $29);
	$22 = $24;

	result = $22 + $23;
	result *= 0.5;
} else 
{
	double[] $30 = new double[2];
	org.apache.commons.math.util.FastMath.expm1(x, $30);

	double $31 = $30[0] + $30[1];
	double $32 = -(($31 - $30[0]) - $30[1]);


	double $33 = 1.0 + $31;
	double $34 = 1.0 / $33;
	double $35 = (-(($33 - 1.0) - $31)) + $32;
	double $36 = $31 * $34;
	double $37 = $36 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $38 = ($36 + $37) - $37;
	double $39 = $36 - $38;

	$37 = $33 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $40 = ($33 + $37) - $37;
	double $41 = $33 - $40;

	$39 += (((($31 - ($40 * $38)) - ($40 * $39)) - ($41 * $38)) - ($41 * $39)) * $34;


	$39 += $32 * $34;
	$39 += (((-$31) * $35) * $34) * $34;


	$37 = $31 + $38;
	$32 += -(($37 - $31) - $38);
	$31 = $37;
	$37 = $31 + $39;
	$32 += -(($37 - $31) - $39);
	$31 = $37;

	result = $31 + $32;
	result *= 0.5;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((p & 1) != 0) {
	org.apache.commons.math.util.FastMathCalc.quadMult(ys, xs, as);
	ys[0] = as[0]; 	ys[1] = as[1];
}:if ((p & 1) != 0) {
	org.apache.commons.math.util.FastMathCalc.quadMult(ys, xs, as);
	ys[0] = as[0]; 	ys[1] = as[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (0 <= comp) {
	return false;
}:if (0 <= comp) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < (-277)) {
	return f > 0 ? 0.0F : -0.0F;
}:if (n < (-277)) {
	return f > 0 ? 0.0F : -0.0F;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] expFrac = org.apache.commons.math.util.FastMathResources.loadExpFrac();
	EXP_FRAC_TABLE_A = expFrac[0];
	EXP_FRAC_TABLE_B = expFrac[1];
} else {
	EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
	EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
}:if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
	final double[][] $5 = org.apache.commons.math.util.FastMathResources.loadExpFrac();
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = $5[0];
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = $5[1];
} else {
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracA();
	org.apache.commons.math.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpFracB();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	x = -x;
	negative = true;
}:if (x < 0.0) {
	x = -x;
	negative = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x80000000) {
	return a;
}:if (bits == 0x80000000) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x8000000000000000L) {
	return b;
}:if (bits == 0x8000000000000000L) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return org.apache.commons.math.util.FastMath.pow(-x, y);
}:if ((y >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return org.apache.commons.math.util.FastMath.pow(-x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	hiPrec[1] = 0.0;
}:if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	hiPrec[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}:if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(b, a, pattern);
} else {


	if (a < 0) {
		if (b < 0) {

			if ((java.lang.Long.MIN_VALUE - b) <= a) {
				ret = a + b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
			}
		} else {

			ret = a + b;
		}
	} else {




		if (a <= (java.lang.Long.MAX_VALUE - b)) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	}
}:if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.addAndCheck(b, a, pattern);
} else {


	if (a < 0) {
		if (b < 0) {

			if ((java.lang.Long.MIN_VALUE - b) <= a) {
				ret = a + b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
			}
		} else {

			ret = a + b;
		}
	} else {




		if (a <= (java.lang.Long.MAX_VALUE - b)) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 1.0) {
	return 0.0;
}:if (x == 1.0) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
}:if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index < 0) || 
(index >= size[i])) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, size[i] - 1);
}:if ((index < 0) || 
(index >= this.size[i])) {
	throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, this.size[i] - 1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
	i);
} else {

	numElements -= i;
	if (front) {
		startIndex += i;
	}
}:if (i < 0) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
	i);
} else {

	this.numElements -= i;
	if (front) {
		this.startIndex += i;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x)) {
	return x;
} else {
	return java.lang.Double.NaN;
}:if (java.lang.Double.isInfinite(x)) {
	return x;
} else {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (f == 0.0F) {
	return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
}:if (f == 0.0F) {
	return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (f == direction) {
	return ((float) (direction));
} else { 	if (java.lang.Float.isInfinite(f)) {
		return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
	} else { 		if (f == 0.0F) {
			return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
		}}}:if (f == direction) {
	return ((float) (direction));
} else { 	if (java.lang.Float.isInfinite(f)) {
		return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
	} else { 		if (f == 0.0F) {
			return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
	break;
}:if ((states[index] != org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x < 0) && (y != x)) {
	y--;
}:if ((x < 0) && (y != x)) {
	y--;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




	double xa = x - 1.0;
	double xb = (xa - x) + 1.0;
	double tmp = xa * org.apache.commons.math.util.FastMath.HEX_40000000;
	double aa = (xa + tmp) - tmp;
	double ab = xa - aa;
	xa = aa;
	xb = ab;

	double ya = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
	double yb = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

	for (int i = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; i >= 0; i--) {

		aa = ya * xa;
		ab = ((ya * xb) + (yb * xa)) + (yb * xb);

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;


		aa = ya + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][0];
		ab = yb + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[i][1];

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;
	}


	aa = ya * xa;
	ab = ((ya * xb) + (yb * xa)) + (yb * xb);

	tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
	ya = (aa + tmp) - tmp;
	yb = (aa - ya) + ab;

	return ya + yb;
}:if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




	double $26 = x - 1.0;
	double $27 = ($26 - x) + 1.0;
	double $28 = $26 * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $29 = ($26 + $28) - $28;
	double $30 = $26 - $29;
	$26 = $29;
	$27 = $30;

	double $31 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][0];
	double $32 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF[org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 1][1];

	for (int $33 = org.apache.commons.math.util.FastMath.LN_QUICK_COEF.length - 2; $33 >= 0; $33--) {

		$29 = $31 * $26;
		$30 = (($31 * $27) + ($32 * $26)) + ($32 * $27);

		$28 = $29 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$31 = ($29 + $28) - $28;
		$32 = ($29 - $31) + $30;


		$29 = $31 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$33][0];
		$30 = $32 + org.apache.commons.math.util.FastMath.LN_QUICK_COEF[$33][1];

		$28 = $29 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$31 = ($29 + $28) - $28;
		$32 = ($29 - $31) + $30;
	}


	$29 = $31 * $26;
	$30 = (($31 * $27) + ($32 * $26)) + ($32 * $27);

	$28 = $29 * org.apache.commons.math.util.FastMath.HEX_40000000;
	$31 = ($29 + $28) - $28;
	$32 = ($29 - $31) + $30;

	return $31 + $32;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.Precision.equals(x, y, eps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}:if (org.apache.commons.math.util.Precision.equals(x, y, eps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index >= 0) {
	return internalArray[startIndex + index];
} else {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}:if (index >= 0) {
	return this.internalArray[this.startIndex + index];
} else {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa < 0) {

	xa = -xa;
	xb = -xb;
	negate = true;
}:if (xa < 0) {

	xa = -xa;
	xb = -xb;
	negate = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	EXP_INT_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];
	EXP_INT_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];

	final double[] tmp = new double[2];
	final double[] recip = new double[2];


	for (int i = 0; i < org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX; i++) {
		org.apache.commons.math.util.FastMathCalc.expint(i, tmp);
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[i + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[i + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];

		if (i != 0) {

			org.apache.commons.math.util.FastMathCalc.splitReciprocal(tmp, recip);
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
		}
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] expInt = org.apache.commons.math.util.FastMathResources.loadExpInt();
		EXP_INT_TABLE_A = expInt[0];
		EXP_INT_TABLE_B = expInt[1];
	} else {
		EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
		EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
	}}:if (org.apache.commons.math.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];
	org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = new double[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_LEN];

	final double[] $6 = new double[2];
	final double[] $7 = new double[2];


	for (int $8 = 0; $8 < org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX; $8++) {
		org.apache.commons.math.util.FastMathCalc.expint($8, $6);
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[$8 + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = $6[0];
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[$8 + org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = $6[1];

		if ($8 != 0) {

			org.apache.commons.math.util.FastMathCalc.splitReciprocal($6, $7);
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $8] = $7[0];
			org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $8] = $7[1];
		}
	}
} else { 	if (org.apache.commons.math.util.FastMath.LOAD_RESOURCES) {
		final double[][] $9 = org.apache.commons.math.util.FastMathResources.loadExpInt();
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = $9[0];
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = $9[1];
	} else {
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntA();
		org.apache.commons.math.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = org.apache.commons.math.util.FastMathLiteralArrays.loadExpIntB();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (y != y) {
		return y;
	}
	if (y < 0.0) {
		return 0.0;
	} else {
		return java.lang.Double.POSITIVE_INFINITY;
	}
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (y != y) {
		return y;
	}
	if (y < 0.0) {
		return 0.0;
	} else {
		return java.lang.Double.POSITIVE_INFINITY;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n == k) || (k == 0)) {
	return 1.0;
}:if ((n == k) || (k == 0)) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k);
}:if (k > (n / 2)) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 67) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k);
}:if (n < 67) {
	return org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	if (b < 0) {

		if (a >= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else { 		if (b > 0) {

			if ((java.lang.Long.MIN_VALUE / b) <= a) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();

			}
		} else {

			ret = 0;
		}}
} else { 	if (a > 0) {




		if (a <= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else {

		ret = 0;
	}}:if (a < 0) {
	if (b < 0) {

		if (a >= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else { 		if (b > 0) {

			if ((java.lang.Long.MIN_VALUE / b) <= a) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();

			}
		} else {

			ret = 0;
		}}
} else { 	if (a > 0) {




		if (a <= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException();
		}
	} else {

		ret = 0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.POSITIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}:if (y == java.lang.Double.POSITIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (counter[i] != (size[i] - 1)) {
	return true;
}:if (this.counter[i] != (this.size[i] - 1)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}:if (fraction > 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y < 0) {
	long yi = ((long) (y));
	if ((y == yi) && ((yi & 1) == 1)) {
		return -0.0;
	}

	return 0.0;
}:if (y < 0) {
	long $14 = ((long) (y));
	if ((y == $14) && (($14 & 1) == 1)) {
		return -0.0;
	}

	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((d > (-org.apache.commons.math.util.Precision.SAFE_MIN)) && (d < org.apache.commons.math.util.Precision.SAFE_MIN)) {
	return d;
}:if ((d > (-org.apache.commons.math.util.Precision.SAFE_MIN)) && (d < org.apache.commons.math.util.Precision.SAFE_MIN)) {
	return d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.POSITIVE_INFINITY) {
	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) > 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}:if (y == java.lang.Double.POSITIVE_INFINITY) {
	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) > 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(d) || java.lang.Double.isNaN(direction)) {
	return java.lang.Double.NaN;
} else { 	if (d == direction) {
		return direction;
	} else { 		if (java.lang.Double.isInfinite(d)) {
			return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
		} else { 			if (d == 0) {
				return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
			}}}}:if (java.lang.Double.isNaN(d) || java.lang.Double.isNaN(direction)) {
	return java.lang.Double.NaN;
} else { 	if (d == direction) {
		return direction;
	} else { 		if (java.lang.Double.isInfinite(d)) {
			return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
		} else { 			if (d == 0) {
				return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (trans != null) {
	value = trans.transform(o);
}:if (trans != null) {
	value = trans.transform(o);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > 0) {

	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else { 	if (scaledExponent > (-53)) {



		mantissa = mantissa | (1L << 52);


		final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if (mostSignificantLostBit != 0) {

			mantissa++;
		}
		return java.lang.Double.longBitsToDouble(sign | mantissa);

	} else {

		return sign == 0L ? 0.0 : -0.0;
	}}:if (scaledExponent > 0) {

	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else { 	if (scaledExponent > (-53)) {



		mantissa = mantissa | (1L << 52);


		final long $8 = mantissa & (1L << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if ($8 != 0) {

			mantissa++;
		}
		return java.lang.Double.longBitsToDouble(sign | mantissa);

	} else {

		return sign == 0L ? 0.0 : -0.0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < (-20)) {
	return (-org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;
}:if (x < (-20)) {
	return (-org.apache.commons.math.util.FastMath.exp(-x)) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((++count) > maximalCount) {
	maxCountCallback.trigger(maximalCount);
}:if ((++this.count) > this.maximalCount) {
	this.maxCountCallback.trigger(this.maximalCount);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x < 0) || (invx < 0)) {
	if ((y < 0) || (invy < 0)) {
		return -java.lang.Math.PI;
	} else {
		return java.lang.Math.PI;
	}
} else {
	return result;
}:if ((x < 0) || (invx < 0)) {
	if ((y < 0) || (invy < 0)) {
		return -java.lang.Math.PI;
	} else {
		return java.lang.Math.PI;
	}
} else {
	return result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(x);
}:if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math.exception.NotFiniteNumberException(x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (x <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return x;
}:if ((x >= org.apache.commons.math.util.FastMath.TWO_POWER_52) || (x <= (-org.apache.commons.math.util.FastMath.TWO_POWER_52))) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (newMapping) {
	++size;
	if (shouldGrowTable()) {
		growTable();
	}
	++count;
}:if (newMapping) {
	++this.size;
	if (shouldGrowTable()) {
		growTable();
	}
	++this.count;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (map.size() != rhs.map.size()) {
	return false;
}:if (this.map.size() != rhs.map.size()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((direction < d) ^ (sign == 0L)) {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
} else {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
}:if ((direction < d) ^ (sign == 0L)) {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
} else {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 20.0) {
	return org.apache.commons.math.util.FastMath.exp(x) / 2.0;
}:if (x > 20.0) {
	return org.apache.commons.math.util.FastMath.exp(x) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (other instanceof org.apache.commons.math.util.BigReal) {
	return d.equals(((org.apache.commons.math.util.BigReal) (other)).d);
}:if (other instanceof org.apache.commons.math.util.BigReal) {
	return this.d.equals(((org.apache.commons.math.util.BigReal) (other)).d);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (d != d) {
	return "Double.NaN,";
} else {
	return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,";
}:if (d != d) {
	return "Double.NaN,";
} else {
	return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,";
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == x) {
	return y;
}:if (y == x) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}:if (index < 0) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!infinite) {
	break;
}:if (!infinite) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x > 0.0) {
	return ((-1.0) + hiPrec[0]) + hiPrec[1];
} else {
	final double ra = (-1.0) + hiPrec[0];
	double rb = -((ra + 1.0) - hiPrec[0]);
	rb += hiPrec[1];
	return ra + rb;
}:if (x > 0.0) {
	return ((-1.0) + hiPrec[0]) + hiPrec[1];
} else {
	final double $14 = (-1.0) + hiPrec[0];
	double $15 = -(($14 + 1.0) - hiPrec[0]);
	$15 += hiPrec[1];
	return $14 + $15;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == java.lang.Double.NEGATIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}:if (y == java.lang.Double.NEGATIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_3_4;
	}

	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x != x) || (y != y)) {
	return java.lang.Double.NaN;
}:if ((x != x) || (y != y)) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((a != 0.0) && (a > b)) {
	p2 = (p1 / lastScaleFactor) + ((b / scaleFactor) * p0);
	q2 = (q1 / lastScaleFactor) + ((b / scaleFactor) * q0);
} else { 	if (b != 0) {
		p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
		q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
	}}:if ((a != 0.0) && (a > b)) {
	p2 = (p1 / lastScaleFactor) + ((b / scaleFactor) * p0);
	q2 = (q1 / lastScaleFactor) + ((b / scaleFactor) * q0);
} else { 	if (b != 0) {
		p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
		q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a >= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if (a >= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}:if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (oldStates[i] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	final int key = oldKeys[i];
	final int index = org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, key, newMask);
	newKeys[index] = key;
	newValues[index] = oldValues[i];
	newStates[index] = org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL;
}:if (oldStates[i] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL) {
	final int $2 = oldKeys[i];
	final int $3 = org.apache.commons.math.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, $2, newMask);
	newKeys[$3] = $2;
	newValues[$3] = oldValues[i];
	newStates[$3] = org.apache.commons.math.util.OpenIntToDoubleHashMap.FULL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x != 0.0) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NaN;
	}

	return java.lang.Double.NaN;
}:if (x != 0.0) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NaN;
	}

	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) 
{
	if ((y > 0.0) || ((1 / y) > 0.0)) {
		return java.lang.Math.PI;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -java.lang.Math.PI;
	}
}:if (x == java.lang.Double.NEGATIVE_INFINITY) 
{
	if ((y > 0.0) || ((1 / y) > 0.0)) {
		return java.lang.Math.PI;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -java.lang.Math.PI;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a != b) {
	return java.lang.Float.NaN;
}:if (a != b) {
	return java.lang.Float.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs != 0) {
	double r = xabs / x3max;
	s3 += r * r;
}:if (xabs != 0) {
	double $13 = xabs / x3max;
	s3 += $13 * $13;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s2 == 0) {
	norm = x3max * java.lang.Math.sqrt(s3);
} else {
	if (s2 >= x3max) {
		norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
	} else {
		norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
	}
}:if (s2 == 0) {
	norm = x3max * java.lang.Math.sqrt(s3);
} else {
	if (s2 >= x3max) {
		norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
	} else {
		norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(b, a);
} else {
	if (a < 0) {
		if (b < 0) {

			if (a >= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else { 			if (b > 0) {

				if ((java.lang.Long.MIN_VALUE / b) <= a) {
					ret = a * b;
				} else {
					throw new org.apache.commons.math.exception.MathArithmeticException();

				}
			} else {

				ret = 0;
			}}
	} else { 		if (a > 0) {




			if (a <= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else {

			ret = 0;
		}}
}:if (a > b) {

	ret = org.apache.commons.math.util.ArithmeticUtils.mulAndCheck(b, a);
} else {
	if (a < 0) {
		if (b < 0) {

			if (a >= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else { 			if (b > 0) {

				if ((java.lang.Long.MIN_VALUE / b) <= a) {
					ret = a * b;
				} else {
					throw new org.apache.commons.math.exception.MathArithmeticException();

				}
			} else {

				ret = 0;
			}}
	} else { 		if (a > 0) {




			if (a <= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math.exception.MathArithmeticException();
			}
		} else {

			ret = 0;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((startIndex >= source.length()) || 
(endIndex > source.length())) || 
(source.substring(startIndex, endIndex).compareTo(expected) != 0)) {

	pos.setIndex(startIndex);
	pos.setErrorIndex(startIndex);
	return false;
}:if (((startIndex >= source.length()) || 
(endIndex > source.length())) || 
(source.substring(startIndex, endIndex).compareTo(expected) != 0)) {

	pos.setIndex(startIndex);
	pos.setErrorIndex(startIndex);
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == 0.0) {
	return 1.0;
}:if (y == 0.0) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	negative = true;
	a = -a;
}:if (a < 0) {
	negative = true;
	a = -a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((d < 8.0E298) && (d > (-8.0E298))) {
	final double a = d * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[0] = (d + a) - a;
	split[1] = d - split[0];
} else {
	final double a = d * 9.313225746154785E-10;
	split[0] = ((d + a) - d) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[1] = d - split[0];
}:if ((d < 8.0E298) && (d > (-8.0E298))) {
	final double $2 = d * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[0] = (d + $2) - $2;
	split[1] = d - split[0];
} else {
	final double $3 = d * 9.313225746154785E-10;
	split[0] = ((d + $3) - d) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	split[1] = d - split[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (bits == 0x8000000000000000L) {
	return a;
}:if (bits == 0x8000000000000000L) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
	return false;
}:if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((startIndex + index) >= internalArray.length) {
	expandTo(startIndex + (index + 1));
}:if ((this.startIndex + index) >= this.internalArray.length) {
	expandTo(this.startIndex + (index + 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!defaultTransformer.equals(rhs.defaultTransformer)) {
	return false;
}:if (!this.defaultTransformer.equals(rhs.defaultTransformer)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (infinite) {

	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}:if (infinite) {

	throw new org.apache.commons.math.exception.ConvergenceException(org.apache.commons.math.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == 1024) {

	return x;
}:if (exponent == 1024) {

	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < (-2098)) {
	return d > 0 ? 0.0 : -0.0;
}:if (n < (-2098)) {
	return d > 0 ? 0.0 : -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] > previous) {
	break ITEM;
}:if (val[index] > previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!resDir.isDirectory()) {
	throw new org.apache.commons.math.exception.MathInternalError();
}:if (!resDir.isDirectory()) {
	throw new org.apache.commons.math.exception.MathInternalError();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.lang.Double.isNaN(values[i])) {
	sum += values[i];
}:if (!java.lang.Double.isNaN(values[i])) {
	sum += values[i];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction >= 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}:if (fraction >= 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < 0.0) {
	x = -x;
}:if (x < 0.0) {
	x = -x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((n == k) || (k == 0)) {
	return 0;
}:if ((n == k) || (k == 0)) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 67) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k));
}:if (n < 67) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.binomialCoefficient(n, k));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (remA > 0.0) {
	break;
}:if (remA > 0.0) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negative) {
	result = -result;
}:if (negative) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y != y) {
	return y;
}:if (y != y) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == (-1023)) {
	if (x == 0) {
		return x;
	}


	subnormal = true;
	x *= 1.8014398509481984E16;
	inbits = java.lang.Double.doubleToLongBits(x);
	exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023;
}:if (exponent == (-1023)) {
	if (x == 0) {
		return x;
	}


	subnormal = true;
	x *= 1.8014398509481984E16;
	inbits = java.lang.Double.doubleToLongBits(x);
	exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) {
	if (y != y) {
		return y;
	}

	if (y < 0) {
		long yi = ((long) (y));
		if ((y == yi) && ((yi & 1) == 1)) {
			return -0.0;
		}

		return 0.0;
	}

	if (y > 0) {
		long yi = ((long) (y));
		if ((y == yi) && ((yi & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.POSITIVE_INFINITY;
	}
}:if (x == java.lang.Double.NEGATIVE_INFINITY) {
	if (y != y) {
		return y;
	}

	if (y < 0) {
		long $16 = ((long) (y));
		if ((y == $16) && (($16 & 1) == 1)) {
			return -0.0;
		}

		return 0.0;
	}

	if (y > 0) {
		long $17 = ((long) (y));
		if ((y == $17) && (($17 & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.POSITIVE_INFINITY;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (negate) {
	result = -result;
}:if (negate) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (intVal > 709) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
		hiPrec[1] = 0.0;
	}
	return java.lang.Double.POSITIVE_INFINITY;
}:if (intVal > 709) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
		hiPrec[1] = 0.0;
	}
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else { 		if (scaledExponent > (-24)) {



			mantissa = mantissa | (1 << 23);


			final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if (mostSignificantLostBit != 0) {

				mantissa++;
			}
			return java.lang.Float.intBitsToFloat(sign | mantissa);

		} else {

			return sign == 0 ? 0.0F : -0.0F;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 23) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0x7fffff;

		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}}
}:if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else { 		if (scaledExponent > (-24)) {



			mantissa = mantissa | (1 << 23);


			final int $10 = mantissa & (1 << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if ($10 != 0) {

				mantissa++;
			}
			return java.lang.Float.intBitsToFloat(sign | mantissa);

		} else {

			return sign == 0 ? 0.0F : -0.0F;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 23) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0x7fffff;

		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] <= previous) {
	break ITEM;
}:if (val[index] <= previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return false;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(values[i])) {
	out[i] = java.lang.Double.NaN;
} else {
	out[i] = (values[i] * normalizedSum) / sum;
}:if (java.lang.Double.isNaN(values[i])) {
	out[i] = java.lang.Double.NaN;
} else {
	out[i] = (values[i] * normalizedSum) / sum;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}:if (y == null) {
	throw new org.apache.commons.math.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (referenceCount != count) {
	throw new java.util.ConcurrentModificationException();
}:if (this.referenceCount != this.count) {
	throw new java.util.ConcurrentModificationException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.apache.commons.math.util.Precision.equals(x[i], y[i])) {
	return false;
}:if (!org.apache.commons.math.util.Precision.equals(x[i], y[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xabs > x1max) {
	double r = x1max / xabs;
	s1 = 1 + ((s1 * r) * r);
	x1max = xabs;
} else {
	double r = xabs / x1max;
	s1 += r * r;
}:if (xabs > x1max) {
	double $14 = x1max / xabs;
	s1 = 1 + ((s1 * $14) * $14);
	x1max = xabs;
} else {
	double $15 = xabs / x1max;
	s1 += $15 * $15;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.POSITIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
}:if (x == java.lang.Double.POSITIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math.util.FastMath.F_1_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((i & 1) == 0) {
	continue;
}:if ((i & 1) == 0) {
	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return magnitude;
}:if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}:if (e < 0) {
	throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.EXPONENT, e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - yInt;
}:if (yInt < 0) {
	yInt = org.apache.commons.math.util.Precision.SGN_MASK_FLOAT - yInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x > 0) && ((1 / x) == 0)) {
	return x;
}:if ((x > 0) && ((1 / x) == 0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (powerOfTwo == capacity) {
	return capacity;
}:if (powerOfTwo == capacity) {
	return capacity;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	newSize = ((int) (org.apache.commons.math.util.FastMath.ceil(internalArray.length * expansionFactor)));
} else {
	newSize = internalArray.length + org.apache.commons.math.util.FastMath.round(expansionFactor);
}:if (this.expansionMode == org.apache.commons.math.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	newSize = ((int) (org.apache.commons.math.util.FastMath.ceil(this.internalArray.length * this.expansionFactor)));
} else {
	newSize = this.internalArray.length + org.apache.commons.math.util.FastMath.round(this.expansionFactor);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return missingEntries;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return this.missingEntries;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(r)) {
	return java.lang.Math.PI / 2;
}:if (java.lang.Double.isInfinite(r)) {
	return java.lang.Math.PI / 2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (subnormal) {
	est *= 3.814697265625E-6;
}:if (subnormal) {
	est *= 3.814697265625E-6;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((o instanceof java.lang.Number) || (o instanceof java.lang.String)) {
	value = defaultTransformer.transform(o);
} else {
	org.apache.commons.math.util.NumberTransformer trans = getTransformer(o.getClass());
	if (trans != null) {
		value = trans.transform(o);
	}
}:if ((o instanceof java.lang.Number) || (o instanceof java.lang.String)) {
	value = this.defaultTransformer.transform(o);
} else {
	org.apache.commons.math.util.NumberTransformer $1 = getTransformer(o.getClass());
	if ($1 != null) {
		value = $1.transform(o);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x > 1.0) || (x < (-1.0))) {
	return java.lang.Double.NaN;
}:if ((x > 1.0) || (x < (-1.0))) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (startIndex == endIndex) {

	final double[] special = new double[]{ 
	java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY };

	for (int i = 0; i < special.length; ++i) {
		number = org.apache.commons.math.util.CompositeFormat.parseNumber(source, special[i], pos);
		if (number != null) {
			break;
		}
	}
}:if (startIndex == endIndex) {

	final double[] $2 = new double[]{ 
	java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY };

	for (int $3 = 0; $3 < $2.length; ++$3) {
		number = org.apache.commons.math.util.CompositeFormat.parseNumber(source, $2[$3], pos);
		if (number != null) {
			break;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (k == 31) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}:if (k == 31) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a > 0.031) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
} else { 	if (a > 0.003) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
	} else {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
	}}:if (a > 0.031) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math.util.FastMath.F_1_11 + (a2 * org.apache.commons.math.util.FastMath.F_1_13))))))))))));
} else { 	if (a > 0.003) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math.util.FastMath.F_1_7 + (a2 * org.apache.commons.math.util.FastMath.F_1_9))))))));
	} else {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math.util.FastMath.F_1_3 + (a2 * org.apache.commons.math.util.FastMath.F_1_5))));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (xa > 1.5) {

	final double pi2a = 1.5707963267948966;
	final double pi2b = 6.123233995736766E-17;

	final double a = pi2a - xa;
	double b = -((a - pi2a) + xa);
	b += pi2b - xb;

	xa = a + b;
	xb = -((xa - a) - b);
	quadrant ^= 1;
	negative ^= true;
}:if (xa > 1.5) {

	final double $4 = 1.5707963267948966;
	final double $5 = 6.123233995736766E-17;

	final double $6 = $4 - xa;
	double $7 = -(($6 - $4) + xa);
	$7 += $5 - xb;

	xa = $6 + $7;
	xb = -((xa - $6) - $7);
	quadrant ^= 1;
	negative ^= true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 1.0) {
	return java.lang.Math.PI / 2.0;
}:if (x == 1.0) {
	return java.lang.Math.PI / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y == yi) && ((yi & 1) == 1)) {
	return -0.0;
}:if ((y == yi) && ((yi & 1) == 1)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < b) {
	return b;
}:if (a < b) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isInfinite(r)) {
	return org.apache.commons.math.util.FastMath.atan(r, 0, x < 0);
}:if (java.lang.Double.isInfinite(r)) {
	return org.apache.commons.math.util.FastMath.atan(r, 0, x < 0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((c < 8.0E298) && (c > (-8.0E298))) {
	double z = c * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[0] = (c + z) - z;
	a[1] = (c - a[0]) + d;
} else {
	double z = c * 9.313225746154785E-10;
	a[0] = ((c + z) - c) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[1] = (c - a[0]) + d;
}:if ((c < 8.0E298) && (c > (-8.0E298))) {
	double $2 = c * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[0] = (c + $2) - $2;
	a[1] = (c - a[0]) + d;
} else {
	double $3 = c * 9.313225746154785E-10;
	a[0] = ((c + $3) - c) * org.apache.commons.math.util.FastMathCalc.HEX_40000000;
	a[1] = (c - a[0]) + d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (contraction < expansion) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, 
	contraction, expansion);
}:if (contraction < expansion) {
	throw new org.apache.commons.math.exception.MathIllegalArgumentException(
	org.apache.commons.math.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, 
	contraction, expansion);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (y == ((long) (y))) {

	return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
} else {
	return java.lang.Double.NaN;
}:if (y == ((long) (y))) {

	return (((long) (y)) & 1) == 0 ? org.apache.commons.math.util.FastMath.pow(-x, y) : -org.apache.commons.math.util.FastMath.pow(-x, y);
} else {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.OBJECT_TRANSFORMATION);
}:if (o == null) {
	throw new org.apache.commons.math.exception.NullArgumentException(org.apache.commons.math.exception.util.LocalizedFormats.OBJECT_TRANSFORMATION);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (idx == 0) {


	final double denom = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx])));

	ya = epsA * denom;
	yb = epsB * denom;
} else {
	double temp2 = xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx];
	double za = 1.0 + temp2;
	double zb = -((za - 1.0) - temp2);
	temp2 = (xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]);
	temp = za + temp2;
	zb += -((temp - za) - temp2);
	za = temp;

	zb += xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx];
	ya = epsA / za;

	temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double yaa = (ya + temp) - temp;
	final double yab = ya - yaa;

	temp = za * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double zaa = (za + temp) - temp;
	final double zab = za - zaa;


	yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za;

	yb += (((-epsA) * zb) / za) / za;
	yb += epsB / za;
}:if (idx == 0) {


	final double $14 = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx])));

	ya = epsA * $14;
	yb = epsB * $14;
} else {
	double $15 = xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx];
	double $16 = 1.0 + $15;
	double $17 = -(($16 - 1.0) - $15);
	$15 = (xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx]);
	temp = $16 + $15;
	$17 += -((temp - $16) - $15);
	$16 = temp;

	$17 += xb * org.apache.commons.math.util.FastMath.TANGENT_TABLE_B[idx];
	ya = epsA / $16;

	temp = ya * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double $18 = (ya + temp) - temp;
	final double $19 = ya - $18;

	temp = $16 * org.apache.commons.math.util.FastMath.HEX_40000000;
	final double $20 = ($16 + temp) - temp;
	final double $21 = $16 - $20;


	yb = ((((epsA - ($18 * $20)) - ($18 * $21)) - ($19 * $20)) - ($19 * $21)) / $16;

	yb += (((-epsA) * $17) / $16) / $16;
	yb += epsB / $16;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (scaledExponent > (-53)) {



	mantissa = mantissa | (1L << 52);


	final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if (mostSignificantLostBit != 0) {

		mantissa++;
	}
	return java.lang.Double.longBitsToDouble(sign | mantissa);

} else {

	return sign == 0L ? 0.0 : -0.0;
}:if (scaledExponent > (-53)) {



	mantissa = mantissa | (1L << 52);


	final long $6 = mantissa & (1L << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if ($6 != 0) {

		mantissa++;
	}
	return java.lang.Double.longBitsToDouble(sign | mantissa);

} else {

	return sign == 0L ? 0.0 : -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.length != dimension) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
}:if (c.length != this.dimension) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, this.dimension);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
}:if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math.util.FastMath.F_3_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((sign >= 0) && 
(magnitude == java.lang.Byte.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((byte) (-magnitude));
}:if ((sign >= 0) && 
(magnitude == java.lang.Byte.MIN_VALUE)) {
	throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((byte) (-magnitude));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (exponent == 0) {


	while ((mantissa >>> 23) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0x7fffff;

	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}}:if (exponent == 0) {


	while ((mantissa >>> 23) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0x7fffff;

	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return false;
}:if (this.states[index] == org.apache.commons.math.util.OpenIntToDoubleHashMap.FREE) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (fraction < 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {

	if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
	unscaled) / 2.0)) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {
		unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
	}
}:if (fraction < 0.5) {
	unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
} else {

	if ((org.apache.commons.math.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math.util.FastMath.floor(java.lang.Math.floor(
	unscaled) / 2.0)) {
		unscaled = org.apache.commons.math.util.FastMath.floor(unscaled);
	} else {
		unscaled = org.apache.commons.math.util.FastMath.ceil(unscaled);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prod2A++;
}:if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prod2A++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Byte.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((byte) (-magnitude));
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Byte.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((byte) (-magnitude));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a < 0) {
	if (b < 0) {

		if ((java.lang.Long.MIN_VALUE - b) <= a) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	} else {

		ret = a + b;
	}
} else {




	if (a <= (java.lang.Long.MAX_VALUE - b)) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
}:if (a < 0) {
	if (b < 0) {

		if ((java.lang.Long.MIN_VALUE - b) <= a) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
		}
	} else {

		ret = a + b;
	}
} else {




	if (a <= (java.lang.Long.MAX_VALUE - b)) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math.exception.MathArithmeticException(pattern, a, b);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n >= maxIterations) {
	throw new org.apache.commons.math.exception.MaxCountExceededException(org.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, 
	maxIterations, x);
}:if (n >= maxIterations) {
	throw new org.apache.commons.math.exception.MaxCountExceededException(org.apache.commons.math.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, 
	maxIterations, x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x * x) > 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}:if ((x * x) > 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((y < 0) || ((1 / y) < 0)) {
	return -java.lang.Math.PI;
}:if ((y < 0) || ((1 / y) < 0)) {
	return -java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Double.isNaN(result)) {


	result = 0;
	for (int i = 0; i < len; ++i) {
		result += a[i] * b[i];
	}
}:if (java.lang.Double.isNaN(result)) {


	result = 0;
	for (int $1 = 0; $1 < len; ++$1) {
		result += a[$1] * b[$1];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (oldStates[i] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	final int key = oldKeys[i];
	final int index = org.apache.commons.math.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, key, newMask);
	newKeys[index] = key;
	newValues[index] = oldValues[i];
	newStates[index] = org.apache.commons.math.util.OpenIntToFieldHashMap.FULL;
}:if (oldStates[i] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {
	final int $2 = oldKeys[i];
	final int $3 = org.apache.commons.math.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, $2, newMask);
	newKeys[$3] = $2;
	newValues[$3] = oldValues[i];
	newStates[$3] = org.apache.commons.math.util.OpenIntToFieldHashMap.FULL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index + 1) > numElements) {
	numElements = index + 1;
}:if ((index + 1) > this.numElements) {
	this.numElements = index + 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] < previous) {
	break ITEM;
}:if (val[index] < previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x < (-20)) {
	return org.apache.commons.math.util.FastMath.exp(-x) / 2.0;
}:if (x < (-20)) {
	return org.apache.commons.math.util.FastMath.exp(-x) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {
	hiPrec[0] /= 2.85040095144011776E17;
	hiPrec[1] /= 2.85040095144011776E17;
}:if (hiPrec != null) {
	hiPrec[0] /= 2.85040095144011776E17;
	hiPrec[1] /= 2.85040095144011776E17;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((bits & 0x7ff0000000000000L) == 0) {

	if (x == 0) {

		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.NEGATIVE_INFINITY;
	}


	bits <<= 1;
	while ((bits & 0x10000000000000L) == 0) {
		exp--;
		bits <<= 1;
	} 
}:if ((bits & 0x7ff0000000000000L) == 0) {

	if (x == 0) {

		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.NEGATIVE_INFINITY;
	}


	bits <<= 1;
	while ((bits & 0x10000000000000L) == 0) {
		exp--;
		bits <<= 1;
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.Float.isInfinite(x)) {
	return java.lang.Float.POSITIVE_INFINITY;
}:if (java.lang.Float.isInfinite(x)) {
	return java.lang.Float.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (leftPlane) {

	final double pia = 1.5707963267948966 * 2;
	final double pib = 6.123233995736766E-17 * 2;

	za = pia - result;
	zb = -((za - pia) + result);
	zb += pib - resultb;

	result = za + zb;
	resultb = -((result - za) - zb);
}:if (leftPlane) {

	final double $11 = 1.5707963267948966 * 2;
	final double $12 = 6.123233995736766E-17 * 2;

	za = $11 - result;
	zb = -((za - $11) + result);
	zb += $12 - resultb;

	result = za + zb;
	resultb = -((result - za) - zb);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a <= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}:if (a <= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((k == 1) || (k == (n - 1))) {
	return org.apache.commons.math.util.FastMath.log(n);
}:if ((k == 1) || (k == (n - 1))) {
	return org.apache.commons.math.util.FastMath.log(n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) {


		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this == other) {
	return true;
}:if (this == other) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (hiPrec != null) {

	double tmp = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000;
	double aa = (epsilon + tmp) - tmp;
	double ab = epsilon - aa;
	double xa = aa;
	double xb = ab;


	double numer = bits & 0x3ffffffffffL;
	double denom = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L);
	aa = (numer - (xa * denom)) - (xb * denom);
	xb += aa / denom;


	double ya = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0];
	double yb = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1];

	for (int i = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 2; i >= 0; i--) {

		aa = ya * xa;
		ab = ((ya * xb) + (yb * xa)) + (yb * xb);

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;


		aa = ya + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[i][0];
		ab = yb + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[i][1];

		tmp = aa * org.apache.commons.math.util.FastMath.HEX_40000000;
		ya = (aa + tmp) - tmp;
		yb = (aa - ya) + ab;
	}


	aa = ya * xa;
	ab = ((ya * xb) + (yb * xa)) + (yb * xb);







	lnza = aa + ab;
	lnzb = -((lnza - aa) - ab);
} else {


	lnza = -0.16624882440418567;
	lnza = (lnza * epsilon) + 0.19999954120254515;
	lnza = (lnza * epsilon) + (-0.2499999997677497);
	lnza = (lnza * epsilon) + 0.3333333333332802;
	lnza = (lnza * epsilon) + (-0.5);
	lnza = (lnza * epsilon) + 1.0;
	lnza = lnza * epsilon;
}:if (hiPrec != null) {

	double $42 = epsilon * org.apache.commons.math.util.FastMath.HEX_40000000;
	double $43 = (epsilon + $42) - $42;
	double $44 = epsilon - $43;
	double $45 = $43;
	double $46 = $44;


	double $47 = bits & 0x3ffffffffffL;
	double $48 = org.apache.commons.math.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L);
	$43 = ($47 - ($45 * $48)) - ($46 * $48);
	$46 += $43 / $48;


	double $49 = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][0];
	double $50 = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 1][1];

	for (int $51 = org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF.length - 2; $51 >= 0; $51--) {

		$43 = $49 * $45;
		$44 = (($49 * $46) + ($50 * $45)) + ($50 * $46);

		$42 = $43 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$49 = ($43 + $42) - $42;
		$50 = ($43 - $49) + $44;


		$43 = $49 + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[$51][0];
		$44 = $50 + org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF[$51][1];

		$42 = $43 * org.apache.commons.math.util.FastMath.HEX_40000000;
		$49 = ($43 + $42) - $42;
		$50 = ($43 - $49) + $44;
	}


	$43 = $49 * $45;
	$44 = (($49 * $46) + ($50 * $45)) + ($50 * $46);







	lnza = $43 + $44;
	lnzb = -((lnza - $43) - $44);
} else {


	lnza = -0.16624882440418567;
	lnza = (lnza * epsilon) + 0.19999954120254515;
	lnza = (lnza * epsilon) + (-0.2499999997677497);
	lnza = (lnza * epsilon) + 0.3333333333332802;
	lnza = (lnza * epsilon) + (-0.5);
	lnza = (lnza * epsilon) + 1.0;
	lnza = lnza * epsilon;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) || (d == 0)) {
	return d;
}:if ((java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) || (d == 0)) {
	return d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
	break;
}:if ((states[index] != org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Short.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((short) (-magnitude));
	}}:if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Short.MIN_VALUE)) {
		throw new org.apache.commons.math.exception.MathArithmeticException(org.apache.commons.math.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((short) (-magnitude));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}:if (states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (x == 0) {
	return java.lang.Math.PI / 2.0;
}:if (x == 0) {
	return java.lang.Math.PI / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((xabs < rdwarf) || (xabs > agiant)) {
	if (xabs > rdwarf) {
		if (xabs > x1max) {
			double r = x1max / xabs;
			s1 = 1 + ((s1 * r) * r);
			x1max = xabs;
		} else {
			double r = xabs / x1max;
			s1 += r * r;
		}
	} else {
		if (xabs > x3max) {
			double r = x3max / xabs;
			s3 = 1 + ((s3 * r) * r);
			x3max = xabs;
		} else {
			if (xabs != 0) {
				double r = xabs / x3max;
				s3 += r * r;
			}
		}
	}
} else {
	s2 += xabs * xabs;
}:if ((xabs < rdwarf) || (xabs > agiant)) {
	if (xabs > rdwarf) {
		if (xabs > x1max) {
			double $22 = x1max / xabs;
			s1 = 1 + ((s1 * $22) * $22);
			x1max = xabs;
		} else {
			double $23 = xabs / x1max;
			s1 += $23 * $23;
		}
	} else {
		if (xabs > x3max) {
			double $24 = x3max / xabs;
			s3 = 1 + ((s3 * $24) * $24);
			x3max = xabs;
		} else {
			if (xabs != 0) {
				double $25 = xabs / x3max;
				s3 += $25 * $25;
			}
		}
	}
} else {
	s2 += xabs * xabs;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (len != b.length) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(len, b.length);
}:if (len != b.length) {
	throw new org.apache.commons.math.exception.DimensionMismatchException(len, b.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (n < 21) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.factorial(n));
}:if (n < 21) {
	return org.apache.commons.math.util.FastMath.log(org.apache.commons.math.util.ArithmeticUtils.factorial(n));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (val[index] >= previous) {
	break ITEM;
}:if (val[index] >= previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (front) {
	startIndex += i;
}:if (front) {
	this.startIndex += i;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (b != 0) {
	p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
	q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
}:if (b != 0) {
	p2 = ((a / scaleFactor) * p1) + (p0 / lastScaleFactor);
	q2 = ((a / scaleFactor) * q1) + (q0 / lastScaleFactor);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.Long.MIN_VALUE / b) <= a) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();

}:if ((java.lang.Long.MIN_VALUE / b) <= a) {
	ret = a * b;
} else {
	throw new org.apache.commons.math.exception.MathArithmeticException();

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((e & 0x1) != 0) {
	result *= k2p;
}:if ((e & 0x1) != 0) {
	result *= k2p;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (((bits & 0x8000000000000000L) != 0) || (x != x)) {
	if (x != 0.0) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NaN;
		}

		return java.lang.Double.NaN;
	}
}:if (((bits & 0x8000000000000000L) != 0) || (x != x)) {
	if (x != 0.0) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NaN;
		}

		return java.lang.Double.NaN;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s2 >= x3max) {
	norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
} else {
	norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
}:if (s2 >= x3max) {
	norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
} else {
	norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (t > 0) {
	u = -t;
} else {
	v = t;
}:if (t > 0) {
	u = -t;
} else {
	v = t;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigFraction#floatValue
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 4
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for result(class spoon.support.reflect.code.CtLocalVariableImpl) (/script/jGenProg_Defects4J_Math_36/src/main/java/org/apache/commons/math/fraction/BigFraction.java:732)
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for result(class spoon.support.reflect.code.CtLocalVariableImpl) (/script/jGenProg_Defects4J_Math_36/src/main/java/org/apache/commons/math/fraction/BigFraction.java:732)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:363)
	at spoon.reflect.visitor.filter.SiblingsFunction.apply(SiblingsFunction.java:58)
	at spoon.reflect.visitor.filter.SiblingsFunction.apply(SiblingsFunction.java:23)
	at spoon.reflect.visitor.chain.CtQueryImpl$LazyFunctionWrapper._accept(CtQueryImpl.java:492)
	at spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep.accept(CtQueryImpl.java:307)
	at spoon.reflect.visitor.chain.CtQueryImpl.forEach(CtQueryImpl.java:93)
	at spoon.reflect.visitor.filter.LocalVariableScopeFunction.apply(LocalVariableScopeFunction.java:55)
	at spoon.reflect.visitor.filter.LocalVariableScopeFunction.apply(LocalVariableScopeFunction.java:32)
	at spoon.reflect.visitor.chain.CtQueryImpl$LazyFunctionWrapper._accept(CtQueryImpl.java:492)
	at spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep.accept(CtQueryImpl.java:307)
	at spoon.reflect.visitor.chain.CtQueryImpl.first(CtQueryImpl.java:136)
	at spoon.reflect.visitor.chain.CtQueryImpl.first(CtQueryImpl.java:119)
	at spoon.refactoring.CtRenameLocalVariableRefactoring.detectNameConflicts(CtRenameLocalVariableRefactoring.java:235)
	at spoon.refactoring.AbstractRenameRefactoring.detectIssues(AbstractRenameRefactoring.java:45)
	at spoon.refactoring.AbstractRenameRefactoring.refactor(AbstractRenameRefactoring.java:37)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:166)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:60)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 26.676
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 4
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 2305.972


Node: ed1b605463eb



Date: Tue Nov 12 05:22:42 EST 2019

cd /script/jGenProg_Defects4J_Math_36;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-36 \
	-failing org.apache.commons.math.fraction.BigFractionTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Math_36/target/classes/:/script/jGenProg_Defects4J_Math_36/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

