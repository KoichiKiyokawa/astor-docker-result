Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 03:28:37,644 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 03:28:37,650 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 03:28:37,651 main:382 - The compliance of the JVM is:  7
[INFO] 03:28:37,654 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-11  -failing  org.apache.commons.math3.distribution.MultivariateNormalDistributionTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Math_11/target/classes/:/script/jGenProg_Defects4J_Math_11/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 03:28:37,658 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_11/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_11/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:104) - mode is Leven
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 758
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_11/./output_astor/AstorMain-Math-11//bin//default from 758 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_11/./output_astor/AstorMain-Math-11//bin//default, /script/jGenProg_Defects4J_Math_11/target/classes/, /script/jGenProg_Defects4J_Math_11/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveRemainder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828Cycle
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.DiagonalMatrixTest#testSetNonDiagonalEntry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4573, fails: 46, GZoltar suspicious 32909, with positive susp 3181
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4573
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 1000 with susp > 0.1, we consider: 1000
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 8952170 milliseconds (8952 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_11/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_11/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_11/target/classes/, /script/jGenProg_Defects4J_Math_11/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 696
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.2211629342323457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.2211629342323457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.2211629342323457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.2211629342323457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=68, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=69, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=71, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=72, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=73, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=74, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=75, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=76, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=77, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=78, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=79, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=81, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=53, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=54, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=55, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=56, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=57, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=58, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=59, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=60, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=39, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=40, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=43, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=44, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=45, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=46, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=47, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunction()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction;, lineNumber=51, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunctionGradient()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient;, lineNumber=66, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/gradient/CircleScalar;)Ljava/util/ArrayList;, lineNumber=31, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.16427570345801806]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.16427570345801806]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=116, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=117, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=118, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=120, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=121, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=113, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=114, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=125, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=126, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=130, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/LineSearch;)Lorg/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer;, lineNumber=35, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 1000,  319
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 319
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 319, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_11/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 8952170
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.distribution.MultivariateNormalDistributionTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-11
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_11/target/classes/:/script/jGenProg_Defects4J_Math_11/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite#getRemB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite#getRemB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficientLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorial
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#factorialLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#isPowerOfTwo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#isPowerOfTwo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#getRoundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#getRoundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#getScale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#getScale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#negate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#negate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#reciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#reciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#bigDecimalValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#bigDecimalValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#getField
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#getField
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigRealField#getInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigRealField#getInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigRealField#getOne
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigRealField#getOne
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigRealField#getZero
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigRealField#getZero
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigRealField#getRuntimeClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigRealField#getRuntimeClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#getDefaultNumberFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#getDefaultNumberFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#getDefaultNumberFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#getDefaultNumberFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#formatDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#formatDouble
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#getField
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#getField
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#add
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#subtract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#negate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#negate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#multiply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#divide
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#reciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#reciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#byteValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#byteValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#shortValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#shortValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#intValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#intValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#longValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#longValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#floatValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#floatValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#doubleValue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#toString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#toString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#isInfinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#isInfinite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#isNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64#isNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64Field#getInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64Field#getInstance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64Field#getZero
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64Field#getZero
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64Field#getOne
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64Field#getOne
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64Field#getRuntimeClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64Field#getRuntimeClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DefaultTransformer#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#doubleHighPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#doubleHighPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sqrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sqrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#signum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#signum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#signum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#signum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextUp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextUp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextUp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextUp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#random
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#random
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log1p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toDegrees
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toDegrees
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#abs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ulp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#nextAfter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#rint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#min
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#hypot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#IEEEremainder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#IEEEremainder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#getExponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#getExponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#getExponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#getExponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite#getK
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite#getK
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite#getRemA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite#getRemA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite#getRemB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite#getRemB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadExpIntA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadExpIntA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadExpIntB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadExpIntB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadExpFracA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadExpFracA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadExpFracB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadExpFracB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadLnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathLiteralArrays#loadLnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#getMaximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#getMaximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#canIncrement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#canIncrement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationEvent#getIterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationEvent#getIterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager#getIterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager#getIterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager#getMaxIterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager#getMaxIterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#distance1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#distance1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#distance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#distance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#distanceInf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#distanceInf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: 1#compare
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: 1#compare
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#copyOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#copyOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#copyOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#copyOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#hash
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#hash
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#hash
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#hash
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#normalizeAngle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#normalizeAngle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#reduce
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#reduce
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathUtils#copySign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getDimension
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getDimension
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getSize
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getSize
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getSizes
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getSizes
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#toString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#toString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#nextPowerOfTwo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#nextPowerOfTwo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#perturb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#perturb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#probe
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#probe
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#changeIndexSign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#changeIndexSign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#remove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#remove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#shouldGrowTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#shouldGrowTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#hashOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#hashOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#hasNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#hasNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#computeCapacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#findInsertionIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#containsKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#shouldGrowTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#shouldGrowTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#buildArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#buildArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#getKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#getKey
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#compareTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsWithRelativeTolerance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsWithRelativeTolerance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equalsIncludingNaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#round
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#representableDelta
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#representableDelta
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElementRolling
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElementRolling
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getContractionCriteria
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getContractionCriteria
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getContractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getContractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getExpansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getExpansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getInternalLength
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getInternalLength
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getInternalValues
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getInternalValues
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getStartIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#getStartIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#compute
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#compute
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#shouldContract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#shouldContract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#shouldContract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#shouldContract
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#containsClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#containsClass
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#containsTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#containsTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#getTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#getTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#putTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#putTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#removeTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#removeTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#classes
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#classes
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transformers
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transformers
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((int) (s)):return ((int) (s))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, n - k):return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return finalRemB:return this.finalRemB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.log(n):return org.apache.commons.math3.util.FastMath.log(n)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return lcm:return lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta):return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y):return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (internalArray.length - numElements) > contractionCriterion:return (this.internalArray.length - this.numElements) > this.contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.abs(a + b):return org.apache.commons.math3.util.FastMath.abs(a + b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return a <= b ? b : a:return a <= b ? b : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE:return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return k.pow(e):return k.pow(e)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.Decimal64Field.getInstance():return org.apache.commons.math3.util.Decimal64Field.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Float.intBitsToFloat(sign | mantissa):return java.lang.Float.intBitsToFloat(sign | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow(-x, y) : -org.apache.commons.math3.util.FastMath.pow(-x, y):return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow(-x, y) : -org.apache.commons.math3.util.FastMath.pow(-x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return count:return this.count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION):return org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return 1:return 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return n:return n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.Decimal64(this.value + a.value):return new org.apache.commons.math3.util.Decimal64(this.value + a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((float) (direction)):return ((float) (direction))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.POSITIVE_INFINITY:return java.lang.Double.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.BigRealField.getInstance():return org.apache.commons.math3.util.BigRealField.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((java.lang.Number) (o)).doubleValue():return ((java.lang.Number) (o)).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return "Double.NaN,":return "Double.NaN,"
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.Precision.equals(x, y, 1) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps):return org.apache.commons.math3.util.Precision.equals(x, y, 1) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.log(x, null):return org.apache.commons.math3.util.FastMath.log(x, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return y + 1.0:return y + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((byte) (-magnitude)):return ((byte) (-magnitude))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (key == null ? 
oP.key == null : 
key.equals(oP.key)) && 
(value == null ? 
oP.value == null : 
value.equals(oP.value)):return (this.key == null ? 
oP.key == null : 
this.key.equals(oP.key)) && 
(this.value == null ? 
oP.value == null : 
this.value.equals(oP.value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps):return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.clone():return org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return internalArray[startIndex + index]:return this.internalArray[this.startIndex + index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return map.remove(key):return this.map.remove(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return 401993047:return 401993047
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return negative ? -absAsinh : absAsinh:return negative ? -absAsinh : absAsinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((-1.0) + hiPrec[0]) + hiPrec[1]:return ((-1.0) + hiPrec[0]) + hiPrec[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new Iterator():return new Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return finalK:return this.finalK
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.Decimal64(this.value / a.value):return new org.apache.commons.math3.util.Decimal64(this.value / a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.longBitsToDouble(xl):return java.lang.Double.longBitsToDouble(xl)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.MathArrays.copyOf(source, source.length):return org.apache.commons.math3.util.MathArrays.copyOf(source, source.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return unscaled:return unscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.BigReal(d.negate()):return new org.apache.commons.math3.util.BigReal(this.d.negate())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.BigReal(d.divide(a.d, scale, roundingMode)):return new org.apache.commons.math3.util.BigReal(this.d.divide(a.d, this.scale, this.roundingMode))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.Decimal64(this.value - a.value):return new org.apache.commons.math3.util.Decimal64(this.value - a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.atan(r, 0, x < 0):return org.apache.commons.math3.util.FastMath.atan(r, 0, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return val:return val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Integer.highestOneBit(i) << 1:return java.lang.Integer.highestOneBit(i) << 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Math.PI / 2.0:return java.lang.Math.PI / 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.util.Arrays.equals(internalArray, other.internalArray):return java.util.Arrays.equals(this.internalArray, other.internalArray)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return max:return max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2:return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY:return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1)):return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return size > ((mask + 1) * org.apache.commons.math3.util.OpenIntToFieldHashMap.LOAD_FACTOR):return this.size > ((this.mask + 1) * org.apache.commons.math3.util.OpenIntToFieldHashMap.LOAD_FACTOR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return false:return false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa):return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return iterations:return this.iterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return contractionCriterion:return this.contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return hash:return hash
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return direction:return direction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return values[current]:return this.values[this.current]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Float.POSITIVE_INFINITY:return java.lang.Float.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.OpenIntToDoubleHashMap.nextPowerOfTwo(capacity):return org.apache.commons.math3.util.OpenIntToDoubleHashMap.nextPowerOfTwo(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return hash & 0x7fffffff:return hash & 0x7fffffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((float) (getContractionCriterion())):return ((float) (getContractionCriterion()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1)):return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.valueOf(o.toString()).doubleValue():return java.lang.Double.valueOf(o.toString()).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.NaN:return java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return indices:return indices
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (z & 1) == 0 ? y : y + 1.0:return (z & 1) == 0 ? y : y + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return magnitude:return magnitude
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(a, b):return org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return value:return this.value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((-0.5) * t) * t:return ((-0.5) * t) * t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return firstRemoved:return firstRemoved
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.util.Arrays.hashCode(value):return java.util.Arrays.hashCode(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return est:return est
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((T[]) (java.lang.reflect.Array.newInstance(field.getRuntimeClass(), length))):return ((T[]) (java.lang.reflect.Array.newInstance(this.field.getRuntimeClass(), length)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return a <= b ? a : b:return a <= b ? a : b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return iterations.getCount():return this.iterations.getCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return values[index]:return this.values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((long) (org.apache.commons.math3.util.FastMath.floor(x + 0.5))):return ((long) (org.apache.commons.math3.util.FastMath.floor(x + 0.5)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ret:return ret
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp):return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return scale:return this.scale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a:return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.MathArrays.checkOrder(val, dir, strict, false):return org.apache.commons.math3.util.MathArrays.checkOrder(val, dir, strict, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return a - (org.apache.commons.math3.util.MathUtils.TWO_PI * org.apache.commons.math3.util.FastMath.floor(((a + org.apache.commons.math3.util.FastMath.PI) - center) / org.apache.commons.math3.util.MathUtils.TWO_PI)):return a - (org.apache.commons.math3.util.MathUtils.TWO_PI * org.apache.commons.math3.util.FastMath.floor(((a + org.apache.commons.math3.util.FastMath.PI) - center) / org.apache.commons.math3.util.MathUtils.TWO_PI))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY:return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY:return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return out:return out
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return totalSize:return this.totalSize
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return stirlingS2[n][k]:return stirlingS2[n][k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return a << shift:return a << shift
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return result:return result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new java.math.BigDecimal(
java.lang.Double.toString(x)).setScale(
scale, roundingMethod).doubleValue():return new java.math.BigDecimal(
java.lang.Double.toString(x)).setScale(
scale, roundingMethod).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return next >= 0:return this.next >= 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_3_4:return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_3_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return dimension:return this.dimension
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return keys[current]:return this.keys[this.current]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps):return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return a:return a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return index:return index
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return f > 0 ? 0.0F : -0.0F:return f > 0 ? 0.0F : -0.0F
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A.clone():return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return lores:return lores
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.pow(-x, y):return org.apache.commons.math3.util.FastMath.pow(-x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (isEqual && (!java.lang.Double.isNaN(x))) && (!java.lang.Double.isNaN(y)):return (isEqual && (!java.lang.Double.isNaN(x))) && (!java.lang.Double.isNaN(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return resultHigh + resultLow:return resultHigh + resultLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.Precision.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP):return org.apache.commons.math3.util.Precision.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1):return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return 0.5 * org.apache.commons.math3.util.FastMath.exp(x):return 0.5 * org.apache.commons.math3.util.FastMath.exp(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index):return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return sum:return sum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return negative ? -absAtanh : absAtanh:return negative ? -absAtanh : absAtanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return sb.toString():return sb.toString()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return f * java.lang.Float.intBitsToFloat((n + 127) << 23):return f * java.lang.Float.intBitsToFloat((n + 127) << 23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return x < 0.0F ? -x : x == 0.0F ? 0.0F : x:return x < 0.0F ? -x : x == 0.0F ? 0.0F : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return -1.0:return -1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.Decimal64(n * this.value):return new org.apache.commons.math3.util.Decimal64(n * this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (((j << 2) + j) + perturb) + 1:return (((j << 2) + j) + perturb) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return -1:return -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((float) (expansionFactor)):return ((float) (this.expansionFactor))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return count < maximalCount:return this.count < this.maximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return numElements:return this.numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((float) (value)):return ((float) (this.value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.BigReal(d.add(a.d)):return new org.apache.commons.math3.util.BigReal(this.d.add(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return 0:return 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(keys, states, key, mask):return org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(this.keys, this.states, key, this.mask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return map.get(key):return this.map.get(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.abs(x):return org.apache.commons.math3.util.FastMath.abs(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ys[0] + ys[1]:return ys[0] + ys[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa:return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.atan(ra, rb, false):return org.apache.commons.math3.util.FastMath.atan(ra, rb, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((int) (value)):return ((int) (this.value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ra + rb:return ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ya + yb:return ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.BigReal(d.subtract(a.d)):return new org.apache.commons.math3.util.BigReal(this.d.subtract(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,":return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,"
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.Decimal64(this.value * a.value):return new org.apache.commons.math3.util.Decimal64(this.value * a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return relativeDifference <= eps:return relativeDifference <= eps
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1)):return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return size > ((mask + 1) * org.apache.commons.math3.util.OpenIntToDoubleHashMap.LOAD_FACTOR):return this.size > ((this.mask + 1) * org.apache.commons.math3.util.OpenIntToDoubleHashMap.LOAD_FACTOR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((byte) (value)):return ((byte) (this.value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return d.doubleValue():return this.d.doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return b:return b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return 1.0:return 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.BigReal.ONE:return org.apache.commons.math3.util.BigReal.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (-java.lang.Math.PI) / 2.0:return (-java.lang.Math.PI) / 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.Decimal64.class:return org.apache.commons.math3.util.Decimal64.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((int) (m)):return ((int) (m))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.BigRealField.LazyHolder.INSTANCE:return org.apache.commons.math3.util.BigRealField.LazyHolder.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.MathArrays.copyOf(counter):return org.apache.commons.math3.util.MathArrays.copyOf(this.counter)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1)):return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A.clone():return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return map.containsKey(key):return this.map.containsKey(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B.clone():return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE:return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientLog(n, n - k):return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientLog(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return logSum:return logSum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return f:return f
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY:return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return elementArray:return elementArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return internalArray.length:return this.internalArray.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ++count:return ++this.count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY):return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.log(x) / org.apache.commons.math3.util.FastMath.log(base):return org.apache.commons.math3.util.FastMath.log(x) / org.apache.commons.math3.util.FastMath.log(base)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return roundingMode:return this.roundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.BigReal(d.multiply(new java.math.BigDecimal(n))):return new org.apache.commons.math3.util.BigReal(this.d.multiply(new java.math.BigDecimal(n)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_4:return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return nf:return nf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x):return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((int) (org.apache.commons.math3.util.FastMath.floor(x + 0.5F))):return ((int) (org.apache.commons.math3.util.FastMath.floor(x + 0.5F)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (h ^ (h >>> 7)) ^ (h >>> 4):return (h ^ (h >>> 7)) ^ (h >>> 4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k):return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (n > 0) && ((n & (n - 1)) == 0):return (n > 0) && ((n & (n - 1)) == 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return d.equals(((org.apache.commons.math3.util.BigReal) (other)).d):return this.d.equals(((org.apache.commons.math3.util.BigReal) (other)).d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((float) (org.apache.commons.math3.util.Precision.roundUnscaled(x * factor, sign, roundingMethod))) / factor:return ((float) (org.apache.commons.math3.util.Precision.roundUnscaled(x * factor, sign, roundingMethod))) / factor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return x < 0L ? -x : x:return x < 0L ? -x : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return counter[dim]:return this.counter[dim]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, maxIterations):return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, maxIterations)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0]:return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return -java.lang.Math.PI:return -java.lang.Math.PI
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.BigReal(d.multiply(a.d)):return new org.apache.commons.math3.util.BigReal(this.d.multiply(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE:return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (a - (p * org.apache.commons.math3.util.FastMath.floor((a - offset) / p))) - offset:return (a - (p * org.apache.commons.math3.util.FastMath.floor((a - offset) / p))) - offset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return discarded:return discarded
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return map.put(key, transformer):return this.map.put(key, transformer)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.StrictMath.IEEEremainder(dividend, divisor):return java.lang.StrictMath.IEEEremainder(dividend, divisor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((int) ((java.lang.Double.doubleToLongBits(d) >>> 52) & 0x7ff)) - 1023:return ((int) ((java.lang.Double.doubleToLongBits(d) >>> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return missingEntries:return this.missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return -magnitude:return -magnitude
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_3_4:return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_3_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return maximalCount:return this.maximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return previous:return previous
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B.clone():return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.exp(org.apache.commons.math3.util.ArithmeticUtils.factorialLog(n)) + 0.5):return org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.exp(org.apache.commons.math3.util.ArithmeticUtils.factorialLog(n)) + 0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.Decimal64(-this.value):return new org.apache.commons.math3.util.Decimal64(-this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return size:return this.size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2):return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k)):return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return output:return output
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return iterations.getMaximalCount():return this.iterations.getMaximalCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return capacity:return capacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY):return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (-index) - 1:return (-index) - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2:return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale.getDefault()):return org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index):return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.sinQ(a, b):return org.apache.commons.math3.util.FastMath.sinQ(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Math.PI / 2:return java.lang.Math.PI / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return x < 0.0 ? -x : x == 0.0 ? 0.0 : x:return x < 0.0 ? -x : x == 0.0 ? 0.0 : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.MultidimensionalCounter.Iterator():return new org.apache.commons.math3.util.MultidimensionalCounter.Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((short) (-magnitude)):return ((short) (-magnitude))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Double.longBitsToDouble(java.lang.Double.doubleToLongBits(x) ^ 1)):return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Double.longBitsToDouble(java.lang.Double.doubleToLongBits(x) ^ 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa):return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false):return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.isInfinite(value):return java.lang.Double.isInfinite(this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((int) (bl)):return ((int) (bl))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (-u) * (1L << k):return (-u) * (1L << k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE):return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((long) (value)):return ((long) (this.value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((short) (value)):return ((short) (this.value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.atan(ra, rb, x < 0):return org.apache.commons.math3.util.FastMath.atan(ra, rb, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Math.random():return java.lang.Math.random()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return a + b:return a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (isEqual && (!java.lang.Float.isNaN(x))) && (!java.lang.Float.isNaN(y)):return (isEqual && (!java.lang.Float.isNaN(x))) && (!java.lang.Float.isNaN(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna):return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_4:return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE):return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.Decimal64.ONE:return org.apache.commons.math3.util.Decimal64.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.util.Arrays.hashCode(hashData):return java.util.Arrays.hashCode(hashData)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.abs(y):return org.apache.commons.math3.util.FastMath.abs(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.OpenIntToFieldHashMap.nextPowerOfTwo(capacity):return org.apache.commons.math3.util.OpenIntToFieldHashMap.nextPowerOfTwo(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return p:return p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2:return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return map.values():return this.map.values()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (internalArray.length / ((float) (numElements))) > contractionCriterion:return (this.internalArray.length / ((float) (this.numElements))) > this.contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.Decimal64.ZERO:return org.apache.commons.math3.util.Decimal64.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return finalRemA:return this.finalRemA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return startIndex:return this.startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return y * x:return y * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.isNaN(value):return java.lang.Double.isNaN(this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.Decimal64Field.INSTANCE:return org.apache.commons.math3.util.Decimal64Field.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n]:return org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n]):return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a:return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((java.lang.Float.floatToIntBits(f) >>> 23) & 0xff) - 127:return ((java.lang.Float.floatToIntBits(f) >>> 23) & 0xff) - 127
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return norm:return norm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52):return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.NEGATIVE_INFINITY:return java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.MathArrays.copyOf(size):return org.apache.commons.math3.util.MathArrays.copyOf(this.size)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return x < 0 ? -x : x:return x < 0 ? -x : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return number:return number
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return true:return true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return d.hashCode():return this.d.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return est + err:return est + err
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return count + c[last]:return count + c[this.last]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return internalArray:return this.internalArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return y:return y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return d > 0 ? 0.0 : -0.0:return d > 0 ? 0.0 : -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.longBitsToDouble(sign | mantissa):return java.lang.Double.longBitsToDouble(sign | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.compare(this.value, o.value):return java.lang.Double.compare(this.value, o.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return 0.0:return 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((int) (v ^ (v >>> 32))):return ((int) (v ^ (v >>> 32)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, k)):return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, k))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k):return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.abs(u) + org.apache.commons.math3.util.FastMath.abs(v):return org.apache.commons.math3.util.FastMath.abs(u) + org.apache.commons.math3.util.FastMath.abs(v)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.BigReal.class:return org.apache.commons.math3.util.BigReal.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.expm1(x, null):return org.apache.commons.math3.util.FastMath.expm1(x, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.log(a + org.apache.commons.math3.util.FastMath.sqrt((a * a) - 1)):return org.apache.commons.math3.util.FastMath.log(a + org.apache.commons.math3.util.FastMath.sqrt((a * a) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return f.evaluate(internalArray, startIndex, numElements):return f.evaluate(this.internalArray, this.startIndex, this.numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(keys, states, key, mask):return org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(this.keys, this.states, key, this.mask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null):return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.BigReal(java.math.BigDecimal.ONE.divide(d, scale, roundingMode)):return new org.apache.commons.math3.util.BigReal(java.math.BigDecimal.ONE.divide(this.d, this.scale, this.roundingMode))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return x:return x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return !((x == null) ^ (y == null)):return !((x == null) ^ (y == null))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((key != 0) || (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL)) && (keys[index] == key):return ((key != 0) || (this.states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL)) && (this.keys[index] == key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Float.intBitsToFloat(java.lang.Float.floatToIntBits(x) ^ 1)):return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Float.intBitsToFloat(java.lang.Float.floatToIntBits(x) ^ 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE:return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new java.lang.Double(value).hashCode():return new java.lang.Double(value).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.Precision.equalsIncludingNaN(x, y) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps):return org.apache.commons.math3.util.Precision.equalsIncludingNaN(x, y) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return other instanceof org.apache.commons.math3.util.DefaultTransformer:return other instanceof org.apache.commons.math3.util.DefaultTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k):return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.Decimal64(1.0 / this.value):return new org.apache.commons.math3.util.Decimal64(1.0 / this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Float.NaN:return java.lang.Float.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1):return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.sqrt(sum):return org.apache.commons.math3.util.FastMath.sqrt(sum)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x):return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.Precision.equals(x, y, 1):return org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return x * y:return x * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Math.sqrt(a):return java.lang.Math.sqrt(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return doRemove(index):return doRemove(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (0.5 * t) * t:return (0.5 * t) * t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return d.compareTo(a.d):return this.d.compareTo(a.d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return key:return this.key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return map.keySet():return this.map.keySet()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return sign == 0L ? 0.0 : -0.0:return sign == 0L ? 0.0 : -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.FastMath.floor(result + 0.5):return org.apache.commons.math3.util.FastMath.floor(result + 0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.toString(value):return java.lang.Double.toString(this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (x + originalDelta) - x:return (x + originalDelta) - x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return new org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator():return new org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return hN:return hN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Math.PI:return java.lang.Math.PI
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
that.value):return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
that.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return (1L << (n - 1)) - 1L:return (1L << (n - 1)) - 1L
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return -0.0:return -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return map.containsValue(value):return this.map.containsValue(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return ((key != 0) || (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL)) && (keys[index] == key):return ((key != 0) || (this.states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL)) && (this.keys[index] == key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return org.apache.commons.math3.util.BigReal.ZERO:return org.apache.commons.math3.util.BigReal.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return toAppendTo:return toAppendTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return sign == 0 ? 0.0F : -0.0F:return sign == 0 ? 0.0F : -0.0F
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - return d:return this.d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExceptionContext#buildMessage
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 2
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for len(class spoon.support.reflect.code.CtLocalVariableImpl) (/script/jGenProg_Defects4J_Math_11/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java:173)
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for len(class spoon.support.reflect.code.CtLocalVariableImpl) (/script/jGenProg_Defects4J_Math_11/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java:173)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:363)
	at spoon.reflect.visitor.filter.SiblingsFunction.apply(SiblingsFunction.java:58)
	at spoon.reflect.visitor.filter.SiblingsFunction.apply(SiblingsFunction.java:23)
	at spoon.reflect.visitor.chain.CtQueryImpl$LazyFunctionWrapper._accept(CtQueryImpl.java:492)
	at spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep.accept(CtQueryImpl.java:307)
	at spoon.reflect.visitor.chain.CtQueryImpl.forEach(CtQueryImpl.java:93)
	at spoon.reflect.visitor.filter.LocalVariableScopeFunction.apply(LocalVariableScopeFunction.java:55)
	at spoon.reflect.visitor.filter.LocalVariableScopeFunction.apply(LocalVariableScopeFunction.java:32)
	at spoon.reflect.visitor.chain.CtQueryImpl$LazyFunctionWrapper._accept(CtQueryImpl.java:492)
	at spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep.accept(CtQueryImpl.java:307)
	at spoon.reflect.visitor.chain.CtQueryImpl.first(CtQueryImpl.java:136)
	at spoon.reflect.visitor.chain.CtQueryImpl.first(CtQueryImpl.java:119)
	at spoon.refactoring.CtRenameLocalVariableRefactoring.detectNameConflicts(CtRenameLocalVariableRefactoring.java:235)
	at spoon.refactoring.AbstractRenameRefactoring.detectIssues(AbstractRenameRefactoring.java:45)
	at spoon.refactoring.AbstractRenameRefactoring.refactor(AbstractRenameRefactoring.java:37)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:166)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:60)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 77.132
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 2
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 4231.621


Node: ca324421c97c



Date: Tue Nov 12 04:39:10 EST 2019

cd /script/jGenProg_Defects4J_Math_11;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-11 \
	-failing org.apache.commons.math3.distribution.MultivariateNormalDistributionTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Math_11/target/classes/:/script/jGenProg_Defects4J_Math_11/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

