Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 01:54:53,062 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 01:54:53,068 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 01:54:53,069 main:382 - The compliance of the JVM is:  7
[INFO] 01:54:53,072 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Chart-11  -failing  org.jfree.chart.util.junit.ShapeUtilitiesTests  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  4  -srcjavafolder  source/  -srctestfolder  tests/  -binjavafolder  build/  -bintestfolder  build-tests/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Chart_11/build/:/script/jGenProg_Defects4J_Chart_11/build-tests/:/script/jGenProg_Defects4J_Chart_11/lib/itext-2.0.6.jar:/script/jGenProg_Defects4J_Chart_11/lib/servlet.jar:/script/jGenProg_Defects4J_Chart_11/lib/junit.jar:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 01:54:53,079 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Chart_11/./source]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Chart_11/./tests]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:104) - mode is Leven
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 702
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Chart_11/./output_astor/AstorMain-Chart-11//bin//default from 702 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Chart_11/./output_astor/AstorMain-Chart-11//bin//default, /script/jGenProg_Defects4J_Chart_11/build/, /script/jGenProg_Defects4J_Chart_11/build-tests/, /script/jGenProg_Defects4J_Chart_11/lib/itext-2.0.6.jar, /script/jGenProg_Defects4J_Chart_11/lib/servlet.jar, /script/jGenProg_Defects4J_Chart_11/lib/junit.jar, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.jfree.chart.util.junit.ShapeUtilitiesTests#testEqualGeneralPaths
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.jfree.chart.util.junit.ShapeUtilitiesTests#testEqualGeneralPaths
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:3621, fails: 2, GZoltar suspicious 22075, with positive susp 19
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 3621
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 19 with susp > 0.1, we consider: 19
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 396290 milliseconds (396 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Chart_11/./source
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Chart_11/./source, compliance level: 4
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Chart_11/build/, /script/jGenProg_Defects4J_Chart_11/build-tests/, /script/jGenProg_Defects4J_Chart_11/lib/itext-2.0.6.jar, /script/jGenProg_Defects4J_Chart_11/lib/servlet.jar, /script/jGenProg_Defects4J_Chart_11/lib/junit.jar, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 580
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 19
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 19,  18
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 18
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 18, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 2.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Chart_11/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= build/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 396290
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= tests/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.jfree.chart.util.junit.ShapeUtilitiesTests
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 4
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Chart-11
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= build-tests/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Chart_11/build/:/script/jGenProg_Defects4J_Chart_11/build-tests/:/script/jGenProg_Defects4J_Chart_11/lib/itext-2.0.6.jar:/script/jGenProg_Defects4J_Chart_11/lib/servlet.jar:/script/jGenProg_Defects4J_Chart_11/lib/junit.jar:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= source/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#set
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#set
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#set
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#set
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#indexOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#indexOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ApplicationFrame#windowClosing
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ApplicationFrame#windowClosing
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#hasDuplicateItems
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#hasDuplicateItems
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#hasDuplicateItems
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#hasDuplicateItems
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BooleanList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BooleanList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: NumberCellRenderer#getTableCellRendererComponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: NumberCellRenderer#getTableCellRendererComponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: NumberCellRenderer#getTableCellRendererComponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: NumberCellRenderer#getTableCellRendererComponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#deepClone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#deepClone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#deepClone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#deepClone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getResource
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getResource
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#convertName
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#convertName
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#convertName
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#convertName
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getResourceAsStream
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getResourceAsStream
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#loadAndInstantiate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#loadAndInstantiate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#isJDK14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#isJDK14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#isJDK14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#isJDK14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#parseVersions
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#parseVersions
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#stringToColor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#stringToColor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createInsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createInsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createInsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createInsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createOutsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createOutsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createOutsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createOutsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateTopInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateTopInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateTopOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateTopOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateBottomInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateBottomInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateBottomOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateBottomOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateLeftInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateLeftInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateLeftOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateLeftOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateRightInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateRightInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateRightOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateRightOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RefineryUtilities#createTablePanel
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RefineryUtilities#createTablePanel
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setPositivePrefix
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setPositivePrefix
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setDaySuffix
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setDaySuffix
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setSecondFormatter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setSecondFormatter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPoint2D
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPoint2D
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePoint2D
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePoint2D
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readAttributedString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readAttributedString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeAttributedString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeAttributedString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createTranslatedShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createTranslatedShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createTranslatedShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createTranslatedShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#rotateShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#rotateShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createLineRegion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createLineRegion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StringUtilities#startsWithIgnoreCase
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StringUtilities#startsWithIgnoreCase
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StringUtilities#endsWithIgnoreCase
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StringUtilities#endsWithIgnoreCase
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index >= this.objects.length) {
	java.lang.Object[] enlarged = new java.lang.Object[index + this.increment];
	java.lang.System.arraycopy(this.objects, 0, enlarged, 0, this.objects.length);
	this.objects = enlarged;
}:if (index >= this.objects.length) {
	java.lang.Object[] $0 = new java.lang.Object[index + this.increment];
	java.lang.System.arraycopy(this.objects, 0, $0, 0, this.objects.length);
	this.objects = $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.util.Arrays.equals(d1, d2)) {
	return false;
}:if (!java.util.Arrays.equals(d1, d2)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p instanceof java.awt.GradientPaint) {
	java.awt.GradientPaint gp = ((java.awt.GradientPaint) (p));
	result = 193;
	result = (37 * result) + gp.getColor1().hashCode();
	result = (37 * result) + gp.getPoint1().hashCode();
	result = (37 * result) + gp.getColor2().hashCode();
	result = (37 * result) + gp.getPoint2().hashCode();
} else 
{



	result = p.hashCode();
}:if (p instanceof java.awt.GradientPaint) {
	java.awt.GradientPaint $0 = ((java.awt.GradientPaint) (p));
	result = 193;
	result = (37 * result) + $0.getColor1().hashCode();
	result = (37 * result) + $0.getPoint1().hashCode();
	result = (37 * result) + $0.getColor2().hashCode();
	result = (37 * result) + $0.getPoint2().hashCode();
} else 
{



	result = p.hashCode();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1[i] != null) {
	return false;
}:if (array1[i] != null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array2[i] == null) {
	if (array1[i] != null) {
		return false;
	}
}:if (array2[i] == null) {
	if (array1[i] != null) {
		return false;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
		}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (type == null) {
	throw new java.lang.IllegalArgumentException("Null 'type' argument.");
}:if (type == null) {
	throw new java.lang.IllegalArgumentException("Null 'type' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (base.length() < end.length()) {
	return false;
}:if (base.length() < end.length()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index == (-1)) {
	return name;
}:if (index == (-1)) {
	return name;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showZeroDays != that.showZeroDays) {
	return false;
}:if (this.showZeroDays != that.showZeroDays) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (suffix == null) {
	throw new java.lang.IllegalArgumentException("Null 'suffix' argument.");
}:if (suffix == null) {
	throw new java.lang.IllegalArgumentException("Null 'suffix' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (paint instanceof java.io.Serializable) {
	stream.writeObject(paint);
} else 
{ 	if (paint instanceof java.awt.GradientPaint) {
		java.awt.GradientPaint gp = ((java.awt.GradientPaint) (paint));
		stream.writeFloat(((float) (gp.getPoint1().getX())));
		stream.writeFloat(((float) (gp.getPoint1().getY())));
		stream.writeObject(gp.getColor1());
		stream.writeFloat(((float) (gp.getPoint2().getX())));
		stream.writeFloat(((float) (gp.getPoint2().getY())));
		stream.writeObject(gp.getColor2());
		stream.writeBoolean(gp.isCyclic());
	}}:if (paint instanceof java.io.Serializable) {
	stream.writeObject(paint);
} else 
{ 	if (paint instanceof java.awt.GradientPaint) {
		java.awt.GradientPaint $1 = ((java.awt.GradientPaint) (paint));
		stream.writeFloat(((float) ($1.getPoint1().getX())));
		stream.writeFloat(((float) ($1.getPoint1().getY())));
		stream.writeObject($1.getColor1());
		stream.writeFloat(((float) ($1.getPoint2().getX())));
		stream.writeFloat(((float) ($1.getPoint2().getY())));
		stream.writeObject($1.getColor2());
		stream.writeBoolean($1.isCyclic());
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.Layer.FOREGROUND)) {
	result = org.jfree.chart.util.Layer.FOREGROUND;
} else 
{ 	if (this.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
		result = org.jfree.chart.util.Layer.BACKGROUND;
	}}:if (this.equals(org.jfree.chart.util.Layer.FOREGROUND)) {
	result = org.jfree.chart.util.Layer.FOREGROUND;
} else 
{ 	if (this.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
		result = org.jfree.chart.util.Layer.BACKGROUND;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE)) {
	return org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE;
} else 
{ 	if (this.equals(org.jfree.chart.util.LengthAdjustmentType.EXPAND)) {
		return org.jfree.chart.util.LengthAdjustmentType.EXPAND;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
			return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
		}}}:if (this.equals(org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE)) {
	return org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE;
} else 
{ 	if (this.equals(org.jfree.chart.util.LengthAdjustmentType.EXPAND)) {
		return org.jfree.chart.util.LengthAdjustmentType.EXPAND;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
			return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(order.name)) {
	return false;
}:if (!this.name.equals(order.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p2 == null) {
	return false;
}:if (p2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a1.getAngleStart() != a2.getAngleStart()) {
	return false;
}:if (a1.getAngleStart() != a2.getAngleStart()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
	result = org.jfree.chart.util.RectangleEdge.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
		result = org.jfree.chart.util.RectangleEdge.RIGHT;
	}}:if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
	result = org.jfree.chart.util.RectangleEdge.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
		result = org.jfree.chart.util.RectangleEdge.RIGHT;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.baseMillis != that.baseMillis) {
	return false;
}:if (this.baseMillis != that.baseMillis) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (base.length() < start.length()) {
	return false;
}:if (base.length() < start.length()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!e1.getFrame().equals(e2.getFrame())) {
	return false;
}:if (!e1.getFrame().equals(e2.getFrame())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index != (-1)) {
	setShape(index, org.jfree.chart.util.SerialUtilities.readShape(stream));
}:if (index != (-1)) {
	setShape(index, org.jfree.chart.util.SerialUtilities.readShape(stream));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e2 == null) {
	return false;
}:if (e2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (baseLabel == null) {
	throw new java.lang.IllegalArgumentException("Null 'baseLabel' argument.");
}:if (baseLabel == null) {
	throw new java.lang.IllegalArgumentException("Null 'baseLabel' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (object instanceof org.jfree.chart.util.PublicCloneable) {
	final org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (object));
	return pc.clone();
} else 
{
	try {
		final java.lang.reflect.Method method = object.getClass().getMethod("clone", 
		((java.lang.Class[]) (null)));
		if (java.lang.reflect.Modifier.isPublic(method.getModifiers())) {
			return method.invoke(object, ((java.lang.Object[]) (null)));
		}
	}
	 catch (java.lang.NoSuchMethodException e) {
		e.printStackTrace();
	}
	 catch (java.lang.IllegalAccessException e) {
		e.printStackTrace();
	}
	 catch (java.lang.reflect.InvocationTargetException e) {
		e.printStackTrace();
	}
}:if (object instanceof org.jfree.chart.util.PublicCloneable) {
	final org.jfree.chart.util.PublicCloneable $0 = ((org.jfree.chart.util.PublicCloneable) (object));
	return $0.clone();
} else 
{
	try {
		final java.lang.reflect.Method $1 = object.getClass().getMethod("clone", 
		((java.lang.Class[]) (null)));
		if (java.lang.reflect.Modifier.isPublic($1.getModifiers())) {
			return $1.invoke(object, ((java.lang.Object[]) (null)));
		}
	}
	 catch (java.lang.NoSuchMethodException e) {
		e.printStackTrace();
	}
	 catch (java.lang.IllegalAccessException e) {
		e.printStackTrace();
	}
	 catch (java.lang.reflect.InvocationTargetException e) {
		e.printStackTrace();
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.reflect.Modifier.isPublic(f.getModifiers()) && 
java.lang.reflect.Modifier.isFinal(f.getModifiers())) && 
java.lang.reflect.Modifier.isStatic(f.getModifiers())) {
	java.lang.String name = f.getName();
	java.lang.Object oColor = f.get(null);
	if (oColor instanceof java.awt.Color) {
		if (c.equals(oColor)) {
			return name;
		}
	}
}:if ((java.lang.reflect.Modifier.isPublic(f.getModifiers()) && 
java.lang.reflect.Modifier.isFinal(f.getModifiers())) && 
java.lang.reflect.Modifier.isStatic(f.getModifiers())) {
	java.lang.String $0 = f.getName();
	java.lang.Object $1 = f.get(null);
	if ($1 instanceof java.awt.Color) {
		if (c.equals($1)) {
			return $0;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
		}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((o1 != null) && (o2 != null)) {
	if (o1.equals(o2)) {
		return true;
	}
}:if ((o1 != null) && (o2 != null)) {
	if (o1.equals(o2)) {
		return true;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((o1 == null) && (o2 == null)) {

	continue;
}:if ((o1 == null) && (o2 == null)) {

	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(o instanceof org.jfree.chart.util.Rotation)) {
	return false;
}:if (!(o instanceof org.jfree.chart.util.Rotation)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (horizontal == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
	double leftMargin = calculateLeftInset(w);
	x = x + leftMargin;
	w = (w - leftMargin) - calculateRightInset(w);
}:if (horizontal == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
	double $0 = calculateLeftInset(w);
	x = x + $0;
	w = (w - $0) - calculateRightInset(w);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((days != 0) || this.showZeroDays) {
	toAppendTo.append(this.dayFormatter.format(days) + getDaySuffix());
}:if ((days != 0) || this.showZeroDays) {
	toAppendTo.append(this.dayFormatter.format(days) + getDaySuffix());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.StandardGradientPaintTransformer)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.StandardGradientPaintTransformer)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (size > 0) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[0]);
	if (size > 1) {
		result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[size - 1]);
		if (size > 2) {
			result = org.jfree.chart.util.HashUtilities.hashCode(result, 
			this.objects[size / 2]);
		}
	}
}:if (size > 0) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[0]);
	if (size > 1) {
		result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[size - 1]);
		if (size > 2) {
			result = org.jfree.chart.util.HashUtilities.hashCode(result, 
			this.objects[size / 2]);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (object == null) {
	throw new java.lang.IllegalArgumentException("Null 'object' argument.");
}:if (object == null) {
	throw new java.lang.IllegalArgumentException("Null 'object' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (horizontal) {
	leftMargin = calculateLeftInset(base.getWidth());
	rightMargin = calculateRightInset(base.getWidth());
}:if (horizontal) {
	leftMargin = calculateLeftInset(base.getWidth());
	rightMargin = calculateRightInset(base.getWidth());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index != (-1)) {
	setPaint(index, org.jfree.chart.util.SerialUtilities.readPaint(stream));
}:if (index != (-1)) {
	setPaint(index, org.jfree.chart.util.SerialUtilities.readPaint(stream));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (width / ((1 - this.left) - this.right)) * this.right;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (width / ((1 - this.left) - this.right)) * this.right;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.Arc2D) {
	java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
	stream.writeObject(java.awt.geom.Arc2D.class);
	stream.writeDouble(arc.getX());
	stream.writeDouble(arc.getY());
	stream.writeDouble(arc.getWidth());
	stream.writeDouble(arc.getHeight());
	stream.writeDouble(arc.getAngleStart());
	stream.writeDouble(arc.getAngleExtent());
	stream.writeInt(arc.getArcType());
} else 
{ 	if (shape instanceof java.awt.geom.GeneralPath) {
		stream.writeObject(java.awt.geom.GeneralPath.class);
		java.awt.geom.PathIterator pi = shape.getPathIterator(null);
		float[] args = new float[6];
		stream.writeBoolean(pi.isDone());
		while (!pi.isDone()) {
			int type = pi.currentSegment(args);
			stream.writeInt(type);


			for (int i = 0; i < 6; i++) {
				stream.writeFloat(args[i]);
			}
			stream.writeInt(pi.getWindingRule());
			pi.next();
			stream.writeBoolean(pi.isDone());
		} 
	} else 
	{
		stream.writeObject(shape.getClass());
		stream.writeObject(shape);
	}}:if (shape instanceof java.awt.geom.Arc2D) {
	java.awt.geom.Arc2D $4 = ((java.awt.geom.Arc2D) (shape));
	stream.writeObject(java.awt.geom.Arc2D.class);
	stream.writeDouble($4.getX());
	stream.writeDouble($4.getY());
	stream.writeDouble($4.getWidth());
	stream.writeDouble($4.getHeight());
	stream.writeDouble($4.getAngleStart());
	stream.writeDouble($4.getAngleExtent());
	stream.writeInt($4.getArcType());
} else 
{ 	if (shape instanceof java.awt.geom.GeneralPath) {
		stream.writeObject(java.awt.geom.GeneralPath.class);
		java.awt.geom.PathIterator $5 = shape.getPathIterator(null);
		float[] $6 = new float[6];
		stream.writeBoolean($5.isDone());
		while (!$5.isDone()) {
			int $7 = $5.currentSegment($6);
			stream.writeInt($7);


			for (int $8 = 0; $8 < 6; $8++) {
				stream.writeFloat($6[$8]);
			}
			stream.writeInt($5.getWindingRule());
			$5.next();
			stream.writeBoolean($5.isDone());
		} 
	} else 
	{
		stream.writeObject(shape.getClass());
		stream.writeObject(shape);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.VerticalAlignment.TOP)) {
	return org.jfree.chart.util.VerticalAlignment.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.VerticalAlignment.BOTTOM)) {
		return org.jfree.chart.util.VerticalAlignment.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
			return org.jfree.chart.util.VerticalAlignment.CENTER;
		} else 
		{
			return null;
		}}}:if (this.equals(org.jfree.chart.util.VerticalAlignment.TOP)) {
	return org.jfree.chart.util.VerticalAlignment.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.VerticalAlignment.BOTTOM)) {
		return org.jfree.chart.util.VerticalAlignment.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
			return org.jfree.chart.util.VerticalAlignment.CENTER;
		} else 
		{
			return null;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (formatter == null) {
	throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
}:if (formatter == null) {
	throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	}}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ("ThreadContext".equals(org.jfree.chart.util.ObjectUtilities.classLoaderSource)) {
	final java.lang.ClassLoader threadLoader = 
	java.lang.Thread.currentThread().getContextClassLoader();
	if (threadLoader != null) {
		return threadLoader;
	}
}:if ("ThreadContext".equals(org.jfree.chart.util.ObjectUtilities.classLoaderSource)) {
	final java.lang.ClassLoader $0 = 
	java.lang.Thread.currentThread().getContextClassLoader();
	if ($0 != null) {
		return $0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index != (-1)) {
	set(index, stream.readObject());
}:if (index != (-1)) {
	set(index, stream.readObject());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index >= 0) && (index < this.size)) {
	result = this.objects[index];
}:if ((index >= 0) && (index < this.size)) {
	result = this.objects[index];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	throw new java.lang.IllegalArgumentException("Requires index >= 0.");
}:if (index < 0) {
	throw new java.lang.IllegalArgumentException("Requires index >= 0.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.objects[index] == object) {
	return index;
}:if (this.objects[index] == object) {
	return index;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.VerticalAlignment.BOTTOM)) {
	return org.jfree.chart.util.VerticalAlignment.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
		return org.jfree.chart.util.VerticalAlignment.CENTER;
	} else 
	{
		return null;
	}}:if (this.equals(org.jfree.chart.util.VerticalAlignment.BOTTOM)) {
	return org.jfree.chart.util.VerticalAlignment.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
		return org.jfree.chart.util.VerticalAlignment.CENTER;
	} else 
	{
		return null;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX, anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - w, anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX, anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - w, anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.VerticalAlignment)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.VerticalAlignment)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {
	java.lang.Class c = ((java.lang.Class) (stream.readObject()));
	if (c.equals(java.awt.geom.Line2D.class)) {
		double x1 = stream.readDouble();
		double y1 = stream.readDouble();
		double x2 = stream.readDouble();
		double y2 = stream.readDouble();
		result = new java.awt.geom.Line2D.Double(x1, y1, x2, y2);
	} else 
	{ 		if (c.equals(java.awt.geom.Rectangle2D.class)) {
			double x = stream.readDouble();
			double y = stream.readDouble();
			double w = stream.readDouble();
			double h = stream.readDouble();
			result = new java.awt.geom.Rectangle2D.Double(x, y, w, h);
		} else 
		{ 			if (c.equals(java.awt.geom.Ellipse2D.class)) {
				double x = stream.readDouble();
				double y = stream.readDouble();
				double w = stream.readDouble();
				double h = stream.readDouble();
				result = new java.awt.geom.Ellipse2D.Double(x, y, w, h);
			} else 
			{ 				if (c.equals(java.awt.geom.Arc2D.class)) {
					double x = stream.readDouble();
					double y = stream.readDouble();
					double w = stream.readDouble();
					double h = stream.readDouble();
					double as = stream.readDouble();
					double ae = stream.readDouble();
					int at = stream.readInt();
					result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
				} else 
				{ 					if (c.equals(java.awt.geom.GeneralPath.class)) {
						java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
						float[] args = new float[6];
						boolean hasNext = stream.readBoolean();
						while (!hasNext) {
							int type = stream.readInt();
							for (int i = 0; i < 6; i++) {
								args[i] = stream.readFloat();
							}
							switch (type) {
								case java.awt.geom.PathIterator.SEG_MOVETO :
									gp.moveTo(args[0], args[1]);
									break;
								case java.awt.geom.PathIterator.SEG_LINETO :
									gp.lineTo(args[0], args[1]);
									break;
								case java.awt.geom.PathIterator.SEG_CUBICTO :
									gp.curveTo(args[0], args[1], args[2], 
									args[3], args[4], args[5]);
									break;
								case java.awt.geom.PathIterator.SEG_QUADTO :
									gp.quadTo(args[0], args[1], args[2], args[3]);
									break;
								case java.awt.geom.PathIterator.SEG_CLOSE :
									gp.closePath();
									break;
								default :
									throw new java.lang.RuntimeException(
									"JFreeChart - No path exists");}

							gp.setWindingRule(stream.readInt());
							hasNext = stream.readBoolean();
						} 
						result = gp;
					} else 
					{
						result = ((java.awt.Shape) (stream.readObject()));
					}}}}}
}:if (!isNull) {
	java.lang.Class $77 = ((java.lang.Class) (stream.readObject()));
	if ($77.equals(java.awt.geom.Line2D.class)) {
		double $78 = stream.readDouble();
		double $79 = stream.readDouble();
		double $80 = stream.readDouble();
		double $81 = stream.readDouble();
		result = new java.awt.geom.Line2D.Double($78, $79, $80, $81);
	} else 
	{ 		if ($77.equals(java.awt.geom.Rectangle2D.class)) {
			double $82 = stream.readDouble();
			double $83 = stream.readDouble();
			double $84 = stream.readDouble();
			double $85 = stream.readDouble();
			result = new java.awt.geom.Rectangle2D.Double($82, $83, $84, $85);
		} else 
		{ 			if ($77.equals(java.awt.geom.Ellipse2D.class)) {
				double $86 = stream.readDouble();
				double $87 = stream.readDouble();
				double $88 = stream.readDouble();
				double $89 = stream.readDouble();
				result = new java.awt.geom.Ellipse2D.Double($86, $87, $88, $89);
			} else 
			{ 				if ($77.equals(java.awt.geom.Arc2D.class)) {
					double $90 = stream.readDouble();
					double $91 = stream.readDouble();
					double $92 = stream.readDouble();
					double $93 = stream.readDouble();
					double $94 = stream.readDouble();
					double $95 = stream.readDouble();
					int $96 = stream.readInt();
					result = new java.awt.geom.Arc2D.Double($90, $91, $92, $93, $94, $95, $96);
				} else 
				{ 					if ($77.equals(java.awt.geom.GeneralPath.class)) {
						java.awt.geom.GeneralPath $97 = new java.awt.geom.GeneralPath();
						float[] $98 = new float[6];
						boolean $99 = stream.readBoolean();
						while (!$99) {
							int $100 = stream.readInt();
							for (int $101 = 0; $101 < 6; $101++) {
								$98[$101] = stream.readFloat();
							}
							switch ($100) {
								case java.awt.geom.PathIterator.SEG_MOVETO :
									$97.moveTo($98[0], $98[1]);
									break;
								case java.awt.geom.PathIterator.SEG_LINETO :
									$97.lineTo($98[0], $98[1]);
									break;
								case java.awt.geom.PathIterator.SEG_CUBICTO :
									$97.curveTo($98[0], $98[1], $98[2], 
									$98[3], $98[4], $98[5]);
									break;
								case java.awt.geom.PathIterator.SEG_QUADTO :
									$97.quadTo($98[0], $98[1], $98[2], $98[3]);
									break;
								case java.awt.geom.PathIterator.SEG_CLOSE :
									$97.closePath();
									break;
								default :
									throw new java.lang.RuntimeException(
									"JFreeChart - No path exists");}

							$97.setWindingRule(stream.readInt());
							$99 = stream.readBoolean();
						} 
						result = $97;
					} else 
					{
						result = ((java.awt.Shape) (stream.readObject()));
					}}}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
}:if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
	result = rectangle.getMaxX();
}:if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
	result = rectangle.getMaxX();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showBase) {
	result.append(this.baseLabel);
	result.append("^");
}:if (this.showBase) {
	result.append(this.baseLabel);
	result.append("^");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (oColor instanceof java.awt.Color) {
	if (c.equals(oColor)) {
		return name;
	}
}:if (oColor instanceof java.awt.Color) {
	if (c.equals(oColor)) {
		return name;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getMinX())), 
	((float) (bounds.getCenterY())), paint.getColor1(), 
	((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
	paint.getColor2());
} else 
{ 	if (this.type.equals(
	org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
		((float) (bounds.getCenterY())), paint.getColor2(), 
		((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
		paint.getColor1(), true);
	} else 
	{ 		if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
			result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
			((float) (bounds.getMinY())), paint.getColor1(), 
			((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
			paint.getColor2(), true);
		}}}:if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getMinX())), 
	((float) (bounds.getCenterY())), paint.getColor1(), 
	((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
	paint.getColor2());
} else 
{ 	if (this.type.equals(
	org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
		((float) (bounds.getCenterY())), paint.getColor2(), 
		((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
		paint.getColor1(), true);
	} else 
	{ 		if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
			result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
			((float) (bounds.getMinY())), paint.getColor1(), 
			((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
			paint.getColor2(), true);
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (value == null) {
	return java.awt.Color.black;
}:if (value == null) {
	return java.awt.Color.black;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!super.equals(obj)) {
	return false;
}:if (!super.equals(obj)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p == null) {
	return 0;
}:if (p == null) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj == null) {
	return false;
}:if (obj == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX, anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - w, anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX, anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - w, anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.left * width;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.left * width;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.Line2D.class)) {
	double x1 = stream.readDouble();
	double y1 = stream.readDouble();
	double x2 = stream.readDouble();
	double y2 = stream.readDouble();
	result = new java.awt.geom.Line2D.Double(x1, y1, x2, y2);
} else 
{ 	if (c.equals(java.awt.geom.Rectangle2D.class)) {
		double x = stream.readDouble();
		double y = stream.readDouble();
		double w = stream.readDouble();
		double h = stream.readDouble();
		result = new java.awt.geom.Rectangle2D.Double(x, y, w, h);
	} else 
	{ 		if (c.equals(java.awt.geom.Ellipse2D.class)) {
			double x = stream.readDouble();
			double y = stream.readDouble();
			double w = stream.readDouble();
			double h = stream.readDouble();
			result = new java.awt.geom.Ellipse2D.Double(x, y, w, h);
		} else 
		{ 			if (c.equals(java.awt.geom.Arc2D.class)) {
				double x = stream.readDouble();
				double y = stream.readDouble();
				double w = stream.readDouble();
				double h = stream.readDouble();
				double as = stream.readDouble();
				double ae = stream.readDouble();
				int at = stream.readInt();
				result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
			} else 
			{ 				if (c.equals(java.awt.geom.GeneralPath.class)) {
					java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
					float[] args = new float[6];
					boolean hasNext = stream.readBoolean();
					while (!hasNext) {
						int type = stream.readInt();
						for (int i = 0; i < 6; i++) {
							args[i] = stream.readFloat();
						}
						switch (type) {
							case java.awt.geom.PathIterator.SEG_MOVETO :
								gp.moveTo(args[0], args[1]);
								break;
							case java.awt.geom.PathIterator.SEG_LINETO :
								gp.lineTo(args[0], args[1]);
								break;
							case java.awt.geom.PathIterator.SEG_CUBICTO :
								gp.curveTo(args[0], args[1], args[2], 
								args[3], args[4], args[5]);
								break;
							case java.awt.geom.PathIterator.SEG_QUADTO :
								gp.quadTo(args[0], args[1], args[2], args[3]);
								break;
							case java.awt.geom.PathIterator.SEG_CLOSE :
								gp.closePath();
								break;
							default :
								throw new java.lang.RuntimeException(
								"JFreeChart - No path exists");}

						gp.setWindingRule(stream.readInt());
						hasNext = stream.readBoolean();
					} 
					result = gp;
				} else 
				{
					result = ((java.awt.Shape) (stream.readObject()));
				}}}}}:if (c.equals(java.awt.geom.Line2D.class)) {
	double $53 = stream.readDouble();
	double $54 = stream.readDouble();
	double $55 = stream.readDouble();
	double $56 = stream.readDouble();
	result = new java.awt.geom.Line2D.Double($53, $54, $55, $56);
} else 
{ 	if (c.equals(java.awt.geom.Rectangle2D.class)) {
		double $57 = stream.readDouble();
		double $58 = stream.readDouble();
		double $59 = stream.readDouble();
		double $60 = stream.readDouble();
		result = new java.awt.geom.Rectangle2D.Double($57, $58, $59, $60);
	} else 
	{ 		if (c.equals(java.awt.geom.Ellipse2D.class)) {
			double $61 = stream.readDouble();
			double $62 = stream.readDouble();
			double $63 = stream.readDouble();
			double $64 = stream.readDouble();
			result = new java.awt.geom.Ellipse2D.Double($61, $62, $63, $64);
		} else 
		{ 			if (c.equals(java.awt.geom.Arc2D.class)) {
				double $65 = stream.readDouble();
				double $66 = stream.readDouble();
				double $67 = stream.readDouble();
				double $68 = stream.readDouble();
				double $69 = stream.readDouble();
				double $70 = stream.readDouble();
				int $71 = stream.readInt();
				result = new java.awt.geom.Arc2D.Double($65, $66, $67, $68, $69, $70, $71);
			} else 
			{ 				if (c.equals(java.awt.geom.GeneralPath.class)) {
					java.awt.geom.GeneralPath $72 = new java.awt.geom.GeneralPath();
					float[] $73 = new float[6];
					boolean $74 = stream.readBoolean();
					while (!$74) {
						int $75 = stream.readInt();
						for (int $76 = 0; $76 < 6; $76++) {
							$73[$76] = stream.readFloat();
						}
						switch ($75) {
							case java.awt.geom.PathIterator.SEG_MOVETO :
								$72.moveTo($73[0], $73[1]);
								break;
							case java.awt.geom.PathIterator.SEG_LINETO :
								$72.lineTo($73[0], $73[1]);
								break;
							case java.awt.geom.PathIterator.SEG_CUBICTO :
								$72.curveTo($73[0], $73[1], $73[2], 
								$73[3], $73[4], $73[5]);
								break;
							case java.awt.geom.PathIterator.SEG_QUADTO :
								$72.quadTo($73[0], $73[1], $73[2], $73[3]);
								break;
							case java.awt.geom.PathIterator.SEG_CLOSE :
								$72.closePath();
								break;
							default :
								throw new java.lang.RuntimeException(
								"JFreeChart - No path exists");}

						$72.setWindingRule(stream.readInt());
						$74 = stream.readBoolean();
					} 
					result = $72;
				} else 
				{
					result = ((java.awt.Shape) (stream.readObject()));
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p != null) {
	stream.writeBoolean(false);
	stream.writeDouble(p.getX());
	stream.writeDouble(p.getY());
} else 
{
	stream.writeBoolean(true);
}:if (p != null) {
	stream.writeBoolean(false);
	stream.writeDouble(p.getX());
	stream.writeDouble(p.getY());
} else 
{
	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (base == null) {
	return null;
}:if (base == null) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x2 - x1) != 0.0) {
	double theta = java.lang.Math.atan((y2 - y1) / (x2 - x1));
	float dx = ((float) (java.lang.Math.sin(theta))) * width;
	float dy = ((float) (java.lang.Math.cos(theta))) * width;
	result.moveTo(x1 - dx, y1 + dy);
	result.lineTo(x1 + dx, y1 - dy);
	result.lineTo(x2 + dx, y2 - dy);
	result.lineTo(x2 - dx, y2 + dy);
	result.closePath();
} else 
{

	result.moveTo(x1 - (width / 2.0F), y1);
	result.lineTo(x1 + (width / 2.0F), y1);
	result.lineTo(x2 + (width / 2.0F), y2);
	result.lineTo(x2 - (width / 2.0F), y2);
	result.closePath();
}:if ((x2 - x1) != 0.0) {
	double $0 = java.lang.Math.atan((y2 - y1) / (x2 - x1));
	float $1 = ((float) (java.lang.Math.sin($0))) * width;
	float $2 = ((float) (java.lang.Math.cos($0))) * width;
	result.moveTo(x1 - $1, y1 + $2);
	result.lineTo(x1 + $1, y1 - $2);
	result.lineTo(x2 + $1, y2 - $2);
	result.lineTo(x2 - $1, y2 + $2);
	result.closePath();
} else 
{

	result.moveTo(x1 - (width / 2.0F), y1);
	result.lineTo(x1 + (width / 2.0F), y1);
	result.lineTo(x2 + (width / 2.0F), y2);
	result.lineTo(x2 - (width / 2.0F), y2);
	result.closePath();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.objects != null) {
	clone.objects = new java.lang.Object[this.objects.length];
	java.lang.System.arraycopy(this.objects, 0, clone.objects, 0, 
	this.objects.length);
}:if (this.objects != null) {
	clone.objects = new java.lang.Object[this.objects.length];
	java.lang.System.arraycopy(this.objects, 0, clone.objects, 0, 
	this.objects.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
	result = org.jfree.chart.util.RectangleEdge.RIGHT;
}:if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
	result = org.jfree.chart.util.RectangleEdge.RIGHT;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (isSelected) {
	setBackground(table.getSelectionBackground());
} else 
{
	setBackground(null);
}:if (isSelected) {
	setBackground(table.getSelectionBackground());
} else 
{
	setBackground(null);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.lang.Number.class)) {
	column.setCellRenderer(new org.jfree.chart.util.NumberCellRenderer());
}:if (c.equals(java.lang.Number.class)) {
	column.setCellRenderer(new org.jfree.chart.util.NumberCellRenderer());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a1 == null) {
	return a2 == null;
}:if (a1 == null) {
	return a2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (base == null) {
	throw new java.lang.IllegalArgumentException("Null 'base' argument.");
}:if (base == null) {
	throw new java.lang.IllegalArgumentException("Null 'base' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.HorizontalAlignment.LEFT)) {
	result = org.jfree.chart.util.HorizontalAlignment.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.HorizontalAlignment.RIGHT)) {
		result = org.jfree.chart.util.HorizontalAlignment.RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
			result = org.jfree.chart.util.HorizontalAlignment.CENTER;
		}}}:if (this.equals(org.jfree.chart.util.HorizontalAlignment.LEFT)) {
	result = org.jfree.chart.util.HorizontalAlignment.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.HorizontalAlignment.RIGHT)) {
		result = org.jfree.chart.util.HorizontalAlignment.RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
			result = org.jfree.chart.util.HorizontalAlignment.CENTER;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
	result = org.jfree.chart.util.Layer.BACKGROUND;
}:if (this.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
	result = org.jfree.chart.util.Layer.BACKGROUND;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a1.getArcType() != a2.getArcType()) {
	return false;
}:if (a1.getArcType() != a2.getArcType()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.TOP) {
	result = rectangle.getMinY();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
		result = rectangle.getMaxY();
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
			result = rectangle.getMinX();
		} else 
		{ 			if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
				result = rectangle.getMaxX();
			}}}}:if (edge == org.jfree.chart.util.RectangleEdge.TOP) {
	result = rectangle.getMinY();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
		result = rectangle.getMaxY();
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
			result = rectangle.getMinX();
		} else 
		{ 			if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
				result = rectangle.getMaxX();
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.right * width;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.right * width;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.RectangleInsets)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.RectangleInsets)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1 == null) {
	return array2 == null;
}:if (array1 == null) {
	return array2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj == this) {
	return true;
}:if (obj == this) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.AbstractObjectList)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.AbstractObjectList)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.jfree.chart.util.ObjectUtilities.equal(get(i), other.get(i))) {
	return false;
}:if (!org.jfree.chart.util.ObjectUtilities.equal(get(i), other.get(i))) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.TOP) {
	result = org.jfree.chart.util.RectangleEdge.BOTTOM;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
		result = org.jfree.chart.util.RectangleEdge.TOP;
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
			result = org.jfree.chart.util.RectangleEdge.RIGHT;
		} else 
		{ 			if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
				result = org.jfree.chart.util.RectangleEdge.LEFT;
			}}}}:if (edge == org.jfree.chart.util.RectangleEdge.TOP) {
	result = org.jfree.chart.util.RectangleEdge.BOTTOM;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
		result = org.jfree.chart.util.RectangleEdge.TOP;
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
			result = org.jfree.chart.util.RectangleEdge.RIGHT;
		} else 
		{ 			if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
				result = org.jfree.chart.util.RectangleEdge.LEFT;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showZeroHours != that.showZeroHours) {
	return false;
}:if (this.showZeroHours != that.showZeroHours) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((object != null) && (object instanceof java.io.Serializable)) {
	stream.writeInt(i);
	stream.writeObject(object);
} else 
{
	stream.writeInt(-1);
}:if ((object != null) && (object instanceof java.io.Serializable)) {
	stream.writeInt(i);
	stream.writeObject(object);
} else 
{
	stream.writeInt(-1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.width != that.width) {
	return false;
}:if (this.width != that.width) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
	result = org.jfree.chart.util.RectangleEdge.TOP;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
		result = org.jfree.chart.util.RectangleEdge.RIGHT;
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
			result = org.jfree.chart.util.RectangleEdge.LEFT;
		}}}:if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
	result = org.jfree.chart.util.RectangleEdge.TOP;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
		result = org.jfree.chart.util.RectangleEdge.RIGHT;
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
			result = org.jfree.chart.util.RectangleEdge.LEFT;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (l1 == null) {
	return l2 == null;
}:if (l1 == null) {
	return l2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this == obj) {
	return true;
}:if (this == obj) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.baseLog != that.baseLog) {
	return false;
}:if (this.baseLog != that.baseLog) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.reflect.Modifier.isPublic(method.getModifiers())) {
	return method.invoke(object, ((java.lang.Object[]) (null)));
}:if (java.lang.reflect.Modifier.isPublic(method.getModifiers())) {
	return method.invoke(object, ((java.lang.Object[]) (null)));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.factor != rotation.factor) {
	return false;
}:if (this.factor != rotation.factor) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.TableOrder.BY_ROW)) {
	return org.jfree.chart.util.TableOrder.BY_ROW;
} else 
{ 	if (this.equals(org.jfree.chart.util.TableOrder.BY_COLUMN)) {
		return org.jfree.chart.util.TableOrder.BY_COLUMN;
	}}:if (this.equals(org.jfree.chart.util.TableOrder.BY_ROW)) {
	return org.jfree.chart.util.TableOrder.BY_ROW;
} else 
{ 	if (this.equals(org.jfree.chart.util.TableOrder.BY_COLUMN)) {
		return org.jfree.chart.util.TableOrder.BY_COLUMN;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.Size2D)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.Size2D)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (stroke != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writeStroke(stroke, stream);
} else 
{
	stream.writeInt(-1);
}:if (stroke != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writeStroke(stroke, stream);
} else 
{
	stream.writeInt(-1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.daySuffix.equals(that.daySuffix)) {
	return false;
}:if (!this.daySuffix.equals(that.daySuffix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o1 != null) {
	return o1.equals(o2);
} else 
{
	return false;
}:if (o1 != null) {
	return o1.equals(o2);
} else 
{
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.jfree.chart.util.SerialUtilities.isSerializable(c)) {
	result = ((java.awt.Paint) (stream.readObject()));
} else 
{ 	if (c.equals(java.awt.GradientPaint.class)) {
		float x1 = stream.readFloat();
		float y1 = stream.readFloat();
		java.awt.Color c1 = ((java.awt.Color) (stream.readObject()));
		float x2 = stream.readFloat();
		float y2 = stream.readFloat();
		java.awt.Color c2 = ((java.awt.Color) (stream.readObject()));
		boolean isCyclic = stream.readBoolean();
		result = new java.awt.GradientPaint(x1, y1, c1, x2, y2, c2, isCyclic);
	}}:if (org.jfree.chart.util.SerialUtilities.isSerializable(c)) {
	result = ((java.awt.Paint) (stream.readObject()));
} else 
{ 	if (c.equals(java.awt.GradientPaint.class)) {
		float $7 = stream.readFloat();
		float $8 = stream.readFloat();
		java.awt.Color $9 = ((java.awt.Color) (stream.readObject()));
		float $10 = stream.readFloat();
		float $11 = stream.readFloat();
		java.awt.Color $12 = ((java.awt.Color) (stream.readObject()));
		boolean $13 = stream.readBoolean();
		result = new java.awt.GradientPaint($7, $8, $9, $10, $11, $12, $13);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a2 == null) {
	return false;
}:if (a2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (width / ((1 - this.left) - this.right)) * this.left;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (width / ((1 - this.left) - this.right)) * this.left;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.Rotation.CLOCKWISE)) {
	return org.jfree.chart.util.Rotation.CLOCKWISE;
} else 
{ 	if (this.equals(org.jfree.chart.util.Rotation.ANTICLOCKWISE)) {
		return org.jfree.chart.util.Rotation.ANTICLOCKWISE;
	}}:if (this.equals(org.jfree.chart.util.Rotation.CLOCKWISE)) {
	return org.jfree.chart.util.Rotation.CLOCKWISE;
} else 
{ 	if (this.equals(org.jfree.chart.util.Rotation.ANTICLOCKWISE)) {
		return org.jfree.chart.util.Rotation.ANTICLOCKWISE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj instanceof org.jfree.chart.util.PaintList) {
	org.jfree.chart.util.PaintList that = ((org.jfree.chart.util.PaintList) (obj));
	int listSize = size();
	for (int i = 0; i < listSize; i++) {
		if (!org.jfree.chart.util.PaintUtilities.equal(getPaint(i), that.getPaint(i))) {
			return false;
		}
	}
}:if (obj instanceof org.jfree.chart.util.PaintList) {
	org.jfree.chart.util.PaintList $0 = ((org.jfree.chart.util.PaintList) (obj));
	int $1 = size();
	for (int $2 = 0; $2 < $1; $2++) {
		if (!org.jfree.chart.util.PaintUtilities.equal(getPaint($2), $0.getPaint($2))) {
			return false;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.left != that.left) {
	return false;
}:if (this.left != that.left) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!a1.getFrame().equals(a2.getFrame())) {
	return false;
}:if (!a1.getFrame().equals(a2.getFrame())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1.length != array2.length) {
	return false;
}:if (array1.length != array2.length) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj instanceof org.jfree.chart.util.BooleanList) {
	return super.equals(obj);
}:if (obj instanceof org.jfree.chart.util.BooleanList) {
	return super.equals(obj);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.GeneralPath) {
	stream.writeObject(java.awt.geom.GeneralPath.class);
	java.awt.geom.PathIterator pi = shape.getPathIterator(null);
	float[] args = new float[6];
	stream.writeBoolean(pi.isDone());
	while (!pi.isDone()) {
		int type = pi.currentSegment(args);
		stream.writeInt(type);


		for (int i = 0; i < 6; i++) {
			stream.writeFloat(args[i]);
		}
		stream.writeInt(pi.getWindingRule());
		pi.next();
		stream.writeBoolean(pi.isDone());
	} 
} else 
{
	stream.writeObject(shape.getClass());
	stream.writeObject(shape);
}:if (shape instanceof java.awt.geom.GeneralPath) {
	stream.writeObject(java.awt.geom.GeneralPath.class);
	java.awt.geom.PathIterator $0 = shape.getPathIterator(null);
	float[] $1 = new float[6];
	stream.writeBoolean($0.isDone());
	while (!$0.isDone()) {
		int $2 = $0.currentSegment($1);
		stream.writeInt($2);


		for (int $3 = 0; $3 < 6; $3++) {
			stream.writeFloat($1[$3]);
		}
		stream.writeInt($0.getWindingRule());
		$0.next();
		stream.writeBoolean($0.isDone());
	} 
} else 
{
	stream.writeObject(shape.getClass());
	stream.writeObject(shape);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.BOTTOM) == org.jfree.chart.util.Align.BOTTOM) {
	y = frame.getMaxY() - h;
}:if ((align & org.jfree.chart.util.Align.BOTTOM) == org.jfree.chart.util.Align.BOTTOM) {
	y = frame.getMaxY() - h;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (size > 2) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, 
	this.objects[size / 2]);
}:if (size > 2) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, 
	this.objects[size / 2]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array2[i] != null) {
	return false;
}:if (array2[i] != null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj instanceof org.jfree.chart.util.StrokeList) {
	return super.equals(obj);
}:if (obj instanceof org.jfree.chart.util.StrokeList) {
	return super.equals(obj);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (paint instanceof java.awt.GradientPaint) {
	java.awt.GradientPaint gp = ((java.awt.GradientPaint) (paint));
	stream.writeFloat(((float) (gp.getPoint1().getX())));
	stream.writeFloat(((float) (gp.getPoint1().getY())));
	stream.writeObject(gp.getColor1());
	stream.writeFloat(((float) (gp.getPoint2().getX())));
	stream.writeFloat(((float) (gp.getPoint2().getY())));
	stream.writeObject(gp.getColor2());
	stream.writeBoolean(gp.isCyclic());
}:if (paint instanceof java.awt.GradientPaint) {
	java.awt.GradientPaint $0 = ((java.awt.GradientPaint) (paint));
	stream.writeFloat(((float) ($0.getPoint1().getX())));
	stream.writeFloat(((float) ($0.getPoint1().getY())));
	stream.writeObject($0.getColor1());
	stream.writeFloat(((float) ($0.getPoint2().getX())));
	stream.writeFloat(((float) ($0.getPoint2().getY())));
	stream.writeObject($0.getColor2());
	stream.writeBoolean($0.isCyclic());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(layer.name)) {
	return false;
}:if (!this.name.equals(layer.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (powerLabel == null) {
	throw new java.lang.IllegalArgumentException("Null 'powerLabel' argument.");
}:if (powerLabel == null) {
	throw new java.lang.IllegalArgumentException("Null 'powerLabel' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.secondFormatter.equals(that.secondFormatter)) {
	return false;
}:if (!this.secondFormatter.equals(that.secondFormatter)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array == null) {
	return null;
}:if (array == null) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
	}}:if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.Arc2D.class)) {
	double x = stream.readDouble();
	double y = stream.readDouble();
	double w = stream.readDouble();
	double h = stream.readDouble();
	double as = stream.readDouble();
	double ae = stream.readDouble();
	int at = stream.readInt();
	result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
} else 
{ 	if (c.equals(java.awt.geom.GeneralPath.class)) {
		java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
		float[] args = new float[6];
		boolean hasNext = stream.readBoolean();
		while (!hasNext) {
			int type = stream.readInt();
			for (int i = 0; i < 6; i++) {
				args[i] = stream.readFloat();
			}
			switch (type) {
				case java.awt.geom.PathIterator.SEG_MOVETO :
					gp.moveTo(args[0], args[1]);
					break;
				case java.awt.geom.PathIterator.SEG_LINETO :
					gp.lineTo(args[0], args[1]);
					break;
				case java.awt.geom.PathIterator.SEG_CUBICTO :
					gp.curveTo(args[0], args[1], args[2], 
					args[3], args[4], args[5]);
					break;
				case java.awt.geom.PathIterator.SEG_QUADTO :
					gp.quadTo(args[0], args[1], args[2], args[3]);
					break;
				case java.awt.geom.PathIterator.SEG_CLOSE :
					gp.closePath();
					break;
				default :
					throw new java.lang.RuntimeException(
					"JFreeChart - No path exists");}

			gp.setWindingRule(stream.readInt());
			hasNext = stream.readBoolean();
		} 
		result = gp;
	} else 
	{
		result = ((java.awt.Shape) (stream.readObject()));
	}}:if (c.equals(java.awt.geom.Arc2D.class)) {
	double $5 = stream.readDouble();
	double $6 = stream.readDouble();
	double $7 = stream.readDouble();
	double $8 = stream.readDouble();
	double $9 = stream.readDouble();
	double $10 = stream.readDouble();
	int $11 = stream.readInt();
	result = new java.awt.geom.Arc2D.Double($5, $6, $7, $8, $9, $10, $11);
} else 
{ 	if (c.equals(java.awt.geom.GeneralPath.class)) {
		java.awt.geom.GeneralPath $12 = new java.awt.geom.GeneralPath();
		float[] $13 = new float[6];
		boolean $14 = stream.readBoolean();
		while (!$14) {
			int $15 = stream.readInt();
			for (int $16 = 0; $16 < 6; $16++) {
				$13[$16] = stream.readFloat();
			}
			switch ($15) {
				case java.awt.geom.PathIterator.SEG_MOVETO :
					$12.moveTo($13[0], $13[1]);
					break;
				case java.awt.geom.PathIterator.SEG_LINETO :
					$12.lineTo($13[0], $13[1]);
					break;
				case java.awt.geom.PathIterator.SEG_CUBICTO :
					$12.curveTo($13[0], $13[1], $13[2], 
					$13[3], $13[4], $13[5]);
					break;
				case java.awt.geom.PathIterator.SEG_QUADTO :
					$12.quadTo($13[0], $13[1], $13[2], $13[3]);
					break;
				case java.awt.geom.PathIterator.SEG_CLOSE :
					$12.closePath();
					break;
				default :
					throw new java.lang.RuntimeException(
					"JFreeChart - No path exists");}

			$12.setWindingRule(stream.readInt());
			$14 = stream.readBoolean();
		} 
		result = $12;
	} else 
	{
		result = ((java.awt.Shape) (stream.readObject()));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.LengthAdjustmentType)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.LengthAdjustmentType)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX, anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - w, anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
								result = new java.awt.geom.Rectangle2D.Double(
								anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

							}}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX, anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - w, anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
								result = new java.awt.geom.Rectangle2D.Double(
								anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

							}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
					result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
						result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
					}}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
					result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
						result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
					}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c1 != c2) {
	return false;
}:if (c1 != c2) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
	}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.LEFT) == org.jfree.chart.util.Align.LEFT) {
	x = frame.getX();
}:if ((align & org.jfree.chart.util.Align.LEFT) == org.jfree.chart.util.Align.LEFT) {
	x = frame.getX();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.RIGHT) == org.jfree.chart.util.Align.RIGHT) {
	x = frame.getMaxX() - w;
}:if ((align & org.jfree.chart.util.Align.RIGHT) == org.jfree.chart.util.Align.RIGHT) {
	x = frame.getMaxX() - w;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - w, anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - w, anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
	result = org.jfree.chart.util.RectangleEdge.RIGHT;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
		result = org.jfree.chart.util.RectangleEdge.LEFT;
	}}:if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
	result = org.jfree.chart.util.RectangleEdge.RIGHT;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
		result = org.jfree.chart.util.RectangleEdge.LEFT;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {
	java.lang.Class c = ((java.lang.Class) (stream.readObject()));
	if (org.jfree.chart.util.SerialUtilities.isSerializable(c)) {
		result = ((java.awt.Paint) (stream.readObject()));
	} else 
	{ 		if (c.equals(java.awt.GradientPaint.class)) {
			float x1 = stream.readFloat();
			float y1 = stream.readFloat();
			java.awt.Color c1 = ((java.awt.Color) (stream.readObject()));
			float x2 = stream.readFloat();
			float y2 = stream.readFloat();
			java.awt.Color c2 = ((java.awt.Color) (stream.readObject()));
			boolean isCyclic = stream.readBoolean();
			result = new java.awt.GradientPaint(x1, y1, c1, x2, y2, c2, isCyclic);
		}}
}:if (!isNull) {
	java.lang.Class $14 = ((java.lang.Class) (stream.readObject()));
	if (org.jfree.chart.util.SerialUtilities.isSerializable($14)) {
		result = ((java.awt.Paint) (stream.readObject()));
	} else 
	{ 		if ($14.equals(java.awt.GradientPaint.class)) {
			float $15 = stream.readFloat();
			float $16 = stream.readFloat();
			java.awt.Color $17 = ((java.awt.Color) (stream.readObject()));
			float $18 = stream.readFloat();
			float $19 = stream.readFloat();
			java.awt.Color $20 = ((java.awt.Color) (stream.readObject()));
			boolean $21 = stream.readBoolean();
			result = new java.awt.GradientPaint($15, $16, $17, $18, $19, $20, $21);
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e1 == null) {
	return e2 == null;
}:if (e1 == null) {
	return e2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.Line2D) {
	java.awt.geom.Line2D line = ((java.awt.geom.Line2D) (shape));
	stream.writeObject(java.awt.geom.Line2D.class);
	stream.writeDouble(line.getX1());
	stream.writeDouble(line.getY1());
	stream.writeDouble(line.getX2());
	stream.writeDouble(line.getY2());
} else 
{ 	if (shape instanceof java.awt.geom.Rectangle2D) {
		java.awt.geom.Rectangle2D rectangle = ((java.awt.geom.Rectangle2D) (shape));
		stream.writeObject(java.awt.geom.Rectangle2D.class);
		stream.writeDouble(rectangle.getX());
		stream.writeDouble(rectangle.getY());
		stream.writeDouble(rectangle.getWidth());
		stream.writeDouble(rectangle.getHeight());
	} else 
	{ 		if (shape instanceof java.awt.geom.Ellipse2D) {
			java.awt.geom.Ellipse2D ellipse = ((java.awt.geom.Ellipse2D) (shape));
			stream.writeObject(java.awt.geom.Ellipse2D.class);
			stream.writeDouble(ellipse.getX());
			stream.writeDouble(ellipse.getY());
			stream.writeDouble(ellipse.getWidth());
			stream.writeDouble(ellipse.getHeight());
		} else 
		{ 			if (shape instanceof java.awt.geom.Arc2D) {
				java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
				stream.writeObject(java.awt.geom.Arc2D.class);
				stream.writeDouble(arc.getX());
				stream.writeDouble(arc.getY());
				stream.writeDouble(arc.getWidth());
				stream.writeDouble(arc.getHeight());
				stream.writeDouble(arc.getAngleStart());
				stream.writeDouble(arc.getAngleExtent());
				stream.writeInt(arc.getArcType());
			} else 
			{ 				if (shape instanceof java.awt.geom.GeneralPath) {
					stream.writeObject(java.awt.geom.GeneralPath.class);
					java.awt.geom.PathIterator pi = shape.getPathIterator(null);
					float[] args = new float[6];
					stream.writeBoolean(pi.isDone());
					while (!pi.isDone()) {
						int type = pi.currentSegment(args);
						stream.writeInt(type);


						for (int i = 0; i < 6; i++) {
							stream.writeFloat(args[i]);
						}
						stream.writeInt(pi.getWindingRule());
						pi.next();
						stream.writeBoolean(pi.isDone());
					} 
				} else 
				{
					stream.writeObject(shape.getClass());
					stream.writeObject(shape);
				}}}}}:if (shape instanceof java.awt.geom.Line2D) {
	java.awt.geom.Line2D $22 = ((java.awt.geom.Line2D) (shape));
	stream.writeObject(java.awt.geom.Line2D.class);
	stream.writeDouble($22.getX1());
	stream.writeDouble($22.getY1());
	stream.writeDouble($22.getX2());
	stream.writeDouble($22.getY2());
} else 
{ 	if (shape instanceof java.awt.geom.Rectangle2D) {
		java.awt.geom.Rectangle2D $23 = ((java.awt.geom.Rectangle2D) (shape));
		stream.writeObject(java.awt.geom.Rectangle2D.class);
		stream.writeDouble($23.getX());
		stream.writeDouble($23.getY());
		stream.writeDouble($23.getWidth());
		stream.writeDouble($23.getHeight());
	} else 
	{ 		if (shape instanceof java.awt.geom.Ellipse2D) {
			java.awt.geom.Ellipse2D $24 = ((java.awt.geom.Ellipse2D) (shape));
			stream.writeObject(java.awt.geom.Ellipse2D.class);
			stream.writeDouble($24.getX());
			stream.writeDouble($24.getY());
			stream.writeDouble($24.getWidth());
			stream.writeDouble($24.getHeight());
		} else 
		{ 			if (shape instanceof java.awt.geom.Arc2D) {
				java.awt.geom.Arc2D $25 = ((java.awt.geom.Arc2D) (shape));
				stream.writeObject(java.awt.geom.Arc2D.class);
				stream.writeDouble($25.getX());
				stream.writeDouble($25.getY());
				stream.writeDouble($25.getWidth());
				stream.writeDouble($25.getHeight());
				stream.writeDouble($25.getAngleStart());
				stream.writeDouble($25.getAngleExtent());
				stream.writeInt($25.getArcType());
			} else 
			{ 				if (shape instanceof java.awt.geom.GeneralPath) {
					stream.writeObject(java.awt.geom.GeneralPath.class);
					java.awt.geom.PathIterator $26 = shape.getPathIterator(null);
					float[] $27 = new float[6];
					stream.writeBoolean($26.isDone());
					while (!$26.isDone()) {
						int $28 = $26.currentSegment($27);
						stream.writeInt($28);


						for (int $29 = 0; $29 < 6; $29++) {
							stream.writeFloat($27[$29]);
						}
						stream.writeInt($26.getWindingRule());
						$26.next();
						stream.writeBoolean($26.isDone());
					} 
				} else 
				{
					stream.writeObject(shape.getClass());
					stream.writeObject(shape);
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (unitType == null) {
	throw new java.lang.IllegalArgumentException("Null 'unitType' argument.");
}:if (unitType == null) {
	throw new java.lang.IllegalArgumentException("Null 'unitType' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.SortOrder.ASCENDING)) {
	return org.jfree.chart.util.SortOrder.ASCENDING;
} else 
{ 	if (this.equals(org.jfree.chart.util.SortOrder.DESCENDING)) {
		return org.jfree.chart.util.SortOrder.DESCENDING;
	}}:if (this.equals(org.jfree.chart.util.SortOrder.ASCENDING)) {
	return org.jfree.chart.util.SortOrder.ASCENDING;
} else 
{ 	if (this.equals(org.jfree.chart.util.SortOrder.DESCENDING)) {
		return org.jfree.chart.util.SortOrder.DESCENDING;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
} else 
{

	return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
}:if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
} else 
{

	return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.geom.Ellipse2D) && (s2 instanceof java.awt.geom.Ellipse2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Ellipse2D) (s1)), ((java.awt.geom.Ellipse2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
		} else 
		{ 			if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
				return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
			} else 
			{

				return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
			}}}}:if ((s1 instanceof java.awt.geom.Ellipse2D) && (s2 instanceof java.awt.geom.Ellipse2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Ellipse2D) (s1)), ((java.awt.geom.Ellipse2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
		} else 
		{ 			if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
				return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
			} else 
			{

				return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.GradientPaint.class)) {
	float x1 = stream.readFloat();
	float y1 = stream.readFloat();
	java.awt.Color c1 = ((java.awt.Color) (stream.readObject()));
	float x2 = stream.readFloat();
	float y2 = stream.readFloat();
	java.awt.Color c2 = ((java.awt.Color) (stream.readObject()));
	boolean isCyclic = stream.readBoolean();
	result = new java.awt.GradientPaint(x1, y1, c1, x2, y2, c2, isCyclic);
}:if (c.equals(java.awt.GradientPaint.class)) {
	float $0 = stream.readFloat();
	float $1 = stream.readFloat();
	java.awt.Color $2 = ((java.awt.Color) (stream.readObject()));
	float $3 = stream.readFloat();
	float $4 = stream.readFloat();
	java.awt.Color $5 = ((java.awt.Color) (stream.readObject()));
	boolean $6 = stream.readBoolean();
	result = new java.awt.GradientPaint($0, $1, $2, $3, $4, $5, $6);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
			}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getMinY())), paint.getColor1(), 
	((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
	paint.getColor2(), true);
}:if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getMinY())), paint.getColor1(), 
	((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
	paint.getColor2(), true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p1.npoints != p2.npoints) {
	return false;
}:if (p1.npoints != p2.npoints) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
				}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.top != that.top) {
	return false;
}:if (this.top != that.top) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (stroke != null) {
	stream.writeBoolean(false);
	if (stroke instanceof java.awt.BasicStroke) {
		java.awt.BasicStroke s = ((java.awt.BasicStroke) (stroke));
		stream.writeObject(java.awt.BasicStroke.class);
		stream.writeFloat(s.getLineWidth());
		stream.writeInt(s.getEndCap());
		stream.writeInt(s.getLineJoin());
		stream.writeFloat(s.getMiterLimit());
		stream.writeObject(s.getDashArray());
		stream.writeFloat(s.getDashPhase());
	} else 
	{
		stream.writeObject(stroke.getClass());
		stream.writeObject(stroke);
	}
} else 
{
	stream.writeBoolean(true);
}:if (stroke != null) {
	stream.writeBoolean(false);
	if (stroke instanceof java.awt.BasicStroke) {
		java.awt.BasicStroke $1 = ((java.awt.BasicStroke) (stroke));
		stream.writeObject(java.awt.BasicStroke.class);
		stream.writeFloat($1.getLineWidth());
		stream.writeInt($1.getEndCap());
		stream.writeInt($1.getLineJoin());
		stream.writeFloat($1.getMiterLimit());
		stream.writeObject($1.getDashArray());
		stream.writeFloat($1.getDashPhase());
	} else 
	{
		stream.writeObject(stroke.getClass());
		stream.writeObject(stroke);
	}
} else 
{
	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.bottom != that.bottom) {
	return false;
}:if (this.bottom != that.bottom) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.RIGHT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
					result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
						result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
							result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
						} else 
						{ 							if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
								result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
							}}}}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.RIGHT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
					result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
						result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
							result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
						} else 
						{ 							if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
								result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
							}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
	} else 
	{

		return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
	}}:if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
	} else 
	{

		return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.VERTICAL;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
			result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
				result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
			}}}}:if (this.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.VERTICAL;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
			result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
				result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(that.name)) {
	return false;
}:if (!this.name.equals(that.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.Rectangle2D) {
	java.awt.geom.Rectangle2D rectangle = ((java.awt.geom.Rectangle2D) (shape));
	stream.writeObject(java.awt.geom.Rectangle2D.class);
	stream.writeDouble(rectangle.getX());
	stream.writeDouble(rectangle.getY());
	stream.writeDouble(rectangle.getWidth());
	stream.writeDouble(rectangle.getHeight());
} else 
{ 	if (shape instanceof java.awt.geom.Ellipse2D) {
		java.awt.geom.Ellipse2D ellipse = ((java.awt.geom.Ellipse2D) (shape));
		stream.writeObject(java.awt.geom.Ellipse2D.class);
		stream.writeDouble(ellipse.getX());
		stream.writeDouble(ellipse.getY());
		stream.writeDouble(ellipse.getWidth());
		stream.writeDouble(ellipse.getHeight());
	} else 
	{ 		if (shape instanceof java.awt.geom.Arc2D) {
			java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
			stream.writeObject(java.awt.geom.Arc2D.class);
			stream.writeDouble(arc.getX());
			stream.writeDouble(arc.getY());
			stream.writeDouble(arc.getWidth());
			stream.writeDouble(arc.getHeight());
			stream.writeDouble(arc.getAngleStart());
			stream.writeDouble(arc.getAngleExtent());
			stream.writeInt(arc.getArcType());
		} else 
		{ 			if (shape instanceof java.awt.geom.GeneralPath) {
				stream.writeObject(java.awt.geom.GeneralPath.class);
				java.awt.geom.PathIterator pi = shape.getPathIterator(null);
				float[] args = new float[6];
				stream.writeBoolean(pi.isDone());
				while (!pi.isDone()) {
					int type = pi.currentSegment(args);
					stream.writeInt(type);


					for (int i = 0; i < 6; i++) {
						stream.writeFloat(args[i]);
					}
					stream.writeInt(pi.getWindingRule());
					pi.next();
					stream.writeBoolean(pi.isDone());
				} 
			} else 
			{
				stream.writeObject(shape.getClass());
				stream.writeObject(shape);
			}}}}:if (shape instanceof java.awt.geom.Rectangle2D) {
	java.awt.geom.Rectangle2D $15 = ((java.awt.geom.Rectangle2D) (shape));
	stream.writeObject(java.awt.geom.Rectangle2D.class);
	stream.writeDouble($15.getX());
	stream.writeDouble($15.getY());
	stream.writeDouble($15.getWidth());
	stream.writeDouble($15.getHeight());
} else 
{ 	if (shape instanceof java.awt.geom.Ellipse2D) {
		java.awt.geom.Ellipse2D $16 = ((java.awt.geom.Ellipse2D) (shape));
		stream.writeObject(java.awt.geom.Ellipse2D.class);
		stream.writeDouble($16.getX());
		stream.writeDouble($16.getY());
		stream.writeDouble($16.getWidth());
		stream.writeDouble($16.getHeight());
	} else 
	{ 		if (shape instanceof java.awt.geom.Arc2D) {
			java.awt.geom.Arc2D $17 = ((java.awt.geom.Arc2D) (shape));
			stream.writeObject(java.awt.geom.Arc2D.class);
			stream.writeDouble($17.getX());
			stream.writeDouble($17.getY());
			stream.writeDouble($17.getWidth());
			stream.writeDouble($17.getHeight());
			stream.writeDouble($17.getAngleStart());
			stream.writeDouble($17.getAngleExtent());
			stream.writeInt($17.getArcType());
		} else 
		{ 			if (shape instanceof java.awt.geom.GeneralPath) {
				stream.writeObject(java.awt.geom.GeneralPath.class);
				java.awt.geom.PathIterator $18 = shape.getPathIterator(null);
				float[] $19 = new float[6];
				stream.writeBoolean($18.isDone());
				while (!$18.isDone()) {
					int $20 = $18.currentSegment($19);
					stream.writeInt($20);


					for (int $21 = 0; $21 < 6; $21++) {
						stream.writeFloat($19[$21]);
					}
					stream.writeInt($18.getWindingRule());
					$18.next();
					stream.writeBoolean($18.isDone());
				} 
			} else 
			{
				stream.writeObject(shape.getClass());
				stream.writeObject(shape);
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (name.startsWith("/")) {

	return name.substring(1);
}:if (name.startsWith("/")) {

	return name.substring(1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (vertical) {
	topMargin = calculateTopInset(base.getHeight());
	bottomMargin = calculateBottomInset(base.getHeight());
}:if (vertical) {
	topMargin = calculateTopInset(base.getHeight());
	bottomMargin = calculateBottomInset(base.getHeight());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.util.Arrays.equals(array1[i], array2[i])) {
	return false;
}:if (!java.util.Arrays.equals(array1[i], array2[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (limit1 != limit2) {
	return false;
}:if (limit1 != limit2) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (applicationCL == null) {
	return java.lang.ClassLoader.getSystemClassLoader();
} else 
{
	return applicationCL;
}:if (applicationCL == null) {
	return java.lang.ClassLoader.getSystemClassLoader();
} else 
{
	return applicationCL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
		} else 
		{

			return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
		}}}:if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
		} else 
		{

			return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.SortOrder)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.SortOrder)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (that.unitType != this.unitType) {
	return false;
}:if (that.unitType != this.unitType) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(that.toString())) {
	return false;
}:if (!this.name.equals(that.toString())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showBase) {
	result.append(this.baseLabel);
	result.append(this.powerLabel);
}:if (this.showBase) {
	result.append(this.baseLabel);
	result.append(this.powerLabel);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.Ellipse2D.class)) {
	double x = stream.readDouble();
	double y = stream.readDouble();
	double w = stream.readDouble();
	double h = stream.readDouble();
	result = new java.awt.geom.Ellipse2D.Double(x, y, w, h);
} else 
{ 	if (c.equals(java.awt.geom.Arc2D.class)) {
		double x = stream.readDouble();
		double y = stream.readDouble();
		double w = stream.readDouble();
		double h = stream.readDouble();
		double as = stream.readDouble();
		double ae = stream.readDouble();
		int at = stream.readInt();
		result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
	} else 
	{ 		if (c.equals(java.awt.geom.GeneralPath.class)) {
			java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
			float[] args = new float[6];
			boolean hasNext = stream.readBoolean();
			while (!hasNext) {
				int type = stream.readInt();
				for (int i = 0; i < 6; i++) {
					args[i] = stream.readFloat();
				}
				switch (type) {
					case java.awt.geom.PathIterator.SEG_MOVETO :
						gp.moveTo(args[0], args[1]);
						break;
					case java.awt.geom.PathIterator.SEG_LINETO :
						gp.lineTo(args[0], args[1]);
						break;
					case java.awt.geom.PathIterator.SEG_CUBICTO :
						gp.curveTo(args[0], args[1], args[2], 
						args[3], args[4], args[5]);
						break;
					case java.awt.geom.PathIterator.SEG_QUADTO :
						gp.quadTo(args[0], args[1], args[2], args[3]);
						break;
					case java.awt.geom.PathIterator.SEG_CLOSE :
						gp.closePath();
						break;
					default :
						throw new java.lang.RuntimeException(
						"JFreeChart - No path exists");}

				gp.setWindingRule(stream.readInt());
				hasNext = stream.readBoolean();
			} 
			result = gp;
		} else 
		{
			result = ((java.awt.Shape) (stream.readObject()));
		}}}:if (c.equals(java.awt.geom.Ellipse2D.class)) {
	double $17 = stream.readDouble();
	double $18 = stream.readDouble();
	double $19 = stream.readDouble();
	double $20 = stream.readDouble();
	result = new java.awt.geom.Ellipse2D.Double($17, $18, $19, $20);
} else 
{ 	if (c.equals(java.awt.geom.Arc2D.class)) {
		double $21 = stream.readDouble();
		double $22 = stream.readDouble();
		double $23 = stream.readDouble();
		double $24 = stream.readDouble();
		double $25 = stream.readDouble();
		double $26 = stream.readDouble();
		int $27 = stream.readInt();
		result = new java.awt.geom.Arc2D.Double($21, $22, $23, $24, $25, $26, $27);
	} else 
	{ 		if (c.equals(java.awt.geom.GeneralPath.class)) {
			java.awt.geom.GeneralPath $28 = new java.awt.geom.GeneralPath();
			float[] $29 = new float[6];
			boolean $30 = stream.readBoolean();
			while (!$30) {
				int $31 = stream.readInt();
				for (int $32 = 0; $32 < 6; $32++) {
					$29[$32] = stream.readFloat();
				}
				switch ($31) {
					case java.awt.geom.PathIterator.SEG_MOVETO :
						$28.moveTo($29[0], $29[1]);
						break;
					case java.awt.geom.PathIterator.SEG_LINETO :
						$28.lineTo($29[0], $29[1]);
						break;
					case java.awt.geom.PathIterator.SEG_CUBICTO :
						$28.curveTo($29[0], $29[1], $29[2], 
						$29[3], $29[4], $29[5]);
						break;
					case java.awt.geom.PathIterator.SEG_QUADTO :
						$28.quadTo($29[0], $29[1], $29[2], $29[3]);
						break;
					case java.awt.geom.PathIterator.SEG_CLOSE :
						$28.closePath();
						break;
					default :
						throw new java.lang.RuntimeException(
						"JFreeChart - No path exists");}

				$28.setWindingRule(stream.readInt());
				$30 = stream.readBoolean();
			} 
			result = $28;
		} else 
		{
			result = ((java.awt.Shape) (stream.readObject()));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type != that.type) {
	return false;
}:if (this.type != that.type) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.FIT_VERTICAL) == org.jfree.chart.util.Align.FIT_VERTICAL) {
	h = frame.getHeight();
}:if ((align & org.jfree.chart.util.Align.FIT_VERTICAL) == org.jfree.chart.util.Align.FIT_VERTICAL) {
	h = frame.getHeight();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array2 == null) {
	return false;
}:if (array2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.GradientPaintTransformType)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.GradientPaintTransformType)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
	return org.jfree.chart.util.VerticalAlignment.CENTER;
} else 
{
	return null;
}:if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
	return org.jfree.chart.util.VerticalAlignment.CENTER;
} else 
{
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1[i] != array2[i]) {
	return false;
}:if (array1[i] != array2[i]) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleEdge.TOP)) {
	result = org.jfree.chart.util.RectangleEdge.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.BOTTOM)) {
		result = org.jfree.chart.util.RectangleEdge.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
			result = org.jfree.chart.util.RectangleEdge.LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
				result = org.jfree.chart.util.RectangleEdge.RIGHT;
			}}}}:if (this.equals(org.jfree.chart.util.RectangleEdge.TOP)) {
	result = org.jfree.chart.util.RectangleEdge.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.BOTTOM)) {
		result = org.jfree.chart.util.RectangleEdge.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
			result = org.jfree.chart.util.RectangleEdge.LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
				result = org.jfree.chart.util.RectangleEdge.RIGHT;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(oColor)) {
	return name;
}:if (c.equals(oColor)) {
	return name;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == null) {
	throw new java.lang.IllegalArgumentException("Null 'anchor' argument.");
}:if (anchor == null) {
	throw new java.lang.IllegalArgumentException("Null 'anchor' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type.equals(
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getCenterY())), paint.getColor2(), 
	((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
	paint.getColor1(), true);
} else 
{ 	if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
		((float) (bounds.getMinY())), paint.getColor1(), 
		((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
		paint.getColor2(), true);
	}}:if (this.type.equals(
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getCenterY())), paint.getColor2(), 
	((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
	paint.getColor1(), true);
} else 
{ 	if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
		((float) (bounds.getMinY())), paint.getColor1(), 
		((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
		paint.getColor2(), true);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (event.getWindow() == this) {
	dispose();
	java.lang.System.exit(0);
}:if (event.getWindow() == this) {
	dispose();
	java.lang.System.exit(0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getMinY())), paint.getColor1(), 
	((float) (bounds.getCenterX())), ((float) (bounds.getMaxY())), 
	paint.getColor2());
} else 
{ 	if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getMinX())), 
		((float) (bounds.getCenterY())), paint.getColor1(), 
		((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
		paint.getColor2());
	} else 
	{ 		if (this.type.equals(
		org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
			result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
			((float) (bounds.getCenterY())), paint.getColor2(), 
			((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
			paint.getColor1(), true);
		} else 
		{ 			if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
				result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
				((float) (bounds.getMinY())), paint.getColor1(), 
				((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
				paint.getColor2(), true);
			}}}}:if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getMinY())), paint.getColor1(), 
	((float) (bounds.getCenterX())), ((float) (bounds.getMaxY())), 
	paint.getColor2());
} else 
{ 	if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getMinX())), 
		((float) (bounds.getCenterY())), paint.getColor1(), 
		((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
		paint.getColor2());
	} else 
	{ 		if (this.type.equals(
		org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
			result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
			((float) (bounds.getCenterY())), paint.getColor2(), 
			((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
			paint.getColor1(), true);
		} else 
		{ 			if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
				result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
				((float) (bounds.getMinY())), paint.getColor1(), 
				((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
				paint.getColor2(), true);
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.baseLabel.equals(that.baseLabel)) {
	return false;
}:if (!this.baseLabel.equals(that.baseLabel)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (paint != null) {
	stream.writeBoolean(false);
	stream.writeObject(paint.getClass());
	if (paint instanceof java.io.Serializable) {
		stream.writeObject(paint);
	} else 
	{ 		if (paint instanceof java.awt.GradientPaint) {
			java.awt.GradientPaint gp = ((java.awt.GradientPaint) (paint));
			stream.writeFloat(((float) (gp.getPoint1().getX())));
			stream.writeFloat(((float) (gp.getPoint1().getY())));
			stream.writeObject(gp.getColor1());
			stream.writeFloat(((float) (gp.getPoint2().getX())));
			stream.writeFloat(((float) (gp.getPoint2().getY())));
			stream.writeObject(gp.getColor2());
			stream.writeBoolean(gp.isCyclic());
		}}
} else 
{
	stream.writeBoolean(true);
}:if (paint != null) {
	stream.writeBoolean(false);
	stream.writeObject(paint.getClass());
	if (paint instanceof java.io.Serializable) {
		stream.writeObject(paint);
	} else 
	{ 		if (paint instanceof java.awt.GradientPaint) {
			java.awt.GradientPaint $2 = ((java.awt.GradientPaint) (paint));
			stream.writeFloat(((float) ($2.getPoint1().getX())));
			stream.writeFloat(((float) ($2.getPoint1().getY())));
			stream.writeObject($2.getColor1());
			stream.writeFloat(((float) ($2.getPoint2().getX())));
			stream.writeFloat(((float) ($2.getPoint2().getY())));
			stream.writeObject($2.getColor2());
			stream.writeBoolean($2.isCyclic());
		}}
} else 
{
	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p1.getWindingRule() != p2.getWindingRule()) {
	return false;
}:if (p1.getWindingRule() != p2.getWindingRule()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
	}}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.RectangleAnchor)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.RectangleAnchor)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!m1.equals(m2)) {
	return false;
}:if (!m1.equals(m2)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showBase != that.showBase) {
	return false;
}:if (this.showBase != that.showBase) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (iterator1.isDone() != iterator2.isDone()) {
	return false;
}:if (iterator1.isDone() != iterator2.isDone()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
	result = org.jfree.chart.util.HorizontalAlignment.CENTER;
}:if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
	result = org.jfree.chart.util.HorizontalAlignment.CENTER;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o1 == null) {
	return 1;
}:if (o1 == null) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.jfree.chart.util.PaintUtilities.equal(getPaint(i), that.getPaint(i))) {
	return false;
}:if (!org.jfree.chart.util.PaintUtilities.equal(getPaint(i), that.getPaint(i))) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
			}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.UnitType.ABSOLUTE)) {
	return org.jfree.chart.util.UnitType.ABSOLUTE;
} else 
{ 	if (this.equals(org.jfree.chart.util.UnitType.RELATIVE)) {
		return org.jfree.chart.util.UnitType.RELATIVE;
	}}:if (this.equals(org.jfree.chart.util.UnitType.ABSOLUTE)) {
	return org.jfree.chart.util.UnitType.ABSOLUTE;
} else 
{ 	if (this.equals(org.jfree.chart.util.UnitType.RELATIVE)) {
		return org.jfree.chart.util.UnitType.RELATIVE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.SortOrder.DESCENDING)) {
	return org.jfree.chart.util.SortOrder.DESCENDING;
}:if (this.equals(org.jfree.chart.util.SortOrder.DESCENDING)) {
	return org.jfree.chart.util.SortOrder.DESCENDING;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {
	java.lang.Class c = ((java.lang.Class) (stream.readObject()));
	if (c.equals(java.awt.BasicStroke.class)) {
		float width = stream.readFloat();
		int cap = stream.readInt();
		int join = stream.readInt();
		float miterLimit = stream.readFloat();
		float[] dash = ((float[]) (stream.readObject()));
		float dashPhase = stream.readFloat();
		result = new java.awt.BasicStroke(width, cap, join, miterLimit, dash, 
		dashPhase);
	} else 
	{
		result = ((java.awt.Stroke) (stream.readObject()));
	}
}:if (!isNull) {
	java.lang.Class $6 = ((java.lang.Class) (stream.readObject()));
	if ($6.equals(java.awt.BasicStroke.class)) {
		float $7 = stream.readFloat();
		int $8 = stream.readInt();
		int $9 = stream.readInt();
		float $10 = stream.readFloat();
		float[] $11 = ((float[]) (stream.readObject()));
		float $12 = stream.readFloat();
		result = new java.awt.BasicStroke($7, $8, $9, $10, $11, 
		$12);
	} else 
	{
		result = ((java.awt.Stroke) (stream.readObject()));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (l2 == null) {
	return false;
}:if (l2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.HorizontalAlignment.RIGHT)) {
	result = org.jfree.chart.util.HorizontalAlignment.RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
		result = org.jfree.chart.util.HorizontalAlignment.CENTER;
	}}:if (this.equals(org.jfree.chart.util.HorizontalAlignment.RIGHT)) {
	result = org.jfree.chart.util.HorizontalAlignment.RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
		result = org.jfree.chart.util.HorizontalAlignment.CENTER;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (threadLoader != null) {
	return threadLoader;
}:if (threadLoader != null) {
	return threadLoader;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {
	double x = stream.readDouble();
	double y = stream.readDouble();
	result = new java.awt.geom.Point2D.Double(x, y);
}:if (!isNull) {
	double $0 = stream.readDouble();
	double $1 = stream.readDouble();
	result = new java.awt.geom.Point2D.Double($0, $1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (cl == null) {
	return null;
}:if (cl == null) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (vertical == org.jfree.chart.util.LengthAdjustmentType.EXPAND) {
	double topMargin = calculateTopOutset(h);
	y = y - topMargin;
	h = (h + topMargin) + calculateBottomOutset(h);
} else 
{ 	if (vertical == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
		double topMargin = calculateTopInset(h);
		y = y + topMargin;
		h = (h - topMargin) - calculateBottomInset(h);
	}}:if (vertical == org.jfree.chart.util.LengthAdjustmentType.EXPAND) {
	double $4 = calculateTopOutset(h);
	y = y - $4;
	h = (h + $4) + calculateBottomOutset(h);
} else 
{ 	if (vertical == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
		double $5 = calculateTopInset(h);
		y = y + $5;
		h = (h - $5) - calculateBottomInset(h);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.jfree.chart.util.ObjectUtilities.classLoader != null) {
	return org.jfree.chart.util.ObjectUtilities.classLoader;
}:if (org.jfree.chart.util.ObjectUtilities.classLoader != null) {
	return org.jfree.chart.util.ObjectUtilities.classLoader;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.CENTER) {
	result.setLocation(rectangle.getCenterX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
		result.setLocation(rectangle.getCenterX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
			result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
						result.setLocation(rectangle.getMinX(), rectangle.getMinY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
							result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
								result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
							} else 
							{ 								if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
									result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
								}}}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.CENTER) {
	result.setLocation(rectangle.getCenterX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
		result.setLocation(rectangle.getCenterX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
			result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
						result.setLocation(rectangle.getMinX(), rectangle.getMinY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
							result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
								result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
							} else 
							{ 								if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
									result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
								}}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (collection == null) {
	throw new java.lang.IllegalArgumentException("Null 'collection' argument.");
}:if (collection == null) {
	throw new java.lang.IllegalArgumentException("Null 'collection' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s1 == null) {
	return s2 == null;
}:if (s1 == null) {
	return s2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1[i] == null) {
	if (array2[i] != null) {
		return false;
	}
}:if (array1[i] == null) {
	if (array2[i] != null) {
		return false;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.LogFormat)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.LogFormat)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (as != null) {
	stream.writeBoolean(false);
	java.text.AttributedCharacterIterator aci = as.getIterator();


	java.lang.StringBuffer plainStr = new java.lang.StringBuffer();
	char current = aci.first();
	while (current != java.text.CharacterIterator.DONE) {
		plainStr = plainStr.append(current);
		current = aci.next();
	} 
	stream.writeObject(plainStr.toString());


	current = aci.first();
	int begin = aci.getBeginIndex();
	while (current != java.text.CharacterIterator.DONE) {



		stream.writeChar(current);


		int limit = aci.getRunLimit();
		stream.writeInt(limit - begin);


		java.util.Map atts = new java.util.HashMap(aci.getAttributes());
		stream.writeObject(atts);
		current = aci.setIndex(limit);
	} 


	stream.writeChar(java.text.CharacterIterator.DONE);
} else 
{

	stream.writeBoolean(true);
}:if (as != null) {
	stream.writeBoolean(false);
	java.text.AttributedCharacterIterator $0 = as.getIterator();


	java.lang.StringBuffer $1 = new java.lang.StringBuffer();
	char $2 = $0.first();
	while ($2 != java.text.CharacterIterator.DONE) {
		$1 = $1.append($2);
		$2 = $0.next();
	} 
	stream.writeObject($1.toString());


	$2 = $0.first();
	int $3 = $0.getBeginIndex();
	while ($2 != java.text.CharacterIterator.DONE) {



		stream.writeChar($2);


		int $4 = $0.getRunLimit();
		stream.writeInt($4 - $3);


		java.util.Map $5 = new java.util.HashMap($0.getAttributes());
		stream.writeObject($5);
		$2 = $0.setIndex($4);
	} 


	stream.writeChar(java.text.CharacterIterator.DONE);
} else 
{

	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.right != that.right) {
	return false;
}:if (this.right != that.right) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index != (-1)) {
	setStroke(index, org.jfree.chart.util.SerialUtilities.readStroke(stream));
}:if (index != (-1)) {
	setStroke(index, org.jfree.chart.util.SerialUtilities.readStroke(stream));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(alignment.name)) {
	return false;
}:if (!this.name.equals(alignment.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.Rotation.ANTICLOCKWISE)) {
	return org.jfree.chart.util.Rotation.ANTICLOCKWISE;
}:if (this.equals(org.jfree.chart.util.Rotation.ANTICLOCKWISE)) {
	return org.jfree.chart.util.Rotation.ANTICLOCKWISE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (stream == null) {
	throw new java.lang.IllegalArgumentException("Null 'stream' argument.");
}:if (stream == null) {
	throw new java.lang.IllegalArgumentException("Null 'stream' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (vertical == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
	double topMargin = calculateTopInset(h);
	y = y + topMargin;
	h = (h - topMargin) - calculateBottomInset(h);
}:if (vertical == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
	double $3 = calculateTopInset(h);
	y = y + $3;
	h = (h - $3) - calculateBottomInset(h);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a == null) {
	return 0;
}:if (a == null) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape != null) {
	stream.writeBoolean(false);
	if (shape instanceof java.awt.geom.Line2D) {
		java.awt.geom.Line2D line = ((java.awt.geom.Line2D) (shape));
		stream.writeObject(java.awt.geom.Line2D.class);
		stream.writeDouble(line.getX1());
		stream.writeDouble(line.getY1());
		stream.writeDouble(line.getX2());
		stream.writeDouble(line.getY2());
	} else 
	{ 		if (shape instanceof java.awt.geom.Rectangle2D) {
			java.awt.geom.Rectangle2D rectangle = ((java.awt.geom.Rectangle2D) (shape));
			stream.writeObject(java.awt.geom.Rectangle2D.class);
			stream.writeDouble(rectangle.getX());
			stream.writeDouble(rectangle.getY());
			stream.writeDouble(rectangle.getWidth());
			stream.writeDouble(rectangle.getHeight());
		} else 
		{ 			if (shape instanceof java.awt.geom.Ellipse2D) {
				java.awt.geom.Ellipse2D ellipse = ((java.awt.geom.Ellipse2D) (shape));
				stream.writeObject(java.awt.geom.Ellipse2D.class);
				stream.writeDouble(ellipse.getX());
				stream.writeDouble(ellipse.getY());
				stream.writeDouble(ellipse.getWidth());
				stream.writeDouble(ellipse.getHeight());
			} else 
			{ 				if (shape instanceof java.awt.geom.Arc2D) {
					java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
					stream.writeObject(java.awt.geom.Arc2D.class);
					stream.writeDouble(arc.getX());
					stream.writeDouble(arc.getY());
					stream.writeDouble(arc.getWidth());
					stream.writeDouble(arc.getHeight());
					stream.writeDouble(arc.getAngleStart());
					stream.writeDouble(arc.getAngleExtent());
					stream.writeInt(arc.getArcType());
				} else 
				{ 					if (shape instanceof java.awt.geom.GeneralPath) {
						stream.writeObject(java.awt.geom.GeneralPath.class);
						java.awt.geom.PathIterator pi = shape.getPathIterator(null);
						float[] args = new float[6];
						stream.writeBoolean(pi.isDone());
						while (!pi.isDone()) {
							int type = pi.currentSegment(args);
							stream.writeInt(type);


							for (int i = 0; i < 6; i++) {
								stream.writeFloat(args[i]);
							}
							stream.writeInt(pi.getWindingRule());
							pi.next();
							stream.writeBoolean(pi.isDone());
						} 
					} else 
					{
						stream.writeObject(shape.getClass());
						stream.writeObject(shape);
					}}}}}
} else 
{
	stream.writeBoolean(true);
}:if (shape != null) {
	stream.writeBoolean(false);
	if (shape instanceof java.awt.geom.Line2D) {
		java.awt.geom.Line2D $30 = ((java.awt.geom.Line2D) (shape));
		stream.writeObject(java.awt.geom.Line2D.class);
		stream.writeDouble($30.getX1());
		stream.writeDouble($30.getY1());
		stream.writeDouble($30.getX2());
		stream.writeDouble($30.getY2());
	} else 
	{ 		if (shape instanceof java.awt.geom.Rectangle2D) {
			java.awt.geom.Rectangle2D $31 = ((java.awt.geom.Rectangle2D) (shape));
			stream.writeObject(java.awt.geom.Rectangle2D.class);
			stream.writeDouble($31.getX());
			stream.writeDouble($31.getY());
			stream.writeDouble($31.getWidth());
			stream.writeDouble($31.getHeight());
		} else 
		{ 			if (shape instanceof java.awt.geom.Ellipse2D) {
				java.awt.geom.Ellipse2D $32 = ((java.awt.geom.Ellipse2D) (shape));
				stream.writeObject(java.awt.geom.Ellipse2D.class);
				stream.writeDouble($32.getX());
				stream.writeDouble($32.getY());
				stream.writeDouble($32.getWidth());
				stream.writeDouble($32.getHeight());
			} else 
			{ 				if (shape instanceof java.awt.geom.Arc2D) {
					java.awt.geom.Arc2D $33 = ((java.awt.geom.Arc2D) (shape));
					stream.writeObject(java.awt.geom.Arc2D.class);
					stream.writeDouble($33.getX());
					stream.writeDouble($33.getY());
					stream.writeDouble($33.getWidth());
					stream.writeDouble($33.getHeight());
					stream.writeDouble($33.getAngleStart());
					stream.writeDouble($33.getAngleExtent());
					stream.writeInt($33.getArcType());
				} else 
				{ 					if (shape instanceof java.awt.geom.GeneralPath) {
						stream.writeObject(java.awt.geom.GeneralPath.class);
						java.awt.geom.PathIterator $34 = shape.getPathIterator(null);
						float[] $35 = new float[6];
						stream.writeBoolean($34.isDone());
						while (!$34.isDone()) {
							int $36 = $34.currentSegment($35);
							stream.writeInt($36);


							for (int $37 = 0; $37 < 6; $37++) {
								stream.writeFloat($35[$37]);
							}
							stream.writeInt($34.getWindingRule());
							$34.next();
							stream.writeBoolean($34.isDone());
						} 
					} else 
					{
						stream.writeObject(shape.getClass());
						stream.writeObject(shape);
					}}}}}
} else 
{
	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.BasicStroke.class)) {
	float width = stream.readFloat();
	int cap = stream.readInt();
	int join = stream.readInt();
	float miterLimit = stream.readFloat();
	float[] dash = ((float[]) (stream.readObject()));
	float dashPhase = stream.readFloat();
	result = new java.awt.BasicStroke(width, cap, join, miterLimit, dash, 
	dashPhase);
} else 
{
	result = ((java.awt.Stroke) (stream.readObject()));
}:if (c.equals(java.awt.BasicStroke.class)) {
	float $0 = stream.readFloat();
	int $1 = stream.readInt();
	int $2 = stream.readInt();
	float $3 = stream.readFloat();
	float[] $4 = ((float[]) (stream.readObject()));
	float $5 = stream.readFloat();
	result = new java.awt.BasicStroke($0, $1, $2, $3, $4, 
	$5);
} else 
{
	result = ((java.awt.Stroke) (stream.readObject()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.CENTER)) {
	result = org.jfree.chart.util.RectangleAnchor.CENTER;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.RIGHT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
						result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
							result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
						} else 
						{ 							if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
								result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
							} else 
							{ 								if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
									result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
								}}}}}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.CENTER)) {
	result = org.jfree.chart.util.RectangleAnchor.CENTER;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.RIGHT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
						result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
							result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
						} else 
						{ 							if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
								result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
							} else 
							{ 								if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
									result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
								}}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!l1.getP2().equals(l2.getP2())) {
	return false;
}:if (!l1.getP2().equals(l2.getP2())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.util.Arrays.equals(p1.ypoints, p2.ypoints)) {
	return false;
}:if (!java.util.Arrays.equals(p1.ypoints, p2.ypoints)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (height / ((1 - this.top) - this.bottom)) * this.top;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (height / ((1 - this.top) - this.bottom)) * this.top;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o2 == null) {
	return -1;
}:if (o2 == null) {
	return -1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (height / ((1 - this.top) - this.bottom)) * this.bottom;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (height / ((1 - this.top) - this.bottom)) * this.bottom;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (item != null) {
	result.add(org.jfree.chart.util.ObjectUtilities.clone(item));
} else 
{
	result.add(null);
}:if (item != null) {
	result.add(org.jfree.chart.util.ObjectUtilities.clone(item));
} else 
{
	result.add(null);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.positivePrefix.equals(that.positivePrefix)) {
	return false;
}:if (!this.positivePrefix.equals(that.positivePrefix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (stroke instanceof java.awt.BasicStroke) {
	java.awt.BasicStroke s = ((java.awt.BasicStroke) (stroke));
	stream.writeObject(java.awt.BasicStroke.class);
	stream.writeFloat(s.getLineWidth());
	stream.writeInt(s.getEndCap());
	stream.writeInt(s.getLineJoin());
	stream.writeFloat(s.getMiterLimit());
	stream.writeObject(s.getDashArray());
	stream.writeFloat(s.getDashPhase());
} else 
{
	stream.writeObject(stroke.getClass());
	stream.writeObject(stroke);
}:if (stroke instanceof java.awt.BasicStroke) {
	java.awt.BasicStroke $0 = ((java.awt.BasicStroke) (stroke));
	stream.writeObject(java.awt.BasicStroke.class);
	stream.writeFloat($0.getLineWidth());
	stream.writeInt($0.getEndCap());
	stream.writeInt($0.getLineJoin());
	stream.writeFloat($0.getMiterLimit());
	stream.writeObject($0.getDashArray());
	stream.writeFloat($0.getDashPhase());
} else 
{
	stream.writeObject(stroke.getClass());
	stream.writeObject(stroke);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.secondSuffix.equals(that.secondSuffix)) {
	return false;
}:if (!this.secondSuffix.equals(that.secondSuffix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (retval != 0) {
	return retval;
}:if (retval != 0) {
	return retval;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o1.equals(o2)) {
	return true;
}:if (o1.equals(o2)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.FIT_HORIZONTAL) == org.jfree.chart.util.Align.FIT_HORIZONTAL) {
	w = frame.getWidth();
}:if ((align & org.jfree.chart.util.Align.FIT_HORIZONTAL) == org.jfree.chart.util.Align.FIT_HORIZONTAL) {
	w = frame.getWidth();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (size > 1) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[size - 1]);
	if (size > 2) {
		result = org.jfree.chart.util.HashUtilities.hashCode(result, 
		this.objects[size / 2]);
	}
}:if (size > 1) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[size - 1]);
	if (size > 2) {
		result = org.jfree.chart.util.HashUtilities.hashCode(result, 
		this.objects[size / 2]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.RectangleEdge)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.RectangleEdge)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.Ellipse2D) {
	java.awt.geom.Ellipse2D ellipse = ((java.awt.geom.Ellipse2D) (shape));
	stream.writeObject(java.awt.geom.Ellipse2D.class);
	stream.writeDouble(ellipse.getX());
	stream.writeDouble(ellipse.getY());
	stream.writeDouble(ellipse.getWidth());
	stream.writeDouble(ellipse.getHeight());
} else 
{ 	if (shape instanceof java.awt.geom.Arc2D) {
		java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
		stream.writeObject(java.awt.geom.Arc2D.class);
		stream.writeDouble(arc.getX());
		stream.writeDouble(arc.getY());
		stream.writeDouble(arc.getWidth());
		stream.writeDouble(arc.getHeight());
		stream.writeDouble(arc.getAngleStart());
		stream.writeDouble(arc.getAngleExtent());
		stream.writeInt(arc.getArcType());
	} else 
	{ 		if (shape instanceof java.awt.geom.GeneralPath) {
			stream.writeObject(java.awt.geom.GeneralPath.class);
			java.awt.geom.PathIterator pi = shape.getPathIterator(null);
			float[] args = new float[6];
			stream.writeBoolean(pi.isDone());
			while (!pi.isDone()) {
				int type = pi.currentSegment(args);
				stream.writeInt(type);


				for (int i = 0; i < 6; i++) {
					stream.writeFloat(args[i]);
				}
				stream.writeInt(pi.getWindingRule());
				pi.next();
				stream.writeBoolean(pi.isDone());
			} 
		} else 
		{
			stream.writeObject(shape.getClass());
			stream.writeObject(shape);
		}}}:if (shape instanceof java.awt.geom.Ellipse2D) {
	java.awt.geom.Ellipse2D $9 = ((java.awt.geom.Ellipse2D) (shape));
	stream.writeObject(java.awt.geom.Ellipse2D.class);
	stream.writeDouble($9.getX());
	stream.writeDouble($9.getY());
	stream.writeDouble($9.getWidth());
	stream.writeDouble($9.getHeight());
} else 
{ 	if (shape instanceof java.awt.geom.Arc2D) {
		java.awt.geom.Arc2D $10 = ((java.awt.geom.Arc2D) (shape));
		stream.writeObject(java.awt.geom.Arc2D.class);
		stream.writeDouble($10.getX());
		stream.writeDouble($10.getY());
		stream.writeDouble($10.getWidth());
		stream.writeDouble($10.getHeight());
		stream.writeDouble($10.getAngleStart());
		stream.writeDouble($10.getAngleExtent());
		stream.writeInt($10.getArcType());
	} else 
	{ 		if (shape instanceof java.awt.geom.GeneralPath) {
			stream.writeObject(java.awt.geom.GeneralPath.class);
			java.awt.geom.PathIterator $11 = shape.getPathIterator(null);
			float[] $12 = new float[6];
			stream.writeBoolean($11.isDone());
			while (!$11.isDone()) {
				int $13 = $11.currentSegment($12);
				stream.writeInt($13);


				for (int $14 = 0; $14 < 6; $14++) {
					stream.writeFloat($12[$14]);
				}
				stream.writeInt($11.getWindingRule());
				$11.next();
				stream.writeBoolean($11.isDone());
			} 
		} else 
		{
			stream.writeObject(shape.getClass());
			stream.writeObject(shape);
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.util.Arrays.equals(p1.xpoints, p2.xpoints)) {
	return false;
}:if (!java.util.Arrays.equals(p1.xpoints, p2.xpoints)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.TableOrder.BY_COLUMN)) {
	return org.jfree.chart.util.TableOrder.BY_COLUMN;
}:if (this.equals(org.jfree.chart.util.TableOrder.BY_COLUMN)) {
	return org.jfree.chart.util.TableOrder.BY_COLUMN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.lang.Cloneable) {
	try {
		return ((java.awt.Shape) (org.jfree.chart.util.ObjectUtilities.clone(shape)));
	}
	 catch (java.lang.CloneNotSupportedException cnse) {
	}
}:if (shape instanceof java.lang.Cloneable) {
	try {
		return ((java.awt.Shape) (org.jfree.chart.util.ObjectUtilities.clone(shape)));
	}
	 catch (java.lang.CloneNotSupportedException cnse) {
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!l1.getP1().equals(l2.getP1())) {
	return false;
}:if (!l1.getP1().equals(l2.getP1())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj instanceof org.jfree.chart.util.ShapeList) {
	return super.equals(obj);
}:if (obj instanceof org.jfree.chart.util.ShapeList) {
	return super.equals(obj);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (horizontal == org.jfree.chart.util.LengthAdjustmentType.EXPAND) {
	double leftOutset = calculateLeftOutset(w);
	x = x - leftOutset;
	w = (w + leftOutset) + calculateRightOutset(w);
} else 
{ 	if (horizontal == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
		double leftMargin = calculateLeftInset(w);
		x = x + leftMargin;
		w = (w - leftMargin) - calculateRightInset(w);
	}}:if (horizontal == org.jfree.chart.util.LengthAdjustmentType.EXPAND) {
	double $1 = calculateLeftOutset(w);
	x = x - $1;
	w = (w + $1) + calculateRightOutset(w);
} else 
{ 	if (horizontal == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
		double $2 = calculateLeftInset(w);
		x = x + $2;
		w = (w - $2) - calculateRightInset(w);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (prefix == null) {
	throw new java.lang.IllegalArgumentException("Null 'prefix' argument.");
}:if (prefix == null) {
	throw new java.lang.IllegalArgumentException("Null 'prefix' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((hours != 0) || this.showZeroHours) {
	toAppendTo.append(java.lang.String.valueOf(hours) + getHourSuffix());
}:if ((hours != 0) || this.showZeroHours) {
	toAppendTo.append(java.lang.String.valueOf(hours) + getHourSuffix());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.RIGHT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
						result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
							result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
						}}}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.RIGHT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
						result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
							result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
						}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p1 == null) {
	return p2 == null;
}:if (p1 == null) {
	return p2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.CENTER) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX, anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - w, anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
								result = new java.awt.geom.Rectangle2D.Double(
								anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

							} else 
							{ 								if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
									result = new java.awt.geom.Rectangle2D.Double(
									anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

								}}}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.CENTER) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX, anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - w, anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
								result = new java.awt.geom.Rectangle2D.Double(
								anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

							} else 
							{ 								if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
									result = new java.awt.geom.Rectangle2D.Double(
									anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

								}}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.bottom * height;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.bottom * height;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
}:if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (elapsed < 0) {
	elapsed *= -1L;
	signPrefix = "-";
} else 
{
	signPrefix = this.positivePrefix;
}:if (elapsed < 0) {
	elapsed *= -1L;
	signPrefix = "-";
} else 
{
	signPrefix = this.positivePrefix;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {

	java.lang.String plainStr = ((java.lang.String) (stream.readObject()));
	result = new java.text.AttributedString(plainStr);
	char c = stream.readChar();
	int start = 0;
	while (c != java.text.CharacterIterator.DONE) {
		int limit = stream.readInt();
		java.util.Map atts = ((java.util.Map) (stream.readObject()));
		result.addAttributes(atts, start, limit);
		start = limit;
		c = stream.readChar();
	} 
}:if (!isNull) {

	java.lang.String $0 = ((java.lang.String) (stream.readObject()));
	result = new java.text.AttributedString($0);
	char $1 = stream.readChar();
	int $2 = 0;
	while ($1 != java.text.CharacterIterator.DONE) {
		int $3 = stream.readInt();
		java.util.Map $4 = ((java.util.Map) (stream.readObject()));
		result.addAttributes($4, $2, $3);
		$2 = $3;
		$1 = stream.readChar();
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (value != null) {
	setText(nf.format(value));
} else 
{
	setText("");
}:if (value != null) {
	setText(nf.format(value));
} else 
{
	setText("");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (version == null) {
	return new java.lang.String[0];
}:if (version == null) {
	return new java.lang.String[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (horizontal) {
	leftMargin = calculateLeftOutset(base.getWidth());
	rightMargin = calculateRightOutset(base.getWidth());
}:if (horizontal) {
	leftMargin = calculateLeftOutset(base.getWidth());
	rightMargin = calculateRightOutset(base.getWidth());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a1.getAngleExtent() != a2.getAngleExtent()) {
	return false;
}:if (a1.getAngleExtent() != a2.getAngleExtent()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.UnitType.RELATIVE)) {
	return org.jfree.chart.util.UnitType.RELATIVE;
}:if (this.equals(org.jfree.chart.util.UnitType.RELATIVE)) {
	return org.jfree.chart.util.UnitType.RELATIVE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.RelativeDateFormat)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.RelativeDateFormat)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (paint != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writePaint(paint, stream);
} else 
{
	stream.writeInt(-1);
}:if (paint != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writePaint(paint, stream);
} else 
{
	stream.writeInt(-1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
	result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getMinY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
						result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
							result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
						}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
	result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getMinY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
						result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
							result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
						}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
	result = org.jfree.chart.util.RectangleEdge.LEFT;
}:if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
	result = org.jfree.chart.util.RectangleEdge.LEFT;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.UnitType)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.UnitType)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(t.name)) {
	return false;
}:if (!this.name.equals(t.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.Layer)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.Layer)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.top * height;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.top * height;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (type.isAssignableFrom(c)) {
	return c.newInstance();
}:if (type.isAssignableFrom(c)) {
	return c.newInstance();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.HorizontalAlignment)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.HorizontalAlignment)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (loader != null) {
	try {
		loader.loadClass("java.util.RandomAccess");
		return true;
	}
	 catch (java.lang.ClassNotFoundException e) {
		return false;
	}
	 catch (java.lang.Exception e) {

	}
}:if (loader != null) {
	try {
		loader.loadClass("java.util.RandomAccess");
		return true;
	}
	 catch (java.lang.ClassNotFoundException e) {
		return false;
	}
	 catch (java.lang.Exception e) {

	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
				}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.height != that.height) {
	return false;
}:if (this.height != that.height) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.TableOrder)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.TableOrder)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this == o) {
	return true;
}:if (this == o) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (seg1 != seg2) {
	return false;
}:if (seg1 != seg2) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
	result = rectangle.getMinX();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
		result = rectangle.getMaxX();
	}}:if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
	result = rectangle.getMinX();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
		result = rectangle.getMaxX();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
	result.setLocation(rectangle.getCenterX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
		result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
					result.setLocation(rectangle.getMinX(), rectangle.getMinY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
						result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
							result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
								result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
							}}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
	result.setLocation(rectangle.getCenterX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
		result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
					result.setLocation(rectangle.getMinX(), rectangle.getMinY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
						result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
							result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
								result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
							}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (object != null) {
	result = object.hashCode();
}:if (object != null) {
	result = object.hashCode();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (vertical) {
	topMargin = calculateTopOutset(base.getHeight());
	bottomMargin = calculateBottomOutset(base.getHeight());
}:if (vertical) {
	topMargin = calculateTopOutset(base.getHeight());
	bottomMargin = calculateBottomOutset(base.getHeight());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.GeneralPath.class)) {
	java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
	float[] args = new float[6];
	boolean hasNext = stream.readBoolean();
	while (!hasNext) {
		int type = stream.readInt();
		for (int i = 0; i < 6; i++) {
			args[i] = stream.readFloat();
		}
		switch (type) {
			case java.awt.geom.PathIterator.SEG_MOVETO :
				gp.moveTo(args[0], args[1]);
				break;
			case java.awt.geom.PathIterator.SEG_LINETO :
				gp.lineTo(args[0], args[1]);
				break;
			case java.awt.geom.PathIterator.SEG_CUBICTO :
				gp.curveTo(args[0], args[1], args[2], 
				args[3], args[4], args[5]);
				break;
			case java.awt.geom.PathIterator.SEG_QUADTO :
				gp.quadTo(args[0], args[1], args[2], args[3]);
				break;
			case java.awt.geom.PathIterator.SEG_CLOSE :
				gp.closePath();
				break;
			default :
				throw new java.lang.RuntimeException(
				"JFreeChart - No path exists");}

		gp.setWindingRule(stream.readInt());
		hasNext = stream.readBoolean();
	} 
	result = gp;
} else 
{
	result = ((java.awt.Shape) (stream.readObject()));
}:if (c.equals(java.awt.geom.GeneralPath.class)) {
	java.awt.geom.GeneralPath $0 = new java.awt.geom.GeneralPath();
	float[] $1 = new float[6];
	boolean $2 = stream.readBoolean();
	while (!$2) {
		int $3 = stream.readInt();
		for (int $4 = 0; $4 < 6; $4++) {
			$1[$4] = stream.readFloat();
		}
		switch ($3) {
			case java.awt.geom.PathIterator.SEG_MOVETO :
				$0.moveTo($1[0], $1[1]);
				break;
			case java.awt.geom.PathIterator.SEG_LINETO :
				$0.lineTo($1[0], $1[1]);
				break;
			case java.awt.geom.PathIterator.SEG_CUBICTO :
				$0.curveTo($1[0], $1[1], $1[2], 
				$1[3], $1[4], $1[5]);
				break;
			case java.awt.geom.PathIterator.SEG_QUADTO :
				$0.quadTo($1[0], $1[1], $1[2], $1[3]);
				break;
			case java.awt.geom.PathIterator.SEG_CLOSE :
				$0.closePath();
				break;
			default :
				throw new java.lang.RuntimeException(
				"JFreeChart - No path exists");}

		$0.setWindingRule(stream.readInt());
		$2 = stream.readBoolean();
	} 
	result = $0;
} else 
{
	result = ((java.awt.Shape) (stream.readObject()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getMinY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
					result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
						result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
					}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getMinY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
					result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
						result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
					}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.Rectangle2D.class)) {
	double x = stream.readDouble();
	double y = stream.readDouble();
	double w = stream.readDouble();
	double h = stream.readDouble();
	result = new java.awt.geom.Rectangle2D.Double(x, y, w, h);
} else 
{ 	if (c.equals(java.awt.geom.Ellipse2D.class)) {
		double x = stream.readDouble();
		double y = stream.readDouble();
		double w = stream.readDouble();
		double h = stream.readDouble();
		result = new java.awt.geom.Ellipse2D.Double(x, y, w, h);
	} else 
	{ 		if (c.equals(java.awt.geom.Arc2D.class)) {
			double x = stream.readDouble();
			double y = stream.readDouble();
			double w = stream.readDouble();
			double h = stream.readDouble();
			double as = stream.readDouble();
			double ae = stream.readDouble();
			int at = stream.readInt();
			result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
		} else 
		{ 			if (c.equals(java.awt.geom.GeneralPath.class)) {
				java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
				float[] args = new float[6];
				boolean hasNext = stream.readBoolean();
				while (!hasNext) {
					int type = stream.readInt();
					for (int i = 0; i < 6; i++) {
						args[i] = stream.readFloat();
					}
					switch (type) {
						case java.awt.geom.PathIterator.SEG_MOVETO :
							gp.moveTo(args[0], args[1]);
							break;
						case java.awt.geom.PathIterator.SEG_LINETO :
							gp.lineTo(args[0], args[1]);
							break;
						case java.awt.geom.PathIterator.SEG_CUBICTO :
							gp.curveTo(args[0], args[1], args[2], 
							args[3], args[4], args[5]);
							break;
						case java.awt.geom.PathIterator.SEG_QUADTO :
							gp.quadTo(args[0], args[1], args[2], args[3]);
							break;
						case java.awt.geom.PathIterator.SEG_CLOSE :
							gp.closePath();
							break;
						default :
							throw new java.lang.RuntimeException(
							"JFreeChart - No path exists");}

					gp.setWindingRule(stream.readInt());
					hasNext = stream.readBoolean();
				} 
				result = gp;
			} else 
			{
				result = ((java.awt.Shape) (stream.readObject()));
			}}}}:if (c.equals(java.awt.geom.Rectangle2D.class)) {
	double $33 = stream.readDouble();
	double $34 = stream.readDouble();
	double $35 = stream.readDouble();
	double $36 = stream.readDouble();
	result = new java.awt.geom.Rectangle2D.Double($33, $34, $35, $36);
} else 
{ 	if (c.equals(java.awt.geom.Ellipse2D.class)) {
		double $37 = stream.readDouble();
		double $38 = stream.readDouble();
		double $39 = stream.readDouble();
		double $40 = stream.readDouble();
		result = new java.awt.geom.Ellipse2D.Double($37, $38, $39, $40);
	} else 
	{ 		if (c.equals(java.awt.geom.Arc2D.class)) {
			double $41 = stream.readDouble();
			double $42 = stream.readDouble();
			double $43 = stream.readDouble();
			double $44 = stream.readDouble();
			double $45 = stream.readDouble();
			double $46 = stream.readDouble();
			int $47 = stream.readInt();
			result = new java.awt.geom.Arc2D.Double($41, $42, $43, $44, $45, $46, $47);
		} else 
		{ 			if (c.equals(java.awt.geom.GeneralPath.class)) {
				java.awt.geom.GeneralPath $48 = new java.awt.geom.GeneralPath();
				float[] $49 = new float[6];
				boolean $50 = stream.readBoolean();
				while (!$50) {
					int $51 = stream.readInt();
					for (int $52 = 0; $52 < 6; $52++) {
						$49[$52] = stream.readFloat();
					}
					switch ($51) {
						case java.awt.geom.PathIterator.SEG_MOVETO :
							$48.moveTo($49[0], $49[1]);
							break;
						case java.awt.geom.PathIterator.SEG_LINETO :
							$48.lineTo($49[0], $49[1]);
							break;
						case java.awt.geom.PathIterator.SEG_CUBICTO :
							$48.curveTo($49[0], $49[1], $49[2], 
							$49[3], $49[4], $49[5]);
							break;
						case java.awt.geom.PathIterator.SEG_QUADTO :
							$48.quadTo($49[0], $49[1], $49[2], $49[3]);
							break;
						case java.awt.geom.PathIterator.SEG_CLOSE :
							$48.closePath();
							break;
						default :
							throw new java.lang.RuntimeException(
							"JFreeChart - No path exists");}

					$48.setWindingRule(stream.readInt());
					$50 = stream.readBoolean();
				} 
				result = $48;
			} else 
			{
				result = ((java.awt.Shape) (stream.readObject()));
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.hourSuffix.equals(that.hourSuffix)) {
	return false;
}:if (!this.hourSuffix.equals(that.hourSuffix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape == null) {
	throw new java.lang.IllegalArgumentException("Null 'shape' argument.");
}:if (shape == null) {
	throw new java.lang.IllegalArgumentException("Null 'shape' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (url == null) {
	return null;
}:if (url == null) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
	return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
}:if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
	return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o1 == o2) {
	return true;
}:if (o1 == o2) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writeShape(shape, stream);
} else 
{
	stream.writeInt(-1);
}:if (shape != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writeShape(shape, stream);
} else 
{
	stream.writeInt(-1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
	result = rectangle.getMaxY();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
		result = rectangle.getMinX();
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
			result = rectangle.getMaxX();
		}}}:if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
	result = rectangle.getMaxY();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
		result = rectangle.getMinX();
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
			result = rectangle.getMaxX();
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((p1 instanceof java.awt.GradientPaint) && (p2 instanceof java.awt.GradientPaint)) {
	java.awt.GradientPaint gp1 = ((java.awt.GradientPaint) (p1));
	java.awt.GradientPaint gp2 = ((java.awt.GradientPaint) (p2));
	result = ((((gp1.getColor1().equals(gp2.getColor1()) && 
	gp1.getColor2().equals(gp2.getColor2())) && 
	gp1.getPoint1().equals(gp2.getPoint1())) && 
	gp1.getPoint2().equals(gp2.getPoint2())) && 
	(gp1.isCyclic() == gp2.isCyclic())) && 
	(gp1.getTransparency() == gp1.getTransparency());
} else 
{
	result = p1.equals(p2);
}:if ((p1 instanceof java.awt.GradientPaint) && (p2 instanceof java.awt.GradientPaint)) {
	java.awt.GradientPaint $0 = ((java.awt.GradientPaint) (p1));
	java.awt.GradientPaint $1 = ((java.awt.GradientPaint) (p2));
	result = (((($0.getColor1().equals($1.getColor1()) && 
	$0.getColor2().equals($1.getColor2())) && 
	$0.getPoint1().equals($1.getPoint1())) && 
	$0.getPoint2().equals($1.getPoint2())) && 
	($0.isCyclic() == $1.isCyclic())) && 
	($0.getTransparency() == $0.getTransparency());
} else 
{
	result = p1.equals(p2);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.LengthAdjustmentType.EXPAND)) {
	return org.jfree.chart.util.LengthAdjustmentType.EXPAND;
} else 
{ 	if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
		return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
	}}:if (this.equals(org.jfree.chart.util.LengthAdjustmentType.EXPAND)) {
	return org.jfree.chart.util.LengthAdjustmentType.EXPAND;
} else 
{ 	if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
		return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.VERTICAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
			result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
		}}}:if (this.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.VERTICAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
			result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.TOP) == org.jfree.chart.util.Align.TOP) {
	y = frame.getMinY();
}:if ((align & org.jfree.chart.util.Align.TOP) == org.jfree.chart.util.Align.TOP) {
	y = frame.getMinY();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s2 == null) {
	return false;
}:if (s2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleEdge.BOTTOM)) {
	result = org.jfree.chart.util.RectangleEdge.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
		result = org.jfree.chart.util.RectangleEdge.LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
			result = org.jfree.chart.util.RectangleEdge.RIGHT;
		}}}:if (this.equals(org.jfree.chart.util.RectangleEdge.BOTTOM)) {
	result = org.jfree.chart.util.RectangleEdge.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
		result = org.jfree.chart.util.RectangleEdge.LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
			result = org.jfree.chart.util.RectangleEdge.RIGHT;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.base != that.base) {
	return false;
}:if (this.base != that.base) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.minuteSuffix.equals(that.minuteSuffix)) {
	return false;
}:if (!this.minuteSuffix.equals(that.minuteSuffix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.geom.Line2D) && (s2 instanceof java.awt.geom.Line2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Line2D) (s1)), ((java.awt.geom.Line2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.Ellipse2D) && (s2 instanceof java.awt.geom.Ellipse2D)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Ellipse2D) (s1)), ((java.awt.geom.Ellipse2D) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
		} else 
		{ 			if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
				return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
			} else 
			{ 				if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
					return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
				} else 
				{

					return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
				}}}}}:if ((s1 instanceof java.awt.geom.Line2D) && (s2 instanceof java.awt.geom.Line2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Line2D) (s1)), ((java.awt.geom.Line2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.Ellipse2D) && (s2 instanceof java.awt.geom.Ellipse2D)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Ellipse2D) (s1)), ((java.awt.geom.Ellipse2D) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
		} else 
		{ 			if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
				return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
			} else 
			{ 				if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
					return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
				} else 
				{

					return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (version == null) {
	return false;
}:if (version == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#hasDuplicateItems
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#hasDuplicateItems
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StringUtilities#endsWithIgnoreCase
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StringUtilities#endsWithIgnoreCase
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#isJDK14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#isJDK14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StringUtilities#startsWithIgnoreCase
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StringUtilities#startsWithIgnoreCase
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#convertName
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#convertName
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Size2D#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getResourceAsStream
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getResourceAsStream
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getResource
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getResource
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#rotateShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#rotateShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#indexOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#indexOf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#hasDuplicateItems
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#hasDuplicateItems
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BooleanList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BooleanList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#loadAndInstantiate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#loadAndInstantiate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#equalReferencesInArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AttributedStringUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#convertName
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#convertName
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArrayUtilities#compareVersionArrays
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateTopInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateTopInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateLeftInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateLeftInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: NumberCellRenderer#getTableCellRendererComponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: NumberCellRenderer#getTableCellRendererComponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateBottomInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateBottomInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#deepClone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#deepClone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateRightInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateRightInset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: NumberCellRenderer#getTableCellRendererComponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: NumberCellRenderer#getTableCellRendererComponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RefineryUtilities#createTablePanel
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RefineryUtilities#createTablePanel
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateLeftOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateLeftOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateRightOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateRightOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createInsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createInsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ApplicationFrame#windowClosing
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ApplicationFrame#windowClosing
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Align#align
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#isJDK14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#isJDK14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createOutsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createOutsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#stringToColor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#stringToColor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#set
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#set
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateTopOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateTopOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePoint2D
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePoint2D
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateBottomOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#calculateBottomOutset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPoint2D
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPoint2D
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setSecondFormatter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setSecondFormatter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createInsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createInsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#format
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnitType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#deepClone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#deepClone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createOutsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createOutsetRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createTranslatedShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createTranslatedShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setPositivePrefix
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setPositivePrefix
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setDaySuffix
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RelativeDateFormat#setDaySuffix
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createTranslatedShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createTranslatedShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StrokeList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SortOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#writeObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TableOrder#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LogFormat
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Layer#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#readObject
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Rotation#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#getClassLoader
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintList#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#parseVersions
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#parseVersions
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#set
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#set
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#colorToString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: AbstractObjectList#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LengthAdjustmentType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleInsets#createAdjustedRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HorizontalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#coordinate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: VerticalAlignment#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HashUtilities#hashCodeForPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readAttributedString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readAttributedString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#opposite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleEdge#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: PaintUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createLineRegion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#createLineRegion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readPaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: GradientPaintTransformType#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeStroke
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ObjectUtilities#clone
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeAttributedString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeAttributedString
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writePaint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: StandardGradientPaintTransformer#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#readResolve
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#coordinates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: RectangleAnchor#createRectangle
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#writeShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SerialUtilities#readShape
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index >= this.objects.length) {
	java.lang.Object[] enlarged = new java.lang.Object[index + this.increment];
	java.lang.System.arraycopy(this.objects, 0, enlarged, 0, this.objects.length);
	this.objects = enlarged;
}:if (index >= this.objects.length) {
	java.lang.Object[] $1 = new java.lang.Object[index + this.increment];
	java.lang.System.arraycopy(this.objects, 0, $1, 0, this.objects.length);
	this.objects = $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.util.Arrays.equals(d1, d2)) {
	return false;
}:if (!java.util.Arrays.equals(d1, d2)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p instanceof java.awt.GradientPaint) {
	java.awt.GradientPaint gp = ((java.awt.GradientPaint) (p));
	result = 193;
	result = (37 * result) + gp.getColor1().hashCode();
	result = (37 * result) + gp.getPoint1().hashCode();
	result = (37 * result) + gp.getColor2().hashCode();
	result = (37 * result) + gp.getPoint2().hashCode();
} else 
{



	result = p.hashCode();
}:if (p instanceof java.awt.GradientPaint) {
	java.awt.GradientPaint $1 = ((java.awt.GradientPaint) (p));
	result = 193;
	result = (37 * result) + $1.getColor1().hashCode();
	result = (37 * result) + $1.getPoint1().hashCode();
	result = (37 * result) + $1.getColor2().hashCode();
	result = (37 * result) + $1.getPoint2().hashCode();
} else 
{



	result = p.hashCode();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1[i] != null) {
	return false;
}:if (array1[i] != null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array2[i] == null) {
	if (array1[i] != null) {
		return false;
	}
}:if (array2[i] == null) {
	if (array1[i] != null) {
		return false;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
		}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (type == null) {
	throw new java.lang.IllegalArgumentException("Null 'type' argument.");
}:if (type == null) {
	throw new java.lang.IllegalArgumentException("Null 'type' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (base.length() < end.length()) {
	return false;
}:if (base.length() < end.length()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index == (-1)) {
	return name;
}:if (index == (-1)) {
	return name;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showZeroDays != that.showZeroDays) {
	return false;
}:if (this.showZeroDays != that.showZeroDays) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (suffix == null) {
	throw new java.lang.IllegalArgumentException("Null 'suffix' argument.");
}:if (suffix == null) {
	throw new java.lang.IllegalArgumentException("Null 'suffix' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (paint instanceof java.io.Serializable) {
	stream.writeObject(paint);
} else 
{ 	if (paint instanceof java.awt.GradientPaint) {
		java.awt.GradientPaint gp = ((java.awt.GradientPaint) (paint));
		stream.writeFloat(((float) (gp.getPoint1().getX())));
		stream.writeFloat(((float) (gp.getPoint1().getY())));
		stream.writeObject(gp.getColor1());
		stream.writeFloat(((float) (gp.getPoint2().getX())));
		stream.writeFloat(((float) (gp.getPoint2().getY())));
		stream.writeObject(gp.getColor2());
		stream.writeBoolean(gp.isCyclic());
	}}:if (paint instanceof java.io.Serializable) {
	stream.writeObject(paint);
} else 
{ 	if (paint instanceof java.awt.GradientPaint) {
		java.awt.GradientPaint $4 = ((java.awt.GradientPaint) (paint));
		stream.writeFloat(((float) ($4.getPoint1().getX())));
		stream.writeFloat(((float) ($4.getPoint1().getY())));
		stream.writeObject($4.getColor1());
		stream.writeFloat(((float) ($4.getPoint2().getX())));
		stream.writeFloat(((float) ($4.getPoint2().getY())));
		stream.writeObject($4.getColor2());
		stream.writeBoolean($4.isCyclic());
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.Layer.FOREGROUND)) {
	result = org.jfree.chart.util.Layer.FOREGROUND;
} else 
{ 	if (this.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
		result = org.jfree.chart.util.Layer.BACKGROUND;
	}}:if (this.equals(org.jfree.chart.util.Layer.FOREGROUND)) {
	result = org.jfree.chart.util.Layer.FOREGROUND;
} else 
{ 	if (this.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
		result = org.jfree.chart.util.Layer.BACKGROUND;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE)) {
	return org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE;
} else 
{ 	if (this.equals(org.jfree.chart.util.LengthAdjustmentType.EXPAND)) {
		return org.jfree.chart.util.LengthAdjustmentType.EXPAND;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
			return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
		}}}:if (this.equals(org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE)) {
	return org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE;
} else 
{ 	if (this.equals(org.jfree.chart.util.LengthAdjustmentType.EXPAND)) {
		return org.jfree.chart.util.LengthAdjustmentType.EXPAND;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
			return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(order.name)) {
	return false;
}:if (!this.name.equals(order.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p2 == null) {
	return false;
}:if (p2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a1.getAngleStart() != a2.getAngleStart()) {
	return false;
}:if (a1.getAngleStart() != a2.getAngleStart()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
	result = org.jfree.chart.util.RectangleEdge.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
		result = org.jfree.chart.util.RectangleEdge.RIGHT;
	}}:if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
	result = org.jfree.chart.util.RectangleEdge.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
		result = org.jfree.chart.util.RectangleEdge.RIGHT;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.baseMillis != that.baseMillis) {
	return false;
}:if (this.baseMillis != that.baseMillis) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (base.length() < start.length()) {
	return false;
}:if (base.length() < start.length()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!e1.getFrame().equals(e2.getFrame())) {
	return false;
}:if (!e1.getFrame().equals(e2.getFrame())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index != (-1)) {
	setShape(index, org.jfree.chart.util.SerialUtilities.readShape(stream));
}:if (index != (-1)) {
	setShape(index, org.jfree.chart.util.SerialUtilities.readShape(stream));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e2 == null) {
	return false;
}:if (e2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (baseLabel == null) {
	throw new java.lang.IllegalArgumentException("Null 'baseLabel' argument.");
}:if (baseLabel == null) {
	throw new java.lang.IllegalArgumentException("Null 'baseLabel' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (object instanceof org.jfree.chart.util.PublicCloneable) {
	final org.jfree.chart.util.PublicCloneable pc = ((org.jfree.chart.util.PublicCloneable) (object));
	return pc.clone();
} else 
{
	try {
		final java.lang.reflect.Method method = object.getClass().getMethod("clone", 
		((java.lang.Class[]) (null)));
		if (java.lang.reflect.Modifier.isPublic(method.getModifiers())) {
			return method.invoke(object, ((java.lang.Object[]) (null)));
		}
	}
	 catch (java.lang.NoSuchMethodException e) {
		e.printStackTrace();
	}
	 catch (java.lang.IllegalAccessException e) {
		e.printStackTrace();
	}
	 catch (java.lang.reflect.InvocationTargetException e) {
		e.printStackTrace();
	}
}:if (object instanceof org.jfree.chart.util.PublicCloneable) {
	final org.jfree.chart.util.PublicCloneable $2 = ((org.jfree.chart.util.PublicCloneable) (object));
	return $2.clone();
} else 
{
	try {
		final java.lang.reflect.Method $3 = object.getClass().getMethod("clone", 
		((java.lang.Class[]) (null)));
		if (java.lang.reflect.Modifier.isPublic($3.getModifiers())) {
			return $3.invoke(object, ((java.lang.Object[]) (null)));
		}
	}
	 catch (java.lang.NoSuchMethodException e) {
		e.printStackTrace();
	}
	 catch (java.lang.IllegalAccessException e) {
		e.printStackTrace();
	}
	 catch (java.lang.reflect.InvocationTargetException e) {
		e.printStackTrace();
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((java.lang.reflect.Modifier.isPublic(f.getModifiers()) && 
java.lang.reflect.Modifier.isFinal(f.getModifiers())) && 
java.lang.reflect.Modifier.isStatic(f.getModifiers())) {
	java.lang.String name = f.getName();
	java.lang.Object oColor = f.get(null);
	if (oColor instanceof java.awt.Color) {
		if (c.equals(oColor)) {
			return name;
		}
	}
}:if ((java.lang.reflect.Modifier.isPublic(f.getModifiers()) && 
java.lang.reflect.Modifier.isFinal(f.getModifiers())) && 
java.lang.reflect.Modifier.isStatic(f.getModifiers())) {
	java.lang.String $2 = f.getName();
	java.lang.Object $3 = f.get(null);
	if ($3 instanceof java.awt.Color) {
		if (c.equals($3)) {
			return $2;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
		}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((o1 != null) && (o2 != null)) {
	if (o1.equals(o2)) {
		return true;
	}
}:if ((o1 != null) && (o2 != null)) {
	if (o1.equals(o2)) {
		return true;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((o1 == null) && (o2 == null)) {

	continue;
}:if ((o1 == null) && (o2 == null)) {

	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(o instanceof org.jfree.chart.util.Rotation)) {
	return false;
}:if (!(o instanceof org.jfree.chart.util.Rotation)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (horizontal == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
	double leftMargin = calculateLeftInset(w);
	x = x + leftMargin;
	w = (w - leftMargin) - calculateRightInset(w);
}:if (horizontal == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
	double $7 = calculateLeftInset(w);
	x = x + $7;
	w = (w - $7) - calculateRightInset(w);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((days != 0) || this.showZeroDays) {
	toAppendTo.append(this.dayFormatter.format(days) + getDaySuffix());
}:if ((days != 0) || this.showZeroDays) {
	toAppendTo.append(this.dayFormatter.format(days) + getDaySuffix());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.StandardGradientPaintTransformer)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.StandardGradientPaintTransformer)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (size > 0) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[0]);
	if (size > 1) {
		result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[size - 1]);
		if (size > 2) {
			result = org.jfree.chart.util.HashUtilities.hashCode(result, 
			this.objects[size / 2]);
		}
	}
}:if (size > 0) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[0]);
	if (size > 1) {
		result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[size - 1]);
		if (size > 2) {
			result = org.jfree.chart.util.HashUtilities.hashCode(result, 
			this.objects[size / 2]);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (object == null) {
	throw new java.lang.IllegalArgumentException("Null 'object' argument.");
}:if (object == null) {
	throw new java.lang.IllegalArgumentException("Null 'object' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (horizontal) {
	leftMargin = calculateLeftInset(base.getWidth());
	rightMargin = calculateRightInset(base.getWidth());
}:if (horizontal) {
	leftMargin = calculateLeftInset(base.getWidth());
	rightMargin = calculateRightInset(base.getWidth());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index != (-1)) {
	setPaint(index, org.jfree.chart.util.SerialUtilities.readPaint(stream));
}:if (index != (-1)) {
	setPaint(index, org.jfree.chart.util.SerialUtilities.readPaint(stream));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (width / ((1 - this.left) - this.right)) * this.right;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (width / ((1 - this.left) - this.right)) * this.right;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.Arc2D) {
	java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
	stream.writeObject(java.awt.geom.Arc2D.class);
	stream.writeDouble(arc.getX());
	stream.writeDouble(arc.getY());
	stream.writeDouble(arc.getWidth());
	stream.writeDouble(arc.getHeight());
	stream.writeDouble(arc.getAngleStart());
	stream.writeDouble(arc.getAngleExtent());
	stream.writeInt(arc.getArcType());
} else 
{ 	if (shape instanceof java.awt.geom.GeneralPath) {
		stream.writeObject(java.awt.geom.GeneralPath.class);
		java.awt.geom.PathIterator pi = shape.getPathIterator(null);
		float[] args = new float[6];
		stream.writeBoolean(pi.isDone());
		while (!pi.isDone()) {
			int type = pi.currentSegment(args);
			stream.writeInt(type);


			for (int i = 0; i < 6; i++) {
				stream.writeFloat(args[i]);
			}
			stream.writeInt(pi.getWindingRule());
			pi.next();
			stream.writeBoolean(pi.isDone());
		} 
	} else 
	{
		stream.writeObject(shape.getClass());
		stream.writeObject(shape);
	}}:if (shape instanceof java.awt.geom.Arc2D) {
	java.awt.geom.Arc2D $42 = ((java.awt.geom.Arc2D) (shape));
	stream.writeObject(java.awt.geom.Arc2D.class);
	stream.writeDouble($42.getX());
	stream.writeDouble($42.getY());
	stream.writeDouble($42.getWidth());
	stream.writeDouble($42.getHeight());
	stream.writeDouble($42.getAngleStart());
	stream.writeDouble($42.getAngleExtent());
	stream.writeInt($42.getArcType());
} else 
{ 	if (shape instanceof java.awt.geom.GeneralPath) {
		stream.writeObject(java.awt.geom.GeneralPath.class);
		java.awt.geom.PathIterator $43 = shape.getPathIterator(null);
		float[] $44 = new float[6];
		stream.writeBoolean($43.isDone());
		while (!$43.isDone()) {
			int $45 = $43.currentSegment($44);
			stream.writeInt($45);


			for (int $46 = 0; $46 < 6; $46++) {
				stream.writeFloat($44[$46]);
			}
			stream.writeInt($43.getWindingRule());
			$43.next();
			stream.writeBoolean($43.isDone());
		} 
	} else 
	{
		stream.writeObject(shape.getClass());
		stream.writeObject(shape);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.VerticalAlignment.TOP)) {
	return org.jfree.chart.util.VerticalAlignment.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.VerticalAlignment.BOTTOM)) {
		return org.jfree.chart.util.VerticalAlignment.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
			return org.jfree.chart.util.VerticalAlignment.CENTER;
		} else 
		{
			return null;
		}}}:if (this.equals(org.jfree.chart.util.VerticalAlignment.TOP)) {
	return org.jfree.chart.util.VerticalAlignment.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.VerticalAlignment.BOTTOM)) {
		return org.jfree.chart.util.VerticalAlignment.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
			return org.jfree.chart.util.VerticalAlignment.CENTER;
		} else 
		{
			return null;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (formatter == null) {
	throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
}:if (formatter == null) {
	throw new java.lang.IllegalArgumentException("Null 'formatter' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	}}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ("ThreadContext".equals(org.jfree.chart.util.ObjectUtilities.classLoaderSource)) {
	final java.lang.ClassLoader threadLoader = 
	java.lang.Thread.currentThread().getContextClassLoader();
	if (threadLoader != null) {
		return threadLoader;
	}
}:if ("ThreadContext".equals(org.jfree.chart.util.ObjectUtilities.classLoaderSource)) {
	final java.lang.ClassLoader $1 = 
	java.lang.Thread.currentThread().getContextClassLoader();
	if ($1 != null) {
		return $1;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index != (-1)) {
	set(index, stream.readObject());
}:if (index != (-1)) {
	set(index, stream.readObject());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((index >= 0) && (index < this.size)) {
	result = this.objects[index];
}:if ((index >= 0) && (index < this.size)) {
	result = this.objects[index];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index < 0) {
	throw new java.lang.IllegalArgumentException("Requires index >= 0.");
}:if (index < 0) {
	throw new java.lang.IllegalArgumentException("Requires index >= 0.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.objects[index] == object) {
	return index;
}:if (this.objects[index] == object) {
	return index;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.VerticalAlignment.BOTTOM)) {
	return org.jfree.chart.util.VerticalAlignment.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
		return org.jfree.chart.util.VerticalAlignment.CENTER;
	} else 
	{
		return null;
	}}:if (this.equals(org.jfree.chart.util.VerticalAlignment.BOTTOM)) {
	return org.jfree.chart.util.VerticalAlignment.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
		return org.jfree.chart.util.VerticalAlignment.CENTER;
	} else 
	{
		return null;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX, anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - w, anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX, anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - w, anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.VerticalAlignment)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.VerticalAlignment)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {
	java.lang.Class c = ((java.lang.Class) (stream.readObject()));
	if (c.equals(java.awt.geom.Line2D.class)) {
		double x1 = stream.readDouble();
		double y1 = stream.readDouble();
		double x2 = stream.readDouble();
		double y2 = stream.readDouble();
		result = new java.awt.geom.Line2D.Double(x1, y1, x2, y2);
	} else 
	{ 		if (c.equals(java.awt.geom.Rectangle2D.class)) {
			double x = stream.readDouble();
			double y = stream.readDouble();
			double w = stream.readDouble();
			double h = stream.readDouble();
			result = new java.awt.geom.Rectangle2D.Double(x, y, w, h);
		} else 
		{ 			if (c.equals(java.awt.geom.Ellipse2D.class)) {
				double x = stream.readDouble();
				double y = stream.readDouble();
				double w = stream.readDouble();
				double h = stream.readDouble();
				result = new java.awt.geom.Ellipse2D.Double(x, y, w, h);
			} else 
			{ 				if (c.equals(java.awt.geom.Arc2D.class)) {
					double x = stream.readDouble();
					double y = stream.readDouble();
					double w = stream.readDouble();
					double h = stream.readDouble();
					double as = stream.readDouble();
					double ae = stream.readDouble();
					int at = stream.readInt();
					result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
				} else 
				{ 					if (c.equals(java.awt.geom.GeneralPath.class)) {
						java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
						float[] args = new float[6];
						boolean hasNext = stream.readBoolean();
						while (!hasNext) {
							int type = stream.readInt();
							for (int i = 0; i < 6; i++) {
								args[i] = stream.readFloat();
							}
							switch (type) {
								case java.awt.geom.PathIterator.SEG_MOVETO :
									gp.moveTo(args[0], args[1]);
									break;
								case java.awt.geom.PathIterator.SEG_LINETO :
									gp.lineTo(args[0], args[1]);
									break;
								case java.awt.geom.PathIterator.SEG_CUBICTO :
									gp.curveTo(args[0], args[1], args[2], 
									args[3], args[4], args[5]);
									break;
								case java.awt.geom.PathIterator.SEG_QUADTO :
									gp.quadTo(args[0], args[1], args[2], args[3]);
									break;
								case java.awt.geom.PathIterator.SEG_CLOSE :
									gp.closePath();
									break;
								default :
									throw new java.lang.RuntimeException(
									"JFreeChart - No path exists");}

							gp.setWindingRule(stream.readInt());
							hasNext = stream.readBoolean();
						} 
						result = gp;
					} else 
					{
						result = ((java.awt.Shape) (stream.readObject()));
					}}}}}
}:if (!isNull) {
	java.lang.Class $179 = ((java.lang.Class) (stream.readObject()));
	if ($179.equals(java.awt.geom.Line2D.class)) {
		double $180 = stream.readDouble();
		double $181 = stream.readDouble();
		double $182 = stream.readDouble();
		double $183 = stream.readDouble();
		result = new java.awt.geom.Line2D.Double($180, $181, $182, $183);
	} else 
	{ 		if ($179.equals(java.awt.geom.Rectangle2D.class)) {
			double $184 = stream.readDouble();
			double $185 = stream.readDouble();
			double $186 = stream.readDouble();
			double $187 = stream.readDouble();
			result = new java.awt.geom.Rectangle2D.Double($184, $185, $186, $187);
		} else 
		{ 			if ($179.equals(java.awt.geom.Ellipse2D.class)) {
				double $188 = stream.readDouble();
				double $189 = stream.readDouble();
				double $190 = stream.readDouble();
				double $191 = stream.readDouble();
				result = new java.awt.geom.Ellipse2D.Double($188, $189, $190, $191);
			} else 
			{ 				if ($179.equals(java.awt.geom.Arc2D.class)) {
					double $192 = stream.readDouble();
					double $193 = stream.readDouble();
					double $194 = stream.readDouble();
					double $195 = stream.readDouble();
					double $196 = stream.readDouble();
					double $197 = stream.readDouble();
					int $198 = stream.readInt();
					result = new java.awt.geom.Arc2D.Double($192, $193, $194, $195, $196, $197, $198);
				} else 
				{ 					if ($179.equals(java.awt.geom.GeneralPath.class)) {
						java.awt.geom.GeneralPath $199 = new java.awt.geom.GeneralPath();
						float[] $200 = new float[6];
						boolean $201 = stream.readBoolean();
						while (!$201) {
							int $202 = stream.readInt();
							for (int $203 = 0; $203 < 6; $203++) {
								$200[$203] = stream.readFloat();
							}
							switch ($202) {
								case java.awt.geom.PathIterator.SEG_MOVETO :
									$199.moveTo($200[0], $200[1]);
									break;
								case java.awt.geom.PathIterator.SEG_LINETO :
									$199.lineTo($200[0], $200[1]);
									break;
								case java.awt.geom.PathIterator.SEG_CUBICTO :
									$199.curveTo($200[0], $200[1], $200[2], 
									$200[3], $200[4], $200[5]);
									break;
								case java.awt.geom.PathIterator.SEG_QUADTO :
									$199.quadTo($200[0], $200[1], $200[2], $200[3]);
									break;
								case java.awt.geom.PathIterator.SEG_CLOSE :
									$199.closePath();
									break;
								default :
									throw new java.lang.RuntimeException(
									"JFreeChart - No path exists");}

							$199.setWindingRule(stream.readInt());
							$201 = stream.readBoolean();
						} 
						result = $199;
					} else 
					{
						result = ((java.awt.Shape) (stream.readObject()));
					}}}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
}:if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
	result = rectangle.getMaxX();
}:if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
	result = rectangle.getMaxX();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showBase) {
	result.append(this.baseLabel);
	result.append("^");
}:if (this.showBase) {
	result.append(this.baseLabel);
	result.append("^");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (oColor instanceof java.awt.Color) {
	if (c.equals(oColor)) {
		return name;
	}
}:if (oColor instanceof java.awt.Color) {
	if (c.equals(oColor)) {
		return name;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getMinX())), 
	((float) (bounds.getCenterY())), paint.getColor1(), 
	((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
	paint.getColor2());
} else 
{ 	if (this.type.equals(
	org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
		((float) (bounds.getCenterY())), paint.getColor2(), 
		((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
		paint.getColor1(), true);
	} else 
	{ 		if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
			result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
			((float) (bounds.getMinY())), paint.getColor1(), 
			((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
			paint.getColor2(), true);
		}}}:if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getMinX())), 
	((float) (bounds.getCenterY())), paint.getColor1(), 
	((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
	paint.getColor2());
} else 
{ 	if (this.type.equals(
	org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
		((float) (bounds.getCenterY())), paint.getColor2(), 
		((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
		paint.getColor1(), true);
	} else 
	{ 		if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
			result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
			((float) (bounds.getMinY())), paint.getColor1(), 
			((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
			paint.getColor2(), true);
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (value == null) {
	return java.awt.Color.black;
}:if (value == null) {
	return java.awt.Color.black;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!super.equals(obj)) {
	return false;
}:if (!super.equals(obj)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p == null) {
	return 0;
}:if (p == null) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj == null) {
	return false;
}:if (obj == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX, anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - w, anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX, anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - w, anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.left * width;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.left * width;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.Line2D.class)) {
	double x1 = stream.readDouble();
	double y1 = stream.readDouble();
	double x2 = stream.readDouble();
	double y2 = stream.readDouble();
	result = new java.awt.geom.Line2D.Double(x1, y1, x2, y2);
} else 
{ 	if (c.equals(java.awt.geom.Rectangle2D.class)) {
		double x = stream.readDouble();
		double y = stream.readDouble();
		double w = stream.readDouble();
		double h = stream.readDouble();
		result = new java.awt.geom.Rectangle2D.Double(x, y, w, h);
	} else 
	{ 		if (c.equals(java.awt.geom.Ellipse2D.class)) {
			double x = stream.readDouble();
			double y = stream.readDouble();
			double w = stream.readDouble();
			double h = stream.readDouble();
			result = new java.awt.geom.Ellipse2D.Double(x, y, w, h);
		} else 
		{ 			if (c.equals(java.awt.geom.Arc2D.class)) {
				double x = stream.readDouble();
				double y = stream.readDouble();
				double w = stream.readDouble();
				double h = stream.readDouble();
				double as = stream.readDouble();
				double ae = stream.readDouble();
				int at = stream.readInt();
				result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
			} else 
			{ 				if (c.equals(java.awt.geom.GeneralPath.class)) {
					java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
					float[] args = new float[6];
					boolean hasNext = stream.readBoolean();
					while (!hasNext) {
						int type = stream.readInt();
						for (int i = 0; i < 6; i++) {
							args[i] = stream.readFloat();
						}
						switch (type) {
							case java.awt.geom.PathIterator.SEG_MOVETO :
								gp.moveTo(args[0], args[1]);
								break;
							case java.awt.geom.PathIterator.SEG_LINETO :
								gp.lineTo(args[0], args[1]);
								break;
							case java.awt.geom.PathIterator.SEG_CUBICTO :
								gp.curveTo(args[0], args[1], args[2], 
								args[3], args[4], args[5]);
								break;
							case java.awt.geom.PathIterator.SEG_QUADTO :
								gp.quadTo(args[0], args[1], args[2], args[3]);
								break;
							case java.awt.geom.PathIterator.SEG_CLOSE :
								gp.closePath();
								break;
							default :
								throw new java.lang.RuntimeException(
								"JFreeChart - No path exists");}

						gp.setWindingRule(stream.readInt());
						hasNext = stream.readBoolean();
					} 
					result = gp;
				} else 
				{
					result = ((java.awt.Shape) (stream.readObject()));
				}}}}}:if (c.equals(java.awt.geom.Line2D.class)) {
	double $155 = stream.readDouble();
	double $156 = stream.readDouble();
	double $157 = stream.readDouble();
	double $158 = stream.readDouble();
	result = new java.awt.geom.Line2D.Double($155, $156, $157, $158);
} else 
{ 	if (c.equals(java.awt.geom.Rectangle2D.class)) {
		double $159 = stream.readDouble();
		double $160 = stream.readDouble();
		double $161 = stream.readDouble();
		double $162 = stream.readDouble();
		result = new java.awt.geom.Rectangle2D.Double($159, $160, $161, $162);
	} else 
	{ 		if (c.equals(java.awt.geom.Ellipse2D.class)) {
			double $163 = stream.readDouble();
			double $164 = stream.readDouble();
			double $165 = stream.readDouble();
			double $166 = stream.readDouble();
			result = new java.awt.geom.Ellipse2D.Double($163, $164, $165, $166);
		} else 
		{ 			if (c.equals(java.awt.geom.Arc2D.class)) {
				double $167 = stream.readDouble();
				double $168 = stream.readDouble();
				double $169 = stream.readDouble();
				double $170 = stream.readDouble();
				double $171 = stream.readDouble();
				double $172 = stream.readDouble();
				int $173 = stream.readInt();
				result = new java.awt.geom.Arc2D.Double($167, $168, $169, $170, $171, $172, $173);
			} else 
			{ 				if (c.equals(java.awt.geom.GeneralPath.class)) {
					java.awt.geom.GeneralPath $174 = new java.awt.geom.GeneralPath();
					float[] $175 = new float[6];
					boolean $176 = stream.readBoolean();
					while (!$176) {
						int $177 = stream.readInt();
						for (int $178 = 0; $178 < 6; $178++) {
							$175[$178] = stream.readFloat();
						}
						switch ($177) {
							case java.awt.geom.PathIterator.SEG_MOVETO :
								$174.moveTo($175[0], $175[1]);
								break;
							case java.awt.geom.PathIterator.SEG_LINETO :
								$174.lineTo($175[0], $175[1]);
								break;
							case java.awt.geom.PathIterator.SEG_CUBICTO :
								$174.curveTo($175[0], $175[1], $175[2], 
								$175[3], $175[4], $175[5]);
								break;
							case java.awt.geom.PathIterator.SEG_QUADTO :
								$174.quadTo($175[0], $175[1], $175[2], $175[3]);
								break;
							case java.awt.geom.PathIterator.SEG_CLOSE :
								$174.closePath();
								break;
							default :
								throw new java.lang.RuntimeException(
								"JFreeChart - No path exists");}

						$174.setWindingRule(stream.readInt());
						$176 = stream.readBoolean();
					} 
					result = $174;
				} else 
				{
					result = ((java.awt.Shape) (stream.readObject()));
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p != null) {
	stream.writeBoolean(false);
	stream.writeDouble(p.getX());
	stream.writeDouble(p.getY());
} else 
{
	stream.writeBoolean(true);
}:if (p != null) {
	stream.writeBoolean(false);
	stream.writeDouble(p.getX());
	stream.writeDouble(p.getY());
} else 
{
	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (base == null) {
	return null;
}:if (base == null) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((x2 - x1) != 0.0) {
	double theta = java.lang.Math.atan((y2 - y1) / (x2 - x1));
	float dx = ((float) (java.lang.Math.sin(theta))) * width;
	float dy = ((float) (java.lang.Math.cos(theta))) * width;
	result.moveTo(x1 - dx, y1 + dy);
	result.lineTo(x1 + dx, y1 - dy);
	result.lineTo(x2 + dx, y2 - dy);
	result.lineTo(x2 - dx, y2 + dy);
	result.closePath();
} else 
{

	result.moveTo(x1 - (width / 2.0F), y1);
	result.lineTo(x1 + (width / 2.0F), y1);
	result.lineTo(x2 + (width / 2.0F), y2);
	result.lineTo(x2 - (width / 2.0F), y2);
	result.closePath();
}:if ((x2 - x1) != 0.0) {
	double $3 = java.lang.Math.atan((y2 - y1) / (x2 - x1));
	float $4 = ((float) (java.lang.Math.sin($3))) * width;
	float $5 = ((float) (java.lang.Math.cos($3))) * width;
	result.moveTo(x1 - $4, y1 + $5);
	result.lineTo(x1 + $4, y1 - $5);
	result.lineTo(x2 + $4, y2 - $5);
	result.lineTo(x2 - $4, y2 + $5);
	result.closePath();
} else 
{

	result.moveTo(x1 - (width / 2.0F), y1);
	result.lineTo(x1 + (width / 2.0F), y1);
	result.lineTo(x2 + (width / 2.0F), y2);
	result.lineTo(x2 - (width / 2.0F), y2);
	result.closePath();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.objects != null) {
	clone.objects = new java.lang.Object[this.objects.length];
	java.lang.System.arraycopy(this.objects, 0, clone.objects, 0, 
	this.objects.length);
}:if (this.objects != null) {
	clone.objects = new java.lang.Object[this.objects.length];
	java.lang.System.arraycopy(this.objects, 0, clone.objects, 0, 
	this.objects.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
	result = org.jfree.chart.util.RectangleEdge.RIGHT;
}:if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
	result = org.jfree.chart.util.RectangleEdge.RIGHT;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (isSelected) {
	setBackground(table.getSelectionBackground());
} else 
{
	setBackground(null);
}:if (isSelected) {
	setBackground(table.getSelectionBackground());
} else 
{
	setBackground(null);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.lang.Number.class)) {
	column.setCellRenderer(new org.jfree.chart.util.NumberCellRenderer());
}:if (c.equals(java.lang.Number.class)) {
	column.setCellRenderer(new org.jfree.chart.util.NumberCellRenderer());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a1 == null) {
	return a2 == null;
}:if (a1 == null) {
	return a2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (base == null) {
	throw new java.lang.IllegalArgumentException("Null 'base' argument.");
}:if (base == null) {
	throw new java.lang.IllegalArgumentException("Null 'base' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.HorizontalAlignment.LEFT)) {
	result = org.jfree.chart.util.HorizontalAlignment.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.HorizontalAlignment.RIGHT)) {
		result = org.jfree.chart.util.HorizontalAlignment.RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
			result = org.jfree.chart.util.HorizontalAlignment.CENTER;
		}}}:if (this.equals(org.jfree.chart.util.HorizontalAlignment.LEFT)) {
	result = org.jfree.chart.util.HorizontalAlignment.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.HorizontalAlignment.RIGHT)) {
		result = org.jfree.chart.util.HorizontalAlignment.RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
			result = org.jfree.chart.util.HorizontalAlignment.CENTER;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
	result = org.jfree.chart.util.Layer.BACKGROUND;
}:if (this.equals(org.jfree.chart.util.Layer.BACKGROUND)) {
	result = org.jfree.chart.util.Layer.BACKGROUND;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a1.getArcType() != a2.getArcType()) {
	return false;
}:if (a1.getArcType() != a2.getArcType()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.TOP) {
	result = rectangle.getMinY();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
		result = rectangle.getMaxY();
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
			result = rectangle.getMinX();
		} else 
		{ 			if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
				result = rectangle.getMaxX();
			}}}}:if (edge == org.jfree.chart.util.RectangleEdge.TOP) {
	result = rectangle.getMinY();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
		result = rectangle.getMaxY();
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
			result = rectangle.getMinX();
		} else 
		{ 			if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
				result = rectangle.getMaxX();
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.right * width;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.right * width;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.RectangleInsets)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.RectangleInsets)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1 == null) {
	return array2 == null;
}:if (array1 == null) {
	return array2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj == this) {
	return true;
}:if (obj == this) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.AbstractObjectList)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.AbstractObjectList)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.jfree.chart.util.ObjectUtilities.equal(get(i), other.get(i))) {
	return false;
}:if (!org.jfree.chart.util.ObjectUtilities.equal(get(i), other.get(i))) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.TOP) {
	result = org.jfree.chart.util.RectangleEdge.BOTTOM;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
		result = org.jfree.chart.util.RectangleEdge.TOP;
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
			result = org.jfree.chart.util.RectangleEdge.RIGHT;
		} else 
		{ 			if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
				result = org.jfree.chart.util.RectangleEdge.LEFT;
			}}}}:if (edge == org.jfree.chart.util.RectangleEdge.TOP) {
	result = org.jfree.chart.util.RectangleEdge.BOTTOM;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
		result = org.jfree.chart.util.RectangleEdge.TOP;
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
			result = org.jfree.chart.util.RectangleEdge.RIGHT;
		} else 
		{ 			if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
				result = org.jfree.chart.util.RectangleEdge.LEFT;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showZeroHours != that.showZeroHours) {
	return false;
}:if (this.showZeroHours != that.showZeroHours) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((object != null) && (object instanceof java.io.Serializable)) {
	stream.writeInt(i);
	stream.writeObject(object);
} else 
{
	stream.writeInt(-1);
}:if ((object != null) && (object instanceof java.io.Serializable)) {
	stream.writeInt(i);
	stream.writeObject(object);
} else 
{
	stream.writeInt(-1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.width != that.width) {
	return false;
}:if (this.width != that.width) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
	result = org.jfree.chart.util.RectangleEdge.TOP;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
		result = org.jfree.chart.util.RectangleEdge.RIGHT;
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
			result = org.jfree.chart.util.RectangleEdge.LEFT;
		}}}:if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
	result = org.jfree.chart.util.RectangleEdge.TOP;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
		result = org.jfree.chart.util.RectangleEdge.RIGHT;
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
			result = org.jfree.chart.util.RectangleEdge.LEFT;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (l1 == null) {
	return l2 == null;
}:if (l1 == null) {
	return l2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this == obj) {
	return true;
}:if (this == obj) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.baseLog != that.baseLog) {
	return false;
}:if (this.baseLog != that.baseLog) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (java.lang.reflect.Modifier.isPublic(method.getModifiers())) {
	return method.invoke(object, ((java.lang.Object[]) (null)));
}:if (java.lang.reflect.Modifier.isPublic(method.getModifiers())) {
	return method.invoke(object, ((java.lang.Object[]) (null)));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.factor != rotation.factor) {
	return false;
}:if (this.factor != rotation.factor) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.TableOrder.BY_ROW)) {
	return org.jfree.chart.util.TableOrder.BY_ROW;
} else 
{ 	if (this.equals(org.jfree.chart.util.TableOrder.BY_COLUMN)) {
		return org.jfree.chart.util.TableOrder.BY_COLUMN;
	}}:if (this.equals(org.jfree.chart.util.TableOrder.BY_ROW)) {
	return org.jfree.chart.util.TableOrder.BY_ROW;
} else 
{ 	if (this.equals(org.jfree.chart.util.TableOrder.BY_COLUMN)) {
		return org.jfree.chart.util.TableOrder.BY_COLUMN;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.Size2D)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.Size2D)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (stroke != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writeStroke(stroke, stream);
} else 
{
	stream.writeInt(-1);
}:if (stroke != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writeStroke(stroke, stream);
} else 
{
	stream.writeInt(-1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.daySuffix.equals(that.daySuffix)) {
	return false;
}:if (!this.daySuffix.equals(that.daySuffix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o1 != null) {
	return o1.equals(o2);
} else 
{
	return false;
}:if (o1 != null) {
	return o1.equals(o2);
} else 
{
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.jfree.chart.util.SerialUtilities.isSerializable(c)) {
	result = ((java.awt.Paint) (stream.readObject()));
} else 
{ 	if (c.equals(java.awt.GradientPaint.class)) {
		float x1 = stream.readFloat();
		float y1 = stream.readFloat();
		java.awt.Color c1 = ((java.awt.Color) (stream.readObject()));
		float x2 = stream.readFloat();
		float y2 = stream.readFloat();
		java.awt.Color c2 = ((java.awt.Color) (stream.readObject()));
		boolean isCyclic = stream.readBoolean();
		result = new java.awt.GradientPaint(x1, y1, c1, x2, y2, c2, isCyclic);
	}}:if (org.jfree.chart.util.SerialUtilities.isSerializable(c)) {
	result = ((java.awt.Paint) (stream.readObject()));
} else 
{ 	if (c.equals(java.awt.GradientPaint.class)) {
		float $29 = stream.readFloat();
		float $30 = stream.readFloat();
		java.awt.Color $31 = ((java.awt.Color) (stream.readObject()));
		float $32 = stream.readFloat();
		float $33 = stream.readFloat();
		java.awt.Color $34 = ((java.awt.Color) (stream.readObject()));
		boolean $35 = stream.readBoolean();
		result = new java.awt.GradientPaint($29, $30, $31, $32, $33, $34, $35);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a2 == null) {
	return false;
}:if (a2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (width / ((1 - this.left) - this.right)) * this.left;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (width / ((1 - this.left) - this.right)) * this.left;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.Rotation.CLOCKWISE)) {
	return org.jfree.chart.util.Rotation.CLOCKWISE;
} else 
{ 	if (this.equals(org.jfree.chart.util.Rotation.ANTICLOCKWISE)) {
		return org.jfree.chart.util.Rotation.ANTICLOCKWISE;
	}}:if (this.equals(org.jfree.chart.util.Rotation.CLOCKWISE)) {
	return org.jfree.chart.util.Rotation.CLOCKWISE;
} else 
{ 	if (this.equals(org.jfree.chart.util.Rotation.ANTICLOCKWISE)) {
		return org.jfree.chart.util.Rotation.ANTICLOCKWISE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj instanceof org.jfree.chart.util.PaintList) {
	org.jfree.chart.util.PaintList that = ((org.jfree.chart.util.PaintList) (obj));
	int listSize = size();
	for (int i = 0; i < listSize; i++) {
		if (!org.jfree.chart.util.PaintUtilities.equal(getPaint(i), that.getPaint(i))) {
			return false;
		}
	}
}:if (obj instanceof org.jfree.chart.util.PaintList) {
	org.jfree.chart.util.PaintList $3 = ((org.jfree.chart.util.PaintList) (obj));
	int $4 = size();
	for (int $5 = 0; $5 < $4; $5++) {
		if (!org.jfree.chart.util.PaintUtilities.equal(getPaint($5), $3.getPaint($5))) {
			return false;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.left != that.left) {
	return false;
}:if (this.left != that.left) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!a1.getFrame().equals(a2.getFrame())) {
	return false;
}:if (!a1.getFrame().equals(a2.getFrame())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1.length != array2.length) {
	return false;
}:if (array1.length != array2.length) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj instanceof org.jfree.chart.util.BooleanList) {
	return super.equals(obj);
}:if (obj instanceof org.jfree.chart.util.BooleanList) {
	return super.equals(obj);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.GeneralPath) {
	stream.writeObject(java.awt.geom.GeneralPath.class);
	java.awt.geom.PathIterator pi = shape.getPathIterator(null);
	float[] args = new float[6];
	stream.writeBoolean(pi.isDone());
	while (!pi.isDone()) {
		int type = pi.currentSegment(args);
		stream.writeInt(type);


		for (int i = 0; i < 6; i++) {
			stream.writeFloat(args[i]);
		}
		stream.writeInt(pi.getWindingRule());
		pi.next();
		stream.writeBoolean(pi.isDone());
	} 
} else 
{
	stream.writeObject(shape.getClass());
	stream.writeObject(shape);
}:if (shape instanceof java.awt.geom.GeneralPath) {
	stream.writeObject(java.awt.geom.GeneralPath.class);
	java.awt.geom.PathIterator $38 = shape.getPathIterator(null);
	float[] $39 = new float[6];
	stream.writeBoolean($38.isDone());
	while (!$38.isDone()) {
		int $40 = $38.currentSegment($39);
		stream.writeInt($40);


		for (int $41 = 0; $41 < 6; $41++) {
			stream.writeFloat($39[$41]);
		}
		stream.writeInt($38.getWindingRule());
		$38.next();
		stream.writeBoolean($38.isDone());
	} 
} else 
{
	stream.writeObject(shape.getClass());
	stream.writeObject(shape);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.BOTTOM) == org.jfree.chart.util.Align.BOTTOM) {
	y = frame.getMaxY() - h;
}:if ((align & org.jfree.chart.util.Align.BOTTOM) == org.jfree.chart.util.Align.BOTTOM) {
	y = frame.getMaxY() - h;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (size > 2) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, 
	this.objects[size / 2]);
}:if (size > 2) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, 
	this.objects[size / 2]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array2[i] != null) {
	return false;
}:if (array2[i] != null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj instanceof org.jfree.chart.util.StrokeList) {
	return super.equals(obj);
}:if (obj instanceof org.jfree.chart.util.StrokeList) {
	return super.equals(obj);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (paint instanceof java.awt.GradientPaint) {
	java.awt.GradientPaint gp = ((java.awt.GradientPaint) (paint));
	stream.writeFloat(((float) (gp.getPoint1().getX())));
	stream.writeFloat(((float) (gp.getPoint1().getY())));
	stream.writeObject(gp.getColor1());
	stream.writeFloat(((float) (gp.getPoint2().getX())));
	stream.writeFloat(((float) (gp.getPoint2().getY())));
	stream.writeObject(gp.getColor2());
	stream.writeBoolean(gp.isCyclic());
}:if (paint instanceof java.awt.GradientPaint) {
	java.awt.GradientPaint $3 = ((java.awt.GradientPaint) (paint));
	stream.writeFloat(((float) ($3.getPoint1().getX())));
	stream.writeFloat(((float) ($3.getPoint1().getY())));
	stream.writeObject($3.getColor1());
	stream.writeFloat(((float) ($3.getPoint2().getX())));
	stream.writeFloat(((float) ($3.getPoint2().getY())));
	stream.writeObject($3.getColor2());
	stream.writeBoolean($3.isCyclic());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(layer.name)) {
	return false;
}:if (!this.name.equals(layer.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (powerLabel == null) {
	throw new java.lang.IllegalArgumentException("Null 'powerLabel' argument.");
}:if (powerLabel == null) {
	throw new java.lang.IllegalArgumentException("Null 'powerLabel' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.secondFormatter.equals(that.secondFormatter)) {
	return false;
}:if (!this.secondFormatter.equals(that.secondFormatter)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array == null) {
	return null;
}:if (array == null) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
	}}:if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.Arc2D.class)) {
	double x = stream.readDouble();
	double y = stream.readDouble();
	double w = stream.readDouble();
	double h = stream.readDouble();
	double as = stream.readDouble();
	double ae = stream.readDouble();
	int at = stream.readInt();
	result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
} else 
{ 	if (c.equals(java.awt.geom.GeneralPath.class)) {
		java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
		float[] args = new float[6];
		boolean hasNext = stream.readBoolean();
		while (!hasNext) {
			int type = stream.readInt();
			for (int i = 0; i < 6; i++) {
				args[i] = stream.readFloat();
			}
			switch (type) {
				case java.awt.geom.PathIterator.SEG_MOVETO :
					gp.moveTo(args[0], args[1]);
					break;
				case java.awt.geom.PathIterator.SEG_LINETO :
					gp.lineTo(args[0], args[1]);
					break;
				case java.awt.geom.PathIterator.SEG_CUBICTO :
					gp.curveTo(args[0], args[1], args[2], 
					args[3], args[4], args[5]);
					break;
				case java.awt.geom.PathIterator.SEG_QUADTO :
					gp.quadTo(args[0], args[1], args[2], args[3]);
					break;
				case java.awt.geom.PathIterator.SEG_CLOSE :
					gp.closePath();
					break;
				default :
					throw new java.lang.RuntimeException(
					"JFreeChart - No path exists");}

			gp.setWindingRule(stream.readInt());
			hasNext = stream.readBoolean();
		} 
		result = gp;
	} else 
	{
		result = ((java.awt.Shape) (stream.readObject()));
	}}:if (c.equals(java.awt.geom.Arc2D.class)) {
	double $107 = stream.readDouble();
	double $108 = stream.readDouble();
	double $109 = stream.readDouble();
	double $110 = stream.readDouble();
	double $111 = stream.readDouble();
	double $112 = stream.readDouble();
	int $113 = stream.readInt();
	result = new java.awt.geom.Arc2D.Double($107, $108, $109, $110, $111, $112, $113);
} else 
{ 	if (c.equals(java.awt.geom.GeneralPath.class)) {
		java.awt.geom.GeneralPath $114 = new java.awt.geom.GeneralPath();
		float[] $115 = new float[6];
		boolean $116 = stream.readBoolean();
		while (!$116) {
			int $117 = stream.readInt();
			for (int $118 = 0; $118 < 6; $118++) {
				$115[$118] = stream.readFloat();
			}
			switch ($117) {
				case java.awt.geom.PathIterator.SEG_MOVETO :
					$114.moveTo($115[0], $115[1]);
					break;
				case java.awt.geom.PathIterator.SEG_LINETO :
					$114.lineTo($115[0], $115[1]);
					break;
				case java.awt.geom.PathIterator.SEG_CUBICTO :
					$114.curveTo($115[0], $115[1], $115[2], 
					$115[3], $115[4], $115[5]);
					break;
				case java.awt.geom.PathIterator.SEG_QUADTO :
					$114.quadTo($115[0], $115[1], $115[2], $115[3]);
					break;
				case java.awt.geom.PathIterator.SEG_CLOSE :
					$114.closePath();
					break;
				default :
					throw new java.lang.RuntimeException(
					"JFreeChart - No path exists");}

			$114.setWindingRule(stream.readInt());
			$116 = stream.readBoolean();
		} 
		result = $114;
	} else 
	{
		result = ((java.awt.Shape) (stream.readObject()));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.LengthAdjustmentType)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.LengthAdjustmentType)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX, anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - w, anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
								result = new java.awt.geom.Rectangle2D.Double(
								anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

							}}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX, anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - w, anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
								result = new java.awt.geom.Rectangle2D.Double(
								anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

							}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
					result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
						result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
					}}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
					result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
						result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
					}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c1 != c2) {
	return false;
}:if (c1 != c2) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
	}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.LEFT) == org.jfree.chart.util.Align.LEFT) {
	x = frame.getX();
}:if ((align & org.jfree.chart.util.Align.LEFT) == org.jfree.chart.util.Align.LEFT) {
	x = frame.getX();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.RIGHT) == org.jfree.chart.util.Align.RIGHT) {
	x = frame.getMaxX() - w;
}:if ((align & org.jfree.chart.util.Align.RIGHT) == org.jfree.chart.util.Align.RIGHT) {
	x = frame.getMaxX() - w;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - w, anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - w, anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
	result = org.jfree.chart.util.RectangleEdge.RIGHT;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
		result = org.jfree.chart.util.RectangleEdge.LEFT;
	}}:if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
	result = org.jfree.chart.util.RectangleEdge.RIGHT;
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
		result = org.jfree.chart.util.RectangleEdge.LEFT;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {
	java.lang.Class c = ((java.lang.Class) (stream.readObject()));
	if (org.jfree.chart.util.SerialUtilities.isSerializable(c)) {
		result = ((java.awt.Paint) (stream.readObject()));
	} else 
	{ 		if (c.equals(java.awt.GradientPaint.class)) {
			float x1 = stream.readFloat();
			float y1 = stream.readFloat();
			java.awt.Color c1 = ((java.awt.Color) (stream.readObject()));
			float x2 = stream.readFloat();
			float y2 = stream.readFloat();
			java.awt.Color c2 = ((java.awt.Color) (stream.readObject()));
			boolean isCyclic = stream.readBoolean();
			result = new java.awt.GradientPaint(x1, y1, c1, x2, y2, c2, isCyclic);
		}}
}:if (!isNull) {
	java.lang.Class $36 = ((java.lang.Class) (stream.readObject()));
	if (org.jfree.chart.util.SerialUtilities.isSerializable($36)) {
		result = ((java.awt.Paint) (stream.readObject()));
	} else 
	{ 		if ($36.equals(java.awt.GradientPaint.class)) {
			float $37 = stream.readFloat();
			float $38 = stream.readFloat();
			java.awt.Color $39 = ((java.awt.Color) (stream.readObject()));
			float $40 = stream.readFloat();
			float $41 = stream.readFloat();
			java.awt.Color $42 = ((java.awt.Color) (stream.readObject()));
			boolean $43 = stream.readBoolean();
			result = new java.awt.GradientPaint($37, $38, $39, $40, $41, $42, $43);
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (e1 == null) {
	return e2 == null;
}:if (e1 == null) {
	return e2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.Line2D) {
	java.awt.geom.Line2D line = ((java.awt.geom.Line2D) (shape));
	stream.writeObject(java.awt.geom.Line2D.class);
	stream.writeDouble(line.getX1());
	stream.writeDouble(line.getY1());
	stream.writeDouble(line.getX2());
	stream.writeDouble(line.getY2());
} else 
{ 	if (shape instanceof java.awt.geom.Rectangle2D) {
		java.awt.geom.Rectangle2D rectangle = ((java.awt.geom.Rectangle2D) (shape));
		stream.writeObject(java.awt.geom.Rectangle2D.class);
		stream.writeDouble(rectangle.getX());
		stream.writeDouble(rectangle.getY());
		stream.writeDouble(rectangle.getWidth());
		stream.writeDouble(rectangle.getHeight());
	} else 
	{ 		if (shape instanceof java.awt.geom.Ellipse2D) {
			java.awt.geom.Ellipse2D ellipse = ((java.awt.geom.Ellipse2D) (shape));
			stream.writeObject(java.awt.geom.Ellipse2D.class);
			stream.writeDouble(ellipse.getX());
			stream.writeDouble(ellipse.getY());
			stream.writeDouble(ellipse.getWidth());
			stream.writeDouble(ellipse.getHeight());
		} else 
		{ 			if (shape instanceof java.awt.geom.Arc2D) {
				java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
				stream.writeObject(java.awt.geom.Arc2D.class);
				stream.writeDouble(arc.getX());
				stream.writeDouble(arc.getY());
				stream.writeDouble(arc.getWidth());
				stream.writeDouble(arc.getHeight());
				stream.writeDouble(arc.getAngleStart());
				stream.writeDouble(arc.getAngleExtent());
				stream.writeInt(arc.getArcType());
			} else 
			{ 				if (shape instanceof java.awt.geom.GeneralPath) {
					stream.writeObject(java.awt.geom.GeneralPath.class);
					java.awt.geom.PathIterator pi = shape.getPathIterator(null);
					float[] args = new float[6];
					stream.writeBoolean(pi.isDone());
					while (!pi.isDone()) {
						int type = pi.currentSegment(args);
						stream.writeInt(type);


						for (int i = 0; i < 6; i++) {
							stream.writeFloat(args[i]);
						}
						stream.writeInt(pi.getWindingRule());
						pi.next();
						stream.writeBoolean(pi.isDone());
					} 
				} else 
				{
					stream.writeObject(shape.getClass());
					stream.writeObject(shape);
				}}}}}:if (shape instanceof java.awt.geom.Line2D) {
	java.awt.geom.Line2D $60 = ((java.awt.geom.Line2D) (shape));
	stream.writeObject(java.awt.geom.Line2D.class);
	stream.writeDouble($60.getX1());
	stream.writeDouble($60.getY1());
	stream.writeDouble($60.getX2());
	stream.writeDouble($60.getY2());
} else 
{ 	if (shape instanceof java.awt.geom.Rectangle2D) {
		java.awt.geom.Rectangle2D $61 = ((java.awt.geom.Rectangle2D) (shape));
		stream.writeObject(java.awt.geom.Rectangle2D.class);
		stream.writeDouble($61.getX());
		stream.writeDouble($61.getY());
		stream.writeDouble($61.getWidth());
		stream.writeDouble($61.getHeight());
	} else 
	{ 		if (shape instanceof java.awt.geom.Ellipse2D) {
			java.awt.geom.Ellipse2D $62 = ((java.awt.geom.Ellipse2D) (shape));
			stream.writeObject(java.awt.geom.Ellipse2D.class);
			stream.writeDouble($62.getX());
			stream.writeDouble($62.getY());
			stream.writeDouble($62.getWidth());
			stream.writeDouble($62.getHeight());
		} else 
		{ 			if (shape instanceof java.awt.geom.Arc2D) {
				java.awt.geom.Arc2D $63 = ((java.awt.geom.Arc2D) (shape));
				stream.writeObject(java.awt.geom.Arc2D.class);
				stream.writeDouble($63.getX());
				stream.writeDouble($63.getY());
				stream.writeDouble($63.getWidth());
				stream.writeDouble($63.getHeight());
				stream.writeDouble($63.getAngleStart());
				stream.writeDouble($63.getAngleExtent());
				stream.writeInt($63.getArcType());
			} else 
			{ 				if (shape instanceof java.awt.geom.GeneralPath) {
					stream.writeObject(java.awt.geom.GeneralPath.class);
					java.awt.geom.PathIterator $64 = shape.getPathIterator(null);
					float[] $65 = new float[6];
					stream.writeBoolean($64.isDone());
					while (!$64.isDone()) {
						int $66 = $64.currentSegment($65);
						stream.writeInt($66);


						for (int $67 = 0; $67 < 6; $67++) {
							stream.writeFloat($65[$67]);
						}
						stream.writeInt($64.getWindingRule());
						$64.next();
						stream.writeBoolean($64.isDone());
					} 
				} else 
				{
					stream.writeObject(shape.getClass());
					stream.writeObject(shape);
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (unitType == null) {
	throw new java.lang.IllegalArgumentException("Null 'unitType' argument.");
}:if (unitType == null) {
	throw new java.lang.IllegalArgumentException("Null 'unitType' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.SortOrder.ASCENDING)) {
	return org.jfree.chart.util.SortOrder.ASCENDING;
} else 
{ 	if (this.equals(org.jfree.chart.util.SortOrder.DESCENDING)) {
		return org.jfree.chart.util.SortOrder.DESCENDING;
	}}:if (this.equals(org.jfree.chart.util.SortOrder.ASCENDING)) {
	return org.jfree.chart.util.SortOrder.ASCENDING;
} else 
{ 	if (this.equals(org.jfree.chart.util.SortOrder.DESCENDING)) {
		return org.jfree.chart.util.SortOrder.DESCENDING;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
} else 
{

	return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
}:if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
} else 
{

	return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.geom.Ellipse2D) && (s2 instanceof java.awt.geom.Ellipse2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Ellipse2D) (s1)), ((java.awt.geom.Ellipse2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
		} else 
		{ 			if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
				return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
			} else 
			{

				return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
			}}}}:if ((s1 instanceof java.awt.geom.Ellipse2D) && (s2 instanceof java.awt.geom.Ellipse2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Ellipse2D) (s1)), ((java.awt.geom.Ellipse2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
		} else 
		{ 			if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
				return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
			} else 
			{

				return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.GradientPaint.class)) {
	float x1 = stream.readFloat();
	float y1 = stream.readFloat();
	java.awt.Color c1 = ((java.awt.Color) (stream.readObject()));
	float x2 = stream.readFloat();
	float y2 = stream.readFloat();
	java.awt.Color c2 = ((java.awt.Color) (stream.readObject()));
	boolean isCyclic = stream.readBoolean();
	result = new java.awt.GradientPaint(x1, y1, c1, x2, y2, c2, isCyclic);
}:if (c.equals(java.awt.GradientPaint.class)) {
	float $22 = stream.readFloat();
	float $23 = stream.readFloat();
	java.awt.Color $24 = ((java.awt.Color) (stream.readObject()));
	float $25 = stream.readFloat();
	float $26 = stream.readFloat();
	java.awt.Color $27 = ((java.awt.Color) (stream.readObject()));
	boolean $28 = stream.readBoolean();
	result = new java.awt.GradientPaint($22, $23, $24, $25, $26, $27, $28);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
			}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getMinY())), paint.getColor1(), 
	((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
	paint.getColor2(), true);
}:if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getMinY())), paint.getColor1(), 
	((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
	paint.getColor2(), true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p1.npoints != p2.npoints) {
	return false;
}:if (p1.npoints != p2.npoints) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
				}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.top != that.top) {
	return false;
}:if (this.top != that.top) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (stroke != null) {
	stream.writeBoolean(false);
	if (stroke instanceof java.awt.BasicStroke) {
		java.awt.BasicStroke s = ((java.awt.BasicStroke) (stroke));
		stream.writeObject(java.awt.BasicStroke.class);
		stream.writeFloat(s.getLineWidth());
		stream.writeInt(s.getEndCap());
		stream.writeInt(s.getLineJoin());
		stream.writeFloat(s.getMiterLimit());
		stream.writeObject(s.getDashArray());
		stream.writeFloat(s.getDashPhase());
	} else 
	{
		stream.writeObject(stroke.getClass());
		stream.writeObject(stroke);
	}
} else 
{
	stream.writeBoolean(true);
}:if (stroke != null) {
	stream.writeBoolean(false);
	if (stroke instanceof java.awt.BasicStroke) {
		java.awt.BasicStroke $3 = ((java.awt.BasicStroke) (stroke));
		stream.writeObject(java.awt.BasicStroke.class);
		stream.writeFloat($3.getLineWidth());
		stream.writeInt($3.getEndCap());
		stream.writeInt($3.getLineJoin());
		stream.writeFloat($3.getMiterLimit());
		stream.writeObject($3.getDashArray());
		stream.writeFloat($3.getDashPhase());
	} else 
	{
		stream.writeObject(stroke.getClass());
		stream.writeObject(stroke);
	}
} else 
{
	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.bottom != that.bottom) {
	return false;
}:if (this.bottom != that.bottom) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.RIGHT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
					result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
						result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
							result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
						} else 
						{ 							if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
								result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
							}}}}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP)) {
	result = org.jfree.chart.util.RectangleAnchor.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
		result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
			result = org.jfree.chart.util.RectangleAnchor.LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
				result = org.jfree.chart.util.RectangleAnchor.RIGHT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
					result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
						result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
							result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
						} else 
						{ 							if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
								result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
							}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
	} else 
	{

		return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
	}}:if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
	} else 
	{

		return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.VERTICAL;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
			result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
				result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
			}}}}:if (this.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.VERTICAL;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
			result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
				result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(that.name)) {
	return false;
}:if (!this.name.equals(that.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.Rectangle2D) {
	java.awt.geom.Rectangle2D rectangle = ((java.awt.geom.Rectangle2D) (shape));
	stream.writeObject(java.awt.geom.Rectangle2D.class);
	stream.writeDouble(rectangle.getX());
	stream.writeDouble(rectangle.getY());
	stream.writeDouble(rectangle.getWidth());
	stream.writeDouble(rectangle.getHeight());
} else 
{ 	if (shape instanceof java.awt.geom.Ellipse2D) {
		java.awt.geom.Ellipse2D ellipse = ((java.awt.geom.Ellipse2D) (shape));
		stream.writeObject(java.awt.geom.Ellipse2D.class);
		stream.writeDouble(ellipse.getX());
		stream.writeDouble(ellipse.getY());
		stream.writeDouble(ellipse.getWidth());
		stream.writeDouble(ellipse.getHeight());
	} else 
	{ 		if (shape instanceof java.awt.geom.Arc2D) {
			java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
			stream.writeObject(java.awt.geom.Arc2D.class);
			stream.writeDouble(arc.getX());
			stream.writeDouble(arc.getY());
			stream.writeDouble(arc.getWidth());
			stream.writeDouble(arc.getHeight());
			stream.writeDouble(arc.getAngleStart());
			stream.writeDouble(arc.getAngleExtent());
			stream.writeInt(arc.getArcType());
		} else 
		{ 			if (shape instanceof java.awt.geom.GeneralPath) {
				stream.writeObject(java.awt.geom.GeneralPath.class);
				java.awt.geom.PathIterator pi = shape.getPathIterator(null);
				float[] args = new float[6];
				stream.writeBoolean(pi.isDone());
				while (!pi.isDone()) {
					int type = pi.currentSegment(args);
					stream.writeInt(type);


					for (int i = 0; i < 6; i++) {
						stream.writeFloat(args[i]);
					}
					stream.writeInt(pi.getWindingRule());
					pi.next();
					stream.writeBoolean(pi.isDone());
				} 
			} else 
			{
				stream.writeObject(shape.getClass());
				stream.writeObject(shape);
			}}}}:if (shape instanceof java.awt.geom.Rectangle2D) {
	java.awt.geom.Rectangle2D $53 = ((java.awt.geom.Rectangle2D) (shape));
	stream.writeObject(java.awt.geom.Rectangle2D.class);
	stream.writeDouble($53.getX());
	stream.writeDouble($53.getY());
	stream.writeDouble($53.getWidth());
	stream.writeDouble($53.getHeight());
} else 
{ 	if (shape instanceof java.awt.geom.Ellipse2D) {
		java.awt.geom.Ellipse2D $54 = ((java.awt.geom.Ellipse2D) (shape));
		stream.writeObject(java.awt.geom.Ellipse2D.class);
		stream.writeDouble($54.getX());
		stream.writeDouble($54.getY());
		stream.writeDouble($54.getWidth());
		stream.writeDouble($54.getHeight());
	} else 
	{ 		if (shape instanceof java.awt.geom.Arc2D) {
			java.awt.geom.Arc2D $55 = ((java.awt.geom.Arc2D) (shape));
			stream.writeObject(java.awt.geom.Arc2D.class);
			stream.writeDouble($55.getX());
			stream.writeDouble($55.getY());
			stream.writeDouble($55.getWidth());
			stream.writeDouble($55.getHeight());
			stream.writeDouble($55.getAngleStart());
			stream.writeDouble($55.getAngleExtent());
			stream.writeInt($55.getArcType());
		} else 
		{ 			if (shape instanceof java.awt.geom.GeneralPath) {
				stream.writeObject(java.awt.geom.GeneralPath.class);
				java.awt.geom.PathIterator $56 = shape.getPathIterator(null);
				float[] $57 = new float[6];
				stream.writeBoolean($56.isDone());
				while (!$56.isDone()) {
					int $58 = $56.currentSegment($57);
					stream.writeInt($58);


					for (int $59 = 0; $59 < 6; $59++) {
						stream.writeFloat($57[$59]);
					}
					stream.writeInt($56.getWindingRule());
					$56.next();
					stream.writeBoolean($56.isDone());
				} 
			} else 
			{
				stream.writeObject(shape.getClass());
				stream.writeObject(shape);
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (name.startsWith("/")) {

	return name.substring(1);
}:if (name.startsWith("/")) {

	return name.substring(1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (vertical) {
	topMargin = calculateTopInset(base.getHeight());
	bottomMargin = calculateBottomInset(base.getHeight());
}:if (vertical) {
	topMargin = calculateTopInset(base.getHeight());
	bottomMargin = calculateBottomInset(base.getHeight());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.util.Arrays.equals(array1[i], array2[i])) {
	return false;
}:if (!java.util.Arrays.equals(array1[i], array2[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (limit1 != limit2) {
	return false;
}:if (limit1 != limit2) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (applicationCL == null) {
	return java.lang.ClassLoader.getSystemClassLoader();
} else 
{
	return applicationCL;
}:if (applicationCL == null) {
	return java.lang.ClassLoader.getSystemClassLoader();
} else 
{
	return applicationCL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
		} else 
		{

			return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
		}}}:if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
		} else 
		{

			return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.SortOrder)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.SortOrder)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (that.unitType != this.unitType) {
	return false;
}:if (that.unitType != this.unitType) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(that.toString())) {
	return false;
}:if (!this.name.equals(that.toString())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showBase) {
	result.append(this.baseLabel);
	result.append(this.powerLabel);
}:if (this.showBase) {
	result.append(this.baseLabel);
	result.append(this.powerLabel);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.Ellipse2D.class)) {
	double x = stream.readDouble();
	double y = stream.readDouble();
	double w = stream.readDouble();
	double h = stream.readDouble();
	result = new java.awt.geom.Ellipse2D.Double(x, y, w, h);
} else 
{ 	if (c.equals(java.awt.geom.Arc2D.class)) {
		double x = stream.readDouble();
		double y = stream.readDouble();
		double w = stream.readDouble();
		double h = stream.readDouble();
		double as = stream.readDouble();
		double ae = stream.readDouble();
		int at = stream.readInt();
		result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
	} else 
	{ 		if (c.equals(java.awt.geom.GeneralPath.class)) {
			java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
			float[] args = new float[6];
			boolean hasNext = stream.readBoolean();
			while (!hasNext) {
				int type = stream.readInt();
				for (int i = 0; i < 6; i++) {
					args[i] = stream.readFloat();
				}
				switch (type) {
					case java.awt.geom.PathIterator.SEG_MOVETO :
						gp.moveTo(args[0], args[1]);
						break;
					case java.awt.geom.PathIterator.SEG_LINETO :
						gp.lineTo(args[0], args[1]);
						break;
					case java.awt.geom.PathIterator.SEG_CUBICTO :
						gp.curveTo(args[0], args[1], args[2], 
						args[3], args[4], args[5]);
						break;
					case java.awt.geom.PathIterator.SEG_QUADTO :
						gp.quadTo(args[0], args[1], args[2], args[3]);
						break;
					case java.awt.geom.PathIterator.SEG_CLOSE :
						gp.closePath();
						break;
					default :
						throw new java.lang.RuntimeException(
						"JFreeChart - No path exists");}

				gp.setWindingRule(stream.readInt());
				hasNext = stream.readBoolean();
			} 
			result = gp;
		} else 
		{
			result = ((java.awt.Shape) (stream.readObject()));
		}}}:if (c.equals(java.awt.geom.Ellipse2D.class)) {
	double $119 = stream.readDouble();
	double $120 = stream.readDouble();
	double $121 = stream.readDouble();
	double $122 = stream.readDouble();
	result = new java.awt.geom.Ellipse2D.Double($119, $120, $121, $122);
} else 
{ 	if (c.equals(java.awt.geom.Arc2D.class)) {
		double $123 = stream.readDouble();
		double $124 = stream.readDouble();
		double $125 = stream.readDouble();
		double $126 = stream.readDouble();
		double $127 = stream.readDouble();
		double $128 = stream.readDouble();
		int $129 = stream.readInt();
		result = new java.awt.geom.Arc2D.Double($123, $124, $125, $126, $127, $128, $129);
	} else 
	{ 		if (c.equals(java.awt.geom.GeneralPath.class)) {
			java.awt.geom.GeneralPath $130 = new java.awt.geom.GeneralPath();
			float[] $131 = new float[6];
			boolean $132 = stream.readBoolean();
			while (!$132) {
				int $133 = stream.readInt();
				for (int $134 = 0; $134 < 6; $134++) {
					$131[$134] = stream.readFloat();
				}
				switch ($133) {
					case java.awt.geom.PathIterator.SEG_MOVETO :
						$130.moveTo($131[0], $131[1]);
						break;
					case java.awt.geom.PathIterator.SEG_LINETO :
						$130.lineTo($131[0], $131[1]);
						break;
					case java.awt.geom.PathIterator.SEG_CUBICTO :
						$130.curveTo($131[0], $131[1], $131[2], 
						$131[3], $131[4], $131[5]);
						break;
					case java.awt.geom.PathIterator.SEG_QUADTO :
						$130.quadTo($131[0], $131[1], $131[2], $131[3]);
						break;
					case java.awt.geom.PathIterator.SEG_CLOSE :
						$130.closePath();
						break;
					default :
						throw new java.lang.RuntimeException(
						"JFreeChart - No path exists");}

				$130.setWindingRule(stream.readInt());
				$132 = stream.readBoolean();
			} 
			result = $130;
		} else 
		{
			result = ((java.awt.Shape) (stream.readObject()));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type != that.type) {
	return false;
}:if (this.type != that.type) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.FIT_VERTICAL) == org.jfree.chart.util.Align.FIT_VERTICAL) {
	h = frame.getHeight();
}:if ((align & org.jfree.chart.util.Align.FIT_VERTICAL) == org.jfree.chart.util.Align.FIT_VERTICAL) {
	h = frame.getHeight();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array2 == null) {
	return false;
}:if (array2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.GradientPaintTransformType)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.GradientPaintTransformType)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
	return org.jfree.chart.util.VerticalAlignment.CENTER;
} else 
{
	return null;
}:if (this.equals(org.jfree.chart.util.VerticalAlignment.CENTER)) {
	return org.jfree.chart.util.VerticalAlignment.CENTER;
} else 
{
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1[i] != array2[i]) {
	return false;
}:if (array1[i] != array2[i]) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleEdge.TOP)) {
	result = org.jfree.chart.util.RectangleEdge.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.BOTTOM)) {
		result = org.jfree.chart.util.RectangleEdge.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
			result = org.jfree.chart.util.RectangleEdge.LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
				result = org.jfree.chart.util.RectangleEdge.RIGHT;
			}}}}:if (this.equals(org.jfree.chart.util.RectangleEdge.TOP)) {
	result = org.jfree.chart.util.RectangleEdge.TOP;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.BOTTOM)) {
		result = org.jfree.chart.util.RectangleEdge.BOTTOM;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
			result = org.jfree.chart.util.RectangleEdge.LEFT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
				result = org.jfree.chart.util.RectangleEdge.RIGHT;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(oColor)) {
	return name;
}:if (c.equals(oColor)) {
	return name;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == null) {
	throw new java.lang.IllegalArgumentException("Null 'anchor' argument.");
}:if (anchor == null) {
	throw new java.lang.IllegalArgumentException("Null 'anchor' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type.equals(
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getCenterY())), paint.getColor2(), 
	((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
	paint.getColor1(), true);
} else 
{ 	if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
		((float) (bounds.getMinY())), paint.getColor1(), 
		((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
		paint.getColor2(), true);
	}}:if (this.type.equals(
org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getCenterY())), paint.getColor2(), 
	((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
	paint.getColor1(), true);
} else 
{ 	if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
		((float) (bounds.getMinY())), paint.getColor1(), 
		((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
		paint.getColor2(), true);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (event.getWindow() == this) {
	dispose();
	java.lang.System.exit(0);
}:if (event.getWindow() == this) {
	dispose();
	java.lang.System.exit(0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getMinY())), paint.getColor1(), 
	((float) (bounds.getCenterX())), ((float) (bounds.getMaxY())), 
	paint.getColor2());
} else 
{ 	if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getMinX())), 
		((float) (bounds.getCenterY())), paint.getColor1(), 
		((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
		paint.getColor2());
	} else 
	{ 		if (this.type.equals(
		org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
			result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
			((float) (bounds.getCenterY())), paint.getColor2(), 
			((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
			paint.getColor1(), true);
		} else 
		{ 			if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
				result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
				((float) (bounds.getMinY())), paint.getColor1(), 
				((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
				paint.getColor2(), true);
			}}}}:if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
	result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
	((float) (bounds.getMinY())), paint.getColor1(), 
	((float) (bounds.getCenterX())), ((float) (bounds.getMaxY())), 
	paint.getColor2());
} else 
{ 	if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL)) {
		result = new java.awt.GradientPaint(((float) (bounds.getMinX())), 
		((float) (bounds.getCenterY())), paint.getColor1(), 
		((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
		paint.getColor2());
	} else 
	{ 		if (this.type.equals(
		org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
			result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
			((float) (bounds.getCenterY())), paint.getColor2(), 
			((float) (bounds.getMaxX())), ((float) (bounds.getCenterY())), 
			paint.getColor1(), true);
		} else 
		{ 			if (this.type.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
				result = new java.awt.GradientPaint(((float) (bounds.getCenterX())), 
				((float) (bounds.getMinY())), paint.getColor1(), 
				((float) (bounds.getCenterX())), ((float) (bounds.getCenterY())), 
				paint.getColor2(), true);
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.baseLabel.equals(that.baseLabel)) {
	return false;
}:if (!this.baseLabel.equals(that.baseLabel)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (paint != null) {
	stream.writeBoolean(false);
	stream.writeObject(paint.getClass());
	if (paint instanceof java.io.Serializable) {
		stream.writeObject(paint);
	} else 
	{ 		if (paint instanceof java.awt.GradientPaint) {
			java.awt.GradientPaint gp = ((java.awt.GradientPaint) (paint));
			stream.writeFloat(((float) (gp.getPoint1().getX())));
			stream.writeFloat(((float) (gp.getPoint1().getY())));
			stream.writeObject(gp.getColor1());
			stream.writeFloat(((float) (gp.getPoint2().getX())));
			stream.writeFloat(((float) (gp.getPoint2().getY())));
			stream.writeObject(gp.getColor2());
			stream.writeBoolean(gp.isCyclic());
		}}
} else 
{
	stream.writeBoolean(true);
}:if (paint != null) {
	stream.writeBoolean(false);
	stream.writeObject(paint.getClass());
	if (paint instanceof java.io.Serializable) {
		stream.writeObject(paint);
	} else 
	{ 		if (paint instanceof java.awt.GradientPaint) {
			java.awt.GradientPaint $5 = ((java.awt.GradientPaint) (paint));
			stream.writeFloat(((float) ($5.getPoint1().getX())));
			stream.writeFloat(((float) ($5.getPoint1().getY())));
			stream.writeObject($5.getColor1());
			stream.writeFloat(((float) ($5.getPoint2().getX())));
			stream.writeFloat(((float) ($5.getPoint2().getY())));
			stream.writeObject($5.getColor2());
			stream.writeBoolean($5.isCyclic());
		}}
} else 
{
	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p1.getWindingRule() != p2.getWindingRule()) {
	return false;
}:if (p1.getWindingRule() != p2.getWindingRule()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
	}}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.RectangleAnchor)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.RectangleAnchor)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!m1.equals(m2)) {
	return false;
}:if (!m1.equals(m2)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.showBase != that.showBase) {
	return false;
}:if (this.showBase != that.showBase) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (iterator1.isDone() != iterator2.isDone()) {
	return false;
}:if (iterator1.isDone() != iterator2.isDone()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
	result = org.jfree.chart.util.HorizontalAlignment.CENTER;
}:if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
	result = org.jfree.chart.util.HorizontalAlignment.CENTER;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o1 == null) {
	return 1;
}:if (o1 == null) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!org.jfree.chart.util.PaintUtilities.equal(getPaint(i), that.getPaint(i))) {
	return false;
}:if (!org.jfree.chart.util.PaintUtilities.equal(getPaint(i), that.getPaint(i))) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
			}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.UnitType.ABSOLUTE)) {
	return org.jfree.chart.util.UnitType.ABSOLUTE;
} else 
{ 	if (this.equals(org.jfree.chart.util.UnitType.RELATIVE)) {
		return org.jfree.chart.util.UnitType.RELATIVE;
	}}:if (this.equals(org.jfree.chart.util.UnitType.ABSOLUTE)) {
	return org.jfree.chart.util.UnitType.ABSOLUTE;
} else 
{ 	if (this.equals(org.jfree.chart.util.UnitType.RELATIVE)) {
		return org.jfree.chart.util.UnitType.RELATIVE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.SortOrder.DESCENDING)) {
	return org.jfree.chart.util.SortOrder.DESCENDING;
}:if (this.equals(org.jfree.chart.util.SortOrder.DESCENDING)) {
	return org.jfree.chart.util.SortOrder.DESCENDING;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {
	java.lang.Class c = ((java.lang.Class) (stream.readObject()));
	if (c.equals(java.awt.BasicStroke.class)) {
		float width = stream.readFloat();
		int cap = stream.readInt();
		int join = stream.readInt();
		float miterLimit = stream.readFloat();
		float[] dash = ((float[]) (stream.readObject()));
		float dashPhase = stream.readFloat();
		result = new java.awt.BasicStroke(width, cap, join, miterLimit, dash, 
		dashPhase);
	} else 
	{
		result = ((java.awt.Stroke) (stream.readObject()));
	}
}:if (!isNull) {
	java.lang.Class $19 = ((java.lang.Class) (stream.readObject()));
	if ($19.equals(java.awt.BasicStroke.class)) {
		float $20 = stream.readFloat();
		int $21 = stream.readInt();
		int $22 = stream.readInt();
		float $23 = stream.readFloat();
		float[] $24 = ((float[]) (stream.readObject()));
		float $25 = stream.readFloat();
		result = new java.awt.BasicStroke($20, $21, $22, $23, $24, 
		$25);
	} else 
	{
		result = ((java.awt.Stroke) (stream.readObject()));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (l2 == null) {
	return false;
}:if (l2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.HorizontalAlignment.RIGHT)) {
	result = org.jfree.chart.util.HorizontalAlignment.RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
		result = org.jfree.chart.util.HorizontalAlignment.CENTER;
	}}:if (this.equals(org.jfree.chart.util.HorizontalAlignment.RIGHT)) {
	result = org.jfree.chart.util.HorizontalAlignment.RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.HorizontalAlignment.CENTER)) {
		result = org.jfree.chart.util.HorizontalAlignment.CENTER;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (threadLoader != null) {
	return threadLoader;
}:if (threadLoader != null) {
	return threadLoader;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {
	double x = stream.readDouble();
	double y = stream.readDouble();
	result = new java.awt.geom.Point2D.Double(x, y);
}:if (!isNull) {
	double $2 = stream.readDouble();
	double $3 = stream.readDouble();
	result = new java.awt.geom.Point2D.Double($2, $3);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (cl == null) {
	return null;
}:if (cl == null) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (vertical == org.jfree.chart.util.LengthAdjustmentType.EXPAND) {
	double topMargin = calculateTopOutset(h);
	y = y - topMargin;
	h = (h + topMargin) + calculateBottomOutset(h);
} else 
{ 	if (vertical == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
		double topMargin = calculateTopInset(h);
		y = y + topMargin;
		h = (h - topMargin) - calculateBottomInset(h);
	}}:if (vertical == org.jfree.chart.util.LengthAdjustmentType.EXPAND) {
	double $10 = calculateTopOutset(h);
	y = y - $10;
	h = (h + $10) + calculateBottomOutset(h);
} else 
{ 	if (vertical == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
		double $11 = calculateTopInset(h);
		y = y + $11;
		h = (h - $11) - calculateBottomInset(h);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (org.jfree.chart.util.ObjectUtilities.classLoader != null) {
	return org.jfree.chart.util.ObjectUtilities.classLoader;
}:if (org.jfree.chart.util.ObjectUtilities.classLoader != null) {
	return org.jfree.chart.util.ObjectUtilities.classLoader;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.CENTER) {
	result.setLocation(rectangle.getCenterX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
		result.setLocation(rectangle.getCenterX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
			result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
						result.setLocation(rectangle.getMinX(), rectangle.getMinY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
							result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
								result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
							} else 
							{ 								if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
									result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
								}}}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.CENTER) {
	result.setLocation(rectangle.getCenterX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
		result.setLocation(rectangle.getCenterX(), rectangle.getMinY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
			result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
						result.setLocation(rectangle.getMinX(), rectangle.getMinY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
							result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
								result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
							} else 
							{ 								if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
									result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
								}}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (collection == null) {
	throw new java.lang.IllegalArgumentException("Null 'collection' argument.");
}:if (collection == null) {
	throw new java.lang.IllegalArgumentException("Null 'collection' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s1 == null) {
	return s2 == null;
}:if (s1 == null) {
	return s2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (array1[i] == null) {
	if (array2[i] != null) {
		return false;
	}
}:if (array1[i] == null) {
	if (array2[i] != null) {
		return false;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.LogFormat)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.LogFormat)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (as != null) {
	stream.writeBoolean(false);
	java.text.AttributedCharacterIterator aci = as.getIterator();


	java.lang.StringBuffer plainStr = new java.lang.StringBuffer();
	char current = aci.first();
	while (current != java.text.CharacterIterator.DONE) {
		plainStr = plainStr.append(current);
		current = aci.next();
	} 
	stream.writeObject(plainStr.toString());


	current = aci.first();
	int begin = aci.getBeginIndex();
	while (current != java.text.CharacterIterator.DONE) {



		stream.writeChar(current);


		int limit = aci.getRunLimit();
		stream.writeInt(limit - begin);


		java.util.Map atts = new java.util.HashMap(aci.getAttributes());
		stream.writeObject(atts);
		current = aci.setIndex(limit);
	} 


	stream.writeChar(java.text.CharacterIterator.DONE);
} else 
{

	stream.writeBoolean(true);
}:if (as != null) {
	stream.writeBoolean(false);
	java.text.AttributedCharacterIterator $6 = as.getIterator();


	java.lang.StringBuffer $7 = new java.lang.StringBuffer();
	char $8 = $6.first();
	while ($8 != java.text.CharacterIterator.DONE) {
		$7 = $7.append($8);
		$8 = $6.next();
	} 
	stream.writeObject($7.toString());


	$8 = $6.first();
	int $9 = $6.getBeginIndex();
	while ($8 != java.text.CharacterIterator.DONE) {



		stream.writeChar($8);


		int $10 = $6.getRunLimit();
		stream.writeInt($10 - $9);


		java.util.Map $11 = new java.util.HashMap($6.getAttributes());
		stream.writeObject($11);
		$8 = $6.setIndex($10);
	} 


	stream.writeChar(java.text.CharacterIterator.DONE);
} else 
{

	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.right != that.right) {
	return false;
}:if (this.right != that.right) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (index != (-1)) {
	setStroke(index, org.jfree.chart.util.SerialUtilities.readStroke(stream));
}:if (index != (-1)) {
	setStroke(index, org.jfree.chart.util.SerialUtilities.readStroke(stream));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(alignment.name)) {
	return false;
}:if (!this.name.equals(alignment.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.Rotation.ANTICLOCKWISE)) {
	return org.jfree.chart.util.Rotation.ANTICLOCKWISE;
}:if (this.equals(org.jfree.chart.util.Rotation.ANTICLOCKWISE)) {
	return org.jfree.chart.util.Rotation.ANTICLOCKWISE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (stream == null) {
	throw new java.lang.IllegalArgumentException("Null 'stream' argument.");
}:if (stream == null) {
	throw new java.lang.IllegalArgumentException("Null 'stream' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (vertical == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
	double topMargin = calculateTopInset(h);
	y = y + topMargin;
	h = (h - topMargin) - calculateBottomInset(h);
}:if (vertical == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
	double $6 = calculateTopInset(h);
	y = y + $6;
	h = (h - $6) - calculateBottomInset(h);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a == null) {
	return 0;
}:if (a == null) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape != null) {
	stream.writeBoolean(false);
	if (shape instanceof java.awt.geom.Line2D) {
		java.awt.geom.Line2D line = ((java.awt.geom.Line2D) (shape));
		stream.writeObject(java.awt.geom.Line2D.class);
		stream.writeDouble(line.getX1());
		stream.writeDouble(line.getY1());
		stream.writeDouble(line.getX2());
		stream.writeDouble(line.getY2());
	} else 
	{ 		if (shape instanceof java.awt.geom.Rectangle2D) {
			java.awt.geom.Rectangle2D rectangle = ((java.awt.geom.Rectangle2D) (shape));
			stream.writeObject(java.awt.geom.Rectangle2D.class);
			stream.writeDouble(rectangle.getX());
			stream.writeDouble(rectangle.getY());
			stream.writeDouble(rectangle.getWidth());
			stream.writeDouble(rectangle.getHeight());
		} else 
		{ 			if (shape instanceof java.awt.geom.Ellipse2D) {
				java.awt.geom.Ellipse2D ellipse = ((java.awt.geom.Ellipse2D) (shape));
				stream.writeObject(java.awt.geom.Ellipse2D.class);
				stream.writeDouble(ellipse.getX());
				stream.writeDouble(ellipse.getY());
				stream.writeDouble(ellipse.getWidth());
				stream.writeDouble(ellipse.getHeight());
			} else 
			{ 				if (shape instanceof java.awt.geom.Arc2D) {
					java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
					stream.writeObject(java.awt.geom.Arc2D.class);
					stream.writeDouble(arc.getX());
					stream.writeDouble(arc.getY());
					stream.writeDouble(arc.getWidth());
					stream.writeDouble(arc.getHeight());
					stream.writeDouble(arc.getAngleStart());
					stream.writeDouble(arc.getAngleExtent());
					stream.writeInt(arc.getArcType());
				} else 
				{ 					if (shape instanceof java.awt.geom.GeneralPath) {
						stream.writeObject(java.awt.geom.GeneralPath.class);
						java.awt.geom.PathIterator pi = shape.getPathIterator(null);
						float[] args = new float[6];
						stream.writeBoolean(pi.isDone());
						while (!pi.isDone()) {
							int type = pi.currentSegment(args);
							stream.writeInt(type);


							for (int i = 0; i < 6; i++) {
								stream.writeFloat(args[i]);
							}
							stream.writeInt(pi.getWindingRule());
							pi.next();
							stream.writeBoolean(pi.isDone());
						} 
					} else 
					{
						stream.writeObject(shape.getClass());
						stream.writeObject(shape);
					}}}}}
} else 
{
	stream.writeBoolean(true);
}:if (shape != null) {
	stream.writeBoolean(false);
	if (shape instanceof java.awt.geom.Line2D) {
		java.awt.geom.Line2D $68 = ((java.awt.geom.Line2D) (shape));
		stream.writeObject(java.awt.geom.Line2D.class);
		stream.writeDouble($68.getX1());
		stream.writeDouble($68.getY1());
		stream.writeDouble($68.getX2());
		stream.writeDouble($68.getY2());
	} else 
	{ 		if (shape instanceof java.awt.geom.Rectangle2D) {
			java.awt.geom.Rectangle2D $69 = ((java.awt.geom.Rectangle2D) (shape));
			stream.writeObject(java.awt.geom.Rectangle2D.class);
			stream.writeDouble($69.getX());
			stream.writeDouble($69.getY());
			stream.writeDouble($69.getWidth());
			stream.writeDouble($69.getHeight());
		} else 
		{ 			if (shape instanceof java.awt.geom.Ellipse2D) {
				java.awt.geom.Ellipse2D $70 = ((java.awt.geom.Ellipse2D) (shape));
				stream.writeObject(java.awt.geom.Ellipse2D.class);
				stream.writeDouble($70.getX());
				stream.writeDouble($70.getY());
				stream.writeDouble($70.getWidth());
				stream.writeDouble($70.getHeight());
			} else 
			{ 				if (shape instanceof java.awt.geom.Arc2D) {
					java.awt.geom.Arc2D $71 = ((java.awt.geom.Arc2D) (shape));
					stream.writeObject(java.awt.geom.Arc2D.class);
					stream.writeDouble($71.getX());
					stream.writeDouble($71.getY());
					stream.writeDouble($71.getWidth());
					stream.writeDouble($71.getHeight());
					stream.writeDouble($71.getAngleStart());
					stream.writeDouble($71.getAngleExtent());
					stream.writeInt($71.getArcType());
				} else 
				{ 					if (shape instanceof java.awt.geom.GeneralPath) {
						stream.writeObject(java.awt.geom.GeneralPath.class);
						java.awt.geom.PathIterator $72 = shape.getPathIterator(null);
						float[] $73 = new float[6];
						stream.writeBoolean($72.isDone());
						while (!$72.isDone()) {
							int $74 = $72.currentSegment($73);
							stream.writeInt($74);


							for (int $75 = 0; $75 < 6; $75++) {
								stream.writeFloat($73[$75]);
							}
							stream.writeInt($72.getWindingRule());
							$72.next();
							stream.writeBoolean($72.isDone());
						} 
					} else 
					{
						stream.writeObject(shape.getClass());
						stream.writeObject(shape);
					}}}}}
} else 
{
	stream.writeBoolean(true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.BasicStroke.class)) {
	float width = stream.readFloat();
	int cap = stream.readInt();
	int join = stream.readInt();
	float miterLimit = stream.readFloat();
	float[] dash = ((float[]) (stream.readObject()));
	float dashPhase = stream.readFloat();
	result = new java.awt.BasicStroke(width, cap, join, miterLimit, dash, 
	dashPhase);
} else 
{
	result = ((java.awt.Stroke) (stream.readObject()));
}:if (c.equals(java.awt.BasicStroke.class)) {
	float $13 = stream.readFloat();
	int $14 = stream.readInt();
	int $15 = stream.readInt();
	float $16 = stream.readFloat();
	float[] $17 = ((float[]) (stream.readObject()));
	float $18 = stream.readFloat();
	result = new java.awt.BasicStroke($13, $14, $15, $16, $17, 
	$18);
} else 
{
	result = ((java.awt.Stroke) (stream.readObject()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.CENTER)) {
	result = org.jfree.chart.util.RectangleAnchor.CENTER;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.RIGHT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
						result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
							result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
						} else 
						{ 							if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
								result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
							} else 
							{ 								if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
									result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
								}}}}}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.CENTER)) {
	result = org.jfree.chart.util.RectangleAnchor.CENTER;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
			result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.RIGHT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
						result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
							result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
						} else 
						{ 							if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
								result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
							} else 
							{ 								if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
									result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
								}}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!l1.getP2().equals(l2.getP2())) {
	return false;
}:if (!l1.getP2().equals(l2.getP2())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.util.Arrays.equals(p1.ypoints, p2.ypoints)) {
	return false;
}:if (!java.util.Arrays.equals(p1.ypoints, p2.ypoints)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (height / ((1 - this.top) - this.bottom)) * this.top;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (height / ((1 - this.top) - this.bottom)) * this.top;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o2 == null) {
	return -1;
}:if (o2 == null) {
	return -1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (height / ((1 - this.top) - this.bottom)) * this.bottom;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = (height / ((1 - this.top) - this.bottom)) * this.bottom;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (item != null) {
	result.add(org.jfree.chart.util.ObjectUtilities.clone(item));
} else 
{
	result.add(null);
}:if (item != null) {
	result.add(org.jfree.chart.util.ObjectUtilities.clone(item));
} else 
{
	result.add(null);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.positivePrefix.equals(that.positivePrefix)) {
	return false;
}:if (!this.positivePrefix.equals(that.positivePrefix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (stroke instanceof java.awt.BasicStroke) {
	java.awt.BasicStroke s = ((java.awt.BasicStroke) (stroke));
	stream.writeObject(java.awt.BasicStroke.class);
	stream.writeFloat(s.getLineWidth());
	stream.writeInt(s.getEndCap());
	stream.writeInt(s.getLineJoin());
	stream.writeFloat(s.getMiterLimit());
	stream.writeObject(s.getDashArray());
	stream.writeFloat(s.getDashPhase());
} else 
{
	stream.writeObject(stroke.getClass());
	stream.writeObject(stroke);
}:if (stroke instanceof java.awt.BasicStroke) {
	java.awt.BasicStroke $2 = ((java.awt.BasicStroke) (stroke));
	stream.writeObject(java.awt.BasicStroke.class);
	stream.writeFloat($2.getLineWidth());
	stream.writeInt($2.getEndCap());
	stream.writeInt($2.getLineJoin());
	stream.writeFloat($2.getMiterLimit());
	stream.writeObject($2.getDashArray());
	stream.writeFloat($2.getDashPhase());
} else 
{
	stream.writeObject(stroke.getClass());
	stream.writeObject(stroke);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.secondSuffix.equals(that.secondSuffix)) {
	return false;
}:if (!this.secondSuffix.equals(that.secondSuffix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
	result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (retval != 0) {
	return retval;
}:if (retval != 0) {
	return retval;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o1.equals(o2)) {
	return true;
}:if (o1.equals(o2)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.FIT_HORIZONTAL) == org.jfree.chart.util.Align.FIT_HORIZONTAL) {
	w = frame.getWidth();
}:if ((align & org.jfree.chart.util.Align.FIT_HORIZONTAL) == org.jfree.chart.util.Align.FIT_HORIZONTAL) {
	w = frame.getWidth();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (size > 1) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[size - 1]);
	if (size > 2) {
		result = org.jfree.chart.util.HashUtilities.hashCode(result, 
		this.objects[size / 2]);
	}
}:if (size > 1) {
	result = org.jfree.chart.util.HashUtilities.hashCode(result, this.objects[size - 1]);
	if (size > 2) {
		result = org.jfree.chart.util.HashUtilities.hashCode(result, 
		this.objects[size / 2]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.RectangleEdge)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.RectangleEdge)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.awt.geom.Ellipse2D) {
	java.awt.geom.Ellipse2D ellipse = ((java.awt.geom.Ellipse2D) (shape));
	stream.writeObject(java.awt.geom.Ellipse2D.class);
	stream.writeDouble(ellipse.getX());
	stream.writeDouble(ellipse.getY());
	stream.writeDouble(ellipse.getWidth());
	stream.writeDouble(ellipse.getHeight());
} else 
{ 	if (shape instanceof java.awt.geom.Arc2D) {
		java.awt.geom.Arc2D arc = ((java.awt.geom.Arc2D) (shape));
		stream.writeObject(java.awt.geom.Arc2D.class);
		stream.writeDouble(arc.getX());
		stream.writeDouble(arc.getY());
		stream.writeDouble(arc.getWidth());
		stream.writeDouble(arc.getHeight());
		stream.writeDouble(arc.getAngleStart());
		stream.writeDouble(arc.getAngleExtent());
		stream.writeInt(arc.getArcType());
	} else 
	{ 		if (shape instanceof java.awt.geom.GeneralPath) {
			stream.writeObject(java.awt.geom.GeneralPath.class);
			java.awt.geom.PathIterator pi = shape.getPathIterator(null);
			float[] args = new float[6];
			stream.writeBoolean(pi.isDone());
			while (!pi.isDone()) {
				int type = pi.currentSegment(args);
				stream.writeInt(type);


				for (int i = 0; i < 6; i++) {
					stream.writeFloat(args[i]);
				}
				stream.writeInt(pi.getWindingRule());
				pi.next();
				stream.writeBoolean(pi.isDone());
			} 
		} else 
		{
			stream.writeObject(shape.getClass());
			stream.writeObject(shape);
		}}}:if (shape instanceof java.awt.geom.Ellipse2D) {
	java.awt.geom.Ellipse2D $47 = ((java.awt.geom.Ellipse2D) (shape));
	stream.writeObject(java.awt.geom.Ellipse2D.class);
	stream.writeDouble($47.getX());
	stream.writeDouble($47.getY());
	stream.writeDouble($47.getWidth());
	stream.writeDouble($47.getHeight());
} else 
{ 	if (shape instanceof java.awt.geom.Arc2D) {
		java.awt.geom.Arc2D $48 = ((java.awt.geom.Arc2D) (shape));
		stream.writeObject(java.awt.geom.Arc2D.class);
		stream.writeDouble($48.getX());
		stream.writeDouble($48.getY());
		stream.writeDouble($48.getWidth());
		stream.writeDouble($48.getHeight());
		stream.writeDouble($48.getAngleStart());
		stream.writeDouble($48.getAngleExtent());
		stream.writeInt($48.getArcType());
	} else 
	{ 		if (shape instanceof java.awt.geom.GeneralPath) {
			stream.writeObject(java.awt.geom.GeneralPath.class);
			java.awt.geom.PathIterator $49 = shape.getPathIterator(null);
			float[] $50 = new float[6];
			stream.writeBoolean($49.isDone());
			while (!$49.isDone()) {
				int $51 = $49.currentSegment($50);
				stream.writeInt($51);


				for (int $52 = 0; $52 < 6; $52++) {
					stream.writeFloat($50[$52]);
				}
				stream.writeInt($49.getWindingRule());
				$49.next();
				stream.writeBoolean($49.isDone());
			} 
		} else 
		{
			stream.writeObject(shape.getClass());
			stream.writeObject(shape);
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!java.util.Arrays.equals(p1.xpoints, p2.xpoints)) {
	return false;
}:if (!java.util.Arrays.equals(p1.xpoints, p2.xpoints)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.TableOrder.BY_COLUMN)) {
	return org.jfree.chart.util.TableOrder.BY_COLUMN;
}:if (this.equals(org.jfree.chart.util.TableOrder.BY_COLUMN)) {
	return org.jfree.chart.util.TableOrder.BY_COLUMN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape instanceof java.lang.Cloneable) {
	try {
		return ((java.awt.Shape) (org.jfree.chart.util.ObjectUtilities.clone(shape)));
	}
	 catch (java.lang.CloneNotSupportedException cnse) {
	}
}:if (shape instanceof java.lang.Cloneable) {
	try {
		return ((java.awt.Shape) (org.jfree.chart.util.ObjectUtilities.clone(shape)));
	}
	 catch (java.lang.CloneNotSupportedException cnse) {
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!l1.getP1().equals(l2.getP1())) {
	return false;
}:if (!l1.getP1().equals(l2.getP1())) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (obj instanceof org.jfree.chart.util.ShapeList) {
	return super.equals(obj);
}:if (obj instanceof org.jfree.chart.util.ShapeList) {
	return super.equals(obj);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (horizontal == org.jfree.chart.util.LengthAdjustmentType.EXPAND) {
	double leftOutset = calculateLeftOutset(w);
	x = x - leftOutset;
	w = (w + leftOutset) + calculateRightOutset(w);
} else 
{ 	if (horizontal == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
		double leftMargin = calculateLeftInset(w);
		x = x + leftMargin;
		w = (w - leftMargin) - calculateRightInset(w);
	}}:if (horizontal == org.jfree.chart.util.LengthAdjustmentType.EXPAND) {
	double $8 = calculateLeftOutset(w);
	x = x - $8;
	w = (w + $8) + calculateRightOutset(w);
} else 
{ 	if (horizontal == org.jfree.chart.util.LengthAdjustmentType.CONTRACT) {
		double $9 = calculateLeftInset(w);
		x = x + $9;
		w = (w - $9) - calculateRightInset(w);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (prefix == null) {
	throw new java.lang.IllegalArgumentException("Null 'prefix' argument.");
}:if (prefix == null) {
	throw new java.lang.IllegalArgumentException("Null 'prefix' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((hours != 0) || this.showZeroHours) {
	toAppendTo.append(java.lang.String.valueOf(hours) + getHourSuffix());
}:if ((hours != 0) || this.showZeroHours) {
	toAppendTo.append(java.lang.String.valueOf(hours) + getHourSuffix());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.RIGHT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
						result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
							result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
						}}}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.RIGHT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
				} else 
				{ 					if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
						result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
					} else 
					{ 						if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
							result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
						}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (p1 == null) {
	return p2 == null;
}:if (p1 == null) {
	return p2 == null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.CENTER) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX, anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - w, anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
								result = new java.awt.geom.Rectangle2D.Double(
								anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

							} else 
							{ 								if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
									result = new java.awt.geom.Rectangle2D.Double(
									anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

								}}}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.CENTER) {
	result = new java.awt.geom.Rectangle2D.Double(
	anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
		result = new java.awt.geom.Rectangle2D.Double(
		anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
			result = new java.awt.geom.Rectangle2D.Double(
			anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
				result = new java.awt.geom.Rectangle2D.Double(
				anchorX, anchorY - (h / 2.0), w, h);

			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
					result = new java.awt.geom.Rectangle2D.Double(
					anchorX - w, anchorY - (h / 2.0), w, h);

				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
						result = new java.awt.geom.Rectangle2D.Double(
						anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
							result = new java.awt.geom.Rectangle2D.Double(
							anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
								result = new java.awt.geom.Rectangle2D.Double(
								anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

							} else 
							{ 								if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
									result = new java.awt.geom.Rectangle2D.Double(
									anchorX - (w / 2.0), anchorY - (h / 2.0), w, h);

								}}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.bottom * height;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.bottom * height;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
}:if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (elapsed < 0) {
	elapsed *= -1L;
	signPrefix = "-";
} else 
{
	signPrefix = this.positivePrefix;
}:if (elapsed < 0) {
	elapsed *= -1L;
	signPrefix = "-";
} else 
{
	signPrefix = this.positivePrefix;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!isNull) {

	java.lang.String plainStr = ((java.lang.String) (stream.readObject()));
	result = new java.text.AttributedString(plainStr);
	char c = stream.readChar();
	int start = 0;
	while (c != java.text.CharacterIterator.DONE) {
		int limit = stream.readInt();
		java.util.Map atts = ((java.util.Map) (stream.readObject()));
		result.addAttributes(atts, start, limit);
		start = limit;
		c = stream.readChar();
	} 
}:if (!isNull) {

	java.lang.String $5 = ((java.lang.String) (stream.readObject()));
	result = new java.text.AttributedString($5);
	char $6 = stream.readChar();
	int $7 = 0;
	while ($6 != java.text.CharacterIterator.DONE) {
		int $8 = stream.readInt();
		java.util.Map $9 = ((java.util.Map) (stream.readObject()));
		result.addAttributes($9, $7, $8);
		$7 = $8;
		$6 = stream.readChar();
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (value != null) {
	setText(nf.format(value));
} else 
{
	setText("");
}:if (value != null) {
	setText(nf.format(value));
} else 
{
	setText("");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (version == null) {
	return new java.lang.String[0];
}:if (version == null) {
	return new java.lang.String[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (horizontal) {
	leftMargin = calculateLeftOutset(base.getWidth());
	rightMargin = calculateRightOutset(base.getWidth());
}:if (horizontal) {
	leftMargin = calculateLeftOutset(base.getWidth());
	rightMargin = calculateRightOutset(base.getWidth());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (a1.getAngleExtent() != a2.getAngleExtent()) {
	return false;
}:if (a1.getAngleExtent() != a2.getAngleExtent()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.UnitType.RELATIVE)) {
	return org.jfree.chart.util.UnitType.RELATIVE;
}:if (this.equals(org.jfree.chart.util.UnitType.RELATIVE)) {
	return org.jfree.chart.util.UnitType.RELATIVE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.RelativeDateFormat)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.RelativeDateFormat)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (paint != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writePaint(paint, stream);
} else 
{
	stream.writeInt(-1);
}:if (paint != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writePaint(paint, stream);
} else 
{
	stream.writeInt(-1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
	result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getMinY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
						result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
							result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
						}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
	result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
		result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
			result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
				result.setLocation(rectangle.getMinX(), rectangle.getMinY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
					result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
						result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
							result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
						}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
	result = org.jfree.chart.util.RectangleEdge.LEFT;
}:if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
	result = org.jfree.chart.util.RectangleEdge.LEFT;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.UnitType)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.UnitType)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.name.equals(t.name)) {
	return false;
}:if (!this.name.equals(t.name)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.Layer)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.Layer)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.top * height;
}:if (this.unitType == org.jfree.chart.util.UnitType.RELATIVE) {
	result = this.top * height;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (type.isAssignableFrom(c)) {
	return c.newInstance();
}:if (type.isAssignableFrom(c)) {
	return c.newInstance();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.HorizontalAlignment)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.HorizontalAlignment)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (loader != null) {
	try {
		loader.loadClass("java.util.RandomAccess");
		return true;
	}
	 catch (java.lang.ClassNotFoundException e) {
		return false;
	}
	 catch (java.lang.Exception e) {

	}
}:if (loader != null) {
	try {
		loader.loadClass("java.util.RandomAccess");
		return true;
	}
	 catch (java.lang.ClassNotFoundException e) {
		return false;
	}
	 catch (java.lang.Exception e) {

	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
				}}}}}:if (this.equals(org.jfree.chart.util.RectangleAnchor.RIGHT)) {
	result = org.jfree.chart.util.RectangleAnchor.RIGHT;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_LEFT)) {
		result = org.jfree.chart.util.RectangleAnchor.TOP_LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleAnchor.TOP_RIGHT)) {
			result = org.jfree.chart.util.RectangleAnchor.TOP_RIGHT;
		} else 
		{ 			if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT)) {
				result = org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT;
			} else 
			{ 				if (this.equals(org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT)) {
					result = org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT;
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.height != that.height) {
	return false;
}:if (this.height != that.height) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!(obj instanceof org.jfree.chart.util.TableOrder)) {
	return false;
}:if (!(obj instanceof org.jfree.chart.util.TableOrder)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this == o) {
	return true;
}:if (this == o) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (seg1 != seg2) {
	return false;
}:if (seg1 != seg2) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
	result = rectangle.getMinX();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
		result = rectangle.getMaxX();
	}}:if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
	result = rectangle.getMinX();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
		result = rectangle.getMaxX();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
	result.setLocation(rectangle.getCenterX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
		result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
					result.setLocation(rectangle.getMinX(), rectangle.getMinY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
						result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
							result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
								result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
							}}}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.TOP) {
	result.setLocation(rectangle.getCenterX(), rectangle.getMinY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM) {
		result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
					result.setLocation(rectangle.getMinX(), rectangle.getMinY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
						result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
					} else 
					{ 						if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
							result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
						} else 
						{ 							if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
								result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
							}}}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (object != null) {
	result = object.hashCode();
}:if (object != null) {
	result = object.hashCode();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (vertical) {
	topMargin = calculateTopOutset(base.getHeight());
	bottomMargin = calculateBottomOutset(base.getHeight());
}:if (vertical) {
	topMargin = calculateTopOutset(base.getHeight());
	bottomMargin = calculateBottomOutset(base.getHeight());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.GeneralPath.class)) {
	java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
	float[] args = new float[6];
	boolean hasNext = stream.readBoolean();
	while (!hasNext) {
		int type = stream.readInt();
		for (int i = 0; i < 6; i++) {
			args[i] = stream.readFloat();
		}
		switch (type) {
			case java.awt.geom.PathIterator.SEG_MOVETO :
				gp.moveTo(args[0], args[1]);
				break;
			case java.awt.geom.PathIterator.SEG_LINETO :
				gp.lineTo(args[0], args[1]);
				break;
			case java.awt.geom.PathIterator.SEG_CUBICTO :
				gp.curveTo(args[0], args[1], args[2], 
				args[3], args[4], args[5]);
				break;
			case java.awt.geom.PathIterator.SEG_QUADTO :
				gp.quadTo(args[0], args[1], args[2], args[3]);
				break;
			case java.awt.geom.PathIterator.SEG_CLOSE :
				gp.closePath();
				break;
			default :
				throw new java.lang.RuntimeException(
				"JFreeChart - No path exists");}

		gp.setWindingRule(stream.readInt());
		hasNext = stream.readBoolean();
	} 
	result = gp;
} else 
{
	result = ((java.awt.Shape) (stream.readObject()));
}:if (c.equals(java.awt.geom.GeneralPath.class)) {
	java.awt.geom.GeneralPath $102 = new java.awt.geom.GeneralPath();
	float[] $103 = new float[6];
	boolean $104 = stream.readBoolean();
	while (!$104) {
		int $105 = stream.readInt();
		for (int $106 = 0; $106 < 6; $106++) {
			$103[$106] = stream.readFloat();
		}
		switch ($105) {
			case java.awt.geom.PathIterator.SEG_MOVETO :
				$102.moveTo($103[0], $103[1]);
				break;
			case java.awt.geom.PathIterator.SEG_LINETO :
				$102.lineTo($103[0], $103[1]);
				break;
			case java.awt.geom.PathIterator.SEG_CUBICTO :
				$102.curveTo($103[0], $103[1], $103[2], 
				$103[3], $103[4], $103[5]);
				break;
			case java.awt.geom.PathIterator.SEG_QUADTO :
				$102.quadTo($103[0], $103[1], $103[2], $103[3]);
				break;
			case java.awt.geom.PathIterator.SEG_CLOSE :
				$102.closePath();
				break;
			default :
				throw new java.lang.RuntimeException(
				"JFreeChart - No path exists");}

		$102.setWindingRule(stream.readInt());
		$104 = stream.readBoolean();
	} 
	result = $102;
} else 
{
	result = ((java.awt.Shape) (stream.readObject()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getMinY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
					result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
						result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
					}}}}}}:if (anchor == org.jfree.chart.util.RectangleAnchor.LEFT) {
	result.setLocation(rectangle.getMinX(), rectangle.getCenterY());
} else 
{ 	if (anchor == org.jfree.chart.util.RectangleAnchor.RIGHT) {
		result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());
	} else 
	{ 		if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_LEFT) {
			result.setLocation(rectangle.getMinX(), rectangle.getMinY());
		} else 
		{ 			if (anchor == org.jfree.chart.util.RectangleAnchor.TOP_RIGHT) {
				result.setLocation(rectangle.getMaxX(), rectangle.getMinY());
			} else 
			{ 				if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT) {
					result.setLocation(rectangle.getMinX(), rectangle.getMaxY());
				} else 
				{ 					if (anchor == org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT) {
						result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());
					}}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (c.equals(java.awt.geom.Rectangle2D.class)) {
	double x = stream.readDouble();
	double y = stream.readDouble();
	double w = stream.readDouble();
	double h = stream.readDouble();
	result = new java.awt.geom.Rectangle2D.Double(x, y, w, h);
} else 
{ 	if (c.equals(java.awt.geom.Ellipse2D.class)) {
		double x = stream.readDouble();
		double y = stream.readDouble();
		double w = stream.readDouble();
		double h = stream.readDouble();
		result = new java.awt.geom.Ellipse2D.Double(x, y, w, h);
	} else 
	{ 		if (c.equals(java.awt.geom.Arc2D.class)) {
			double x = stream.readDouble();
			double y = stream.readDouble();
			double w = stream.readDouble();
			double h = stream.readDouble();
			double as = stream.readDouble();
			double ae = stream.readDouble();
			int at = stream.readInt();
			result = new java.awt.geom.Arc2D.Double(x, y, w, h, as, ae, at);
		} else 
		{ 			if (c.equals(java.awt.geom.GeneralPath.class)) {
				java.awt.geom.GeneralPath gp = new java.awt.geom.GeneralPath();
				float[] args = new float[6];
				boolean hasNext = stream.readBoolean();
				while (!hasNext) {
					int type = stream.readInt();
					for (int i = 0; i < 6; i++) {
						args[i] = stream.readFloat();
					}
					switch (type) {
						case java.awt.geom.PathIterator.SEG_MOVETO :
							gp.moveTo(args[0], args[1]);
							break;
						case java.awt.geom.PathIterator.SEG_LINETO :
							gp.lineTo(args[0], args[1]);
							break;
						case java.awt.geom.PathIterator.SEG_CUBICTO :
							gp.curveTo(args[0], args[1], args[2], 
							args[3], args[4], args[5]);
							break;
						case java.awt.geom.PathIterator.SEG_QUADTO :
							gp.quadTo(args[0], args[1], args[2], args[3]);
							break;
						case java.awt.geom.PathIterator.SEG_CLOSE :
							gp.closePath();
							break;
						default :
							throw new java.lang.RuntimeException(
							"JFreeChart - No path exists");}

					gp.setWindingRule(stream.readInt());
					hasNext = stream.readBoolean();
				} 
				result = gp;
			} else 
			{
				result = ((java.awt.Shape) (stream.readObject()));
			}}}}:if (c.equals(java.awt.geom.Rectangle2D.class)) {
	double $135 = stream.readDouble();
	double $136 = stream.readDouble();
	double $137 = stream.readDouble();
	double $138 = stream.readDouble();
	result = new java.awt.geom.Rectangle2D.Double($135, $136, $137, $138);
} else 
{ 	if (c.equals(java.awt.geom.Ellipse2D.class)) {
		double $139 = stream.readDouble();
		double $140 = stream.readDouble();
		double $141 = stream.readDouble();
		double $142 = stream.readDouble();
		result = new java.awt.geom.Ellipse2D.Double($139, $140, $141, $142);
	} else 
	{ 		if (c.equals(java.awt.geom.Arc2D.class)) {
			double $143 = stream.readDouble();
			double $144 = stream.readDouble();
			double $145 = stream.readDouble();
			double $146 = stream.readDouble();
			double $147 = stream.readDouble();
			double $148 = stream.readDouble();
			int $149 = stream.readInt();
			result = new java.awt.geom.Arc2D.Double($143, $144, $145, $146, $147, $148, $149);
		} else 
		{ 			if (c.equals(java.awt.geom.GeneralPath.class)) {
				java.awt.geom.GeneralPath $150 = new java.awt.geom.GeneralPath();
				float[] $151 = new float[6];
				boolean $152 = stream.readBoolean();
				while (!$152) {
					int $153 = stream.readInt();
					for (int $154 = 0; $154 < 6; $154++) {
						$151[$154] = stream.readFloat();
					}
					switch ($153) {
						case java.awt.geom.PathIterator.SEG_MOVETO :
							$150.moveTo($151[0], $151[1]);
							break;
						case java.awt.geom.PathIterator.SEG_LINETO :
							$150.lineTo($151[0], $151[1]);
							break;
						case java.awt.geom.PathIterator.SEG_CUBICTO :
							$150.curveTo($151[0], $151[1], $151[2], 
							$151[3], $151[4], $151[5]);
							break;
						case java.awt.geom.PathIterator.SEG_QUADTO :
							$150.quadTo($151[0], $151[1], $151[2], $151[3]);
							break;
						case java.awt.geom.PathIterator.SEG_CLOSE :
							$150.closePath();
							break;
						default :
							throw new java.lang.RuntimeException(
							"JFreeChart - No path exists");}

					$150.setWindingRule(stream.readInt());
					$152 = stream.readBoolean();
				} 
				result = $150;
			} else 
			{
				result = ((java.awt.Shape) (stream.readObject()));
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.hourSuffix.equals(that.hourSuffix)) {
	return false;
}:if (!this.hourSuffix.equals(that.hourSuffix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape == null) {
	throw new java.lang.IllegalArgumentException("Null 'shape' argument.");
}:if (shape == null) {
	throw new java.lang.IllegalArgumentException("Null 'shape' argument.");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (url == null) {
	return null;
}:if (url == null) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
	return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
}:if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
	return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (o1 == o2) {
	return true;
}:if (o1 == o2) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (shape != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writeShape(shape, stream);
} else 
{
	stream.writeInt(-1);
}:if (shape != null) {
	stream.writeInt(i);
	org.jfree.chart.util.SerialUtilities.writeShape(shape, stream);
} else 
{
	stream.writeInt(-1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
	result = rectangle.getMaxY();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
		result = rectangle.getMinX();
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
			result = rectangle.getMaxX();
		}}}:if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {
	result = rectangle.getMaxY();
} else 
{ 	if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {
		result = rectangle.getMinX();
	} else 
	{ 		if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {
			result = rectangle.getMaxX();
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((p1 instanceof java.awt.GradientPaint) && (p2 instanceof java.awt.GradientPaint)) {
	java.awt.GradientPaint gp1 = ((java.awt.GradientPaint) (p1));
	java.awt.GradientPaint gp2 = ((java.awt.GradientPaint) (p2));
	result = ((((gp1.getColor1().equals(gp2.getColor1()) && 
	gp1.getColor2().equals(gp2.getColor2())) && 
	gp1.getPoint1().equals(gp2.getPoint1())) && 
	gp1.getPoint2().equals(gp2.getPoint2())) && 
	(gp1.isCyclic() == gp2.isCyclic())) && 
	(gp1.getTransparency() == gp1.getTransparency());
} else 
{
	result = p1.equals(p2);
}:if ((p1 instanceof java.awt.GradientPaint) && (p2 instanceof java.awt.GradientPaint)) {
	java.awt.GradientPaint $2 = ((java.awt.GradientPaint) (p1));
	java.awt.GradientPaint $3 = ((java.awt.GradientPaint) (p2));
	result = (((($2.getColor1().equals($3.getColor1()) && 
	$2.getColor2().equals($3.getColor2())) && 
	$2.getPoint1().equals($3.getPoint1())) && 
	$2.getPoint2().equals($3.getPoint2())) && 
	($2.isCyclic() == $3.isCyclic())) && 
	($2.getTransparency() == $2.getTransparency());
} else 
{
	result = p1.equals(p2);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.LengthAdjustmentType.EXPAND)) {
	return org.jfree.chart.util.LengthAdjustmentType.EXPAND;
} else 
{ 	if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
		return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
	}}:if (this.equals(org.jfree.chart.util.LengthAdjustmentType.EXPAND)) {
	return org.jfree.chart.util.LengthAdjustmentType.EXPAND;
} else 
{ 	if (this.equals(org.jfree.chart.util.LengthAdjustmentType.CONTRACT)) {
		return org.jfree.chart.util.LengthAdjustmentType.CONTRACT;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.VERTICAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
			result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
		}}}:if (this.equals(org.jfree.chart.util.GradientPaintTransformType.VERTICAL)) {
	result = org.jfree.chart.util.GradientPaintTransformType.VERTICAL;
} else 
{ 	if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL)) {
		result = org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL)) {
			result = org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((align & org.jfree.chart.util.Align.TOP) == org.jfree.chart.util.Align.TOP) {
	y = frame.getMinY();
}:if ((align & org.jfree.chart.util.Align.TOP) == org.jfree.chart.util.Align.TOP) {
	y = frame.getMinY();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (s2 == null) {
	return false;
}:if (s2 == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.equals(org.jfree.chart.util.RectangleEdge.BOTTOM)) {
	result = org.jfree.chart.util.RectangleEdge.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
		result = org.jfree.chart.util.RectangleEdge.LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
			result = org.jfree.chart.util.RectangleEdge.RIGHT;
		}}}:if (this.equals(org.jfree.chart.util.RectangleEdge.BOTTOM)) {
	result = org.jfree.chart.util.RectangleEdge.BOTTOM;
} else 
{ 	if (this.equals(org.jfree.chart.util.RectangleEdge.LEFT)) {
		result = org.jfree.chart.util.RectangleEdge.LEFT;
	} else 
	{ 		if (this.equals(org.jfree.chart.util.RectangleEdge.RIGHT)) {
			result = org.jfree.chart.util.RectangleEdge.RIGHT;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (this.base != that.base) {
	return false;
}:if (this.base != that.base) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (!this.minuteSuffix.equals(that.minuteSuffix)) {
	return false;
}:if (!this.minuteSuffix.equals(that.minuteSuffix)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if ((s1 instanceof java.awt.geom.Line2D) && (s2 instanceof java.awt.geom.Line2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Line2D) (s1)), ((java.awt.geom.Line2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.Ellipse2D) && (s2 instanceof java.awt.geom.Ellipse2D)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Ellipse2D) (s1)), ((java.awt.geom.Ellipse2D) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
		} else 
		{ 			if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
				return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
			} else 
			{ 				if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
					return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
				} else 
				{

					return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
				}}}}}:if ((s1 instanceof java.awt.geom.Line2D) && (s2 instanceof java.awt.geom.Line2D)) {
	return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Line2D) (s1)), ((java.awt.geom.Line2D) (s2)));
} else 
{ 	if ((s1 instanceof java.awt.geom.Ellipse2D) && (s2 instanceof java.awt.geom.Ellipse2D)) {
		return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Ellipse2D) (s1)), ((java.awt.geom.Ellipse2D) (s2)));
	} else 
	{ 		if ((s1 instanceof java.awt.geom.Arc2D) && (s2 instanceof java.awt.geom.Arc2D)) {
			return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));
		} else 
		{ 			if ((s1 instanceof java.awt.Polygon) && (s2 instanceof java.awt.Polygon)) {
				return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));
			} else 
			{ 				if ((s1 instanceof java.awt.geom.GeneralPath) && (s2 instanceof java.awt.geom.GeneralPath)) {
					return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));
				} else 
				{

					return org.jfree.chart.util.ObjectUtilities.equal(s1, s2);
				}}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - if (version == null) {
	return false;
}:if (version == null) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ShapeUtilities#equal
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 3
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for d2(class spoon.support.reflect.code.CtLocalVariableImpl) (/script/jGenProg_Defects4J_Chart_11/source/org/jfree/chart/util/ShapeUtilities.java:277)
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for d2(class spoon.support.reflect.code.CtLocalVariableImpl) (/script/jGenProg_Defects4J_Chart_11/source/org/jfree/chart/util/ShapeUtilities.java:277)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:363)
	at spoon.reflect.visitor.filter.SiblingsFunction.apply(SiblingsFunction.java:58)
	at spoon.reflect.visitor.filter.SiblingsFunction.apply(SiblingsFunction.java:23)
	at spoon.reflect.visitor.chain.CtQueryImpl$LazyFunctionWrapper._accept(CtQueryImpl.java:492)
	at spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep.accept(CtQueryImpl.java:307)
	at spoon.reflect.visitor.chain.CtQueryImpl.forEach(CtQueryImpl.java:93)
	at spoon.reflect.visitor.filter.LocalVariableScopeFunction.apply(LocalVariableScopeFunction.java:55)
	at spoon.reflect.visitor.filter.LocalVariableScopeFunction.apply(LocalVariableScopeFunction.java:32)
	at spoon.reflect.visitor.chain.CtQueryImpl$LazyFunctionWrapper._accept(CtQueryImpl.java:492)
	at spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep.accept(CtQueryImpl.java:307)
	at spoon.reflect.visitor.chain.CtQueryImpl.first(CtQueryImpl.java:136)
	at spoon.reflect.visitor.chain.CtQueryImpl.first(CtQueryImpl.java:119)
	at spoon.refactoring.CtRenameLocalVariableRefactoring.detectNameConflicts(CtRenameLocalVariableRefactoring.java:235)
	at spoon.refactoring.AbstractRenameRefactoring.detectIssues(AbstractRenameRefactoring.java:45)
	at spoon.refactoring.AbstractRenameRefactoring.refactor(AbstractRenameRefactoring.java:37)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:166)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:60)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 6.314
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 3
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 120.905


Node: 878af8f78bd7



Date: Tue Nov 12 01:56:54 EST 2019

cd /script/jGenProg_Defects4J_Chart_11;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Chart-11 \
	-failing org.jfree.chart.util.junit.ShapeUtilitiesTests \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 4 \
	-srcjavafolder source/ \
	-srctestfolder tests/ \
	-binjavafolder build/ \
	-bintestfolder build-tests/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Chart_11/build/:/script/jGenProg_Defects4J_Chart_11/build-tests/:/script/jGenProg_Defects4J_Chart_11/lib/itext-2.0.6.jar:/script/jGenProg_Defects4J_Chart_11/lib/servlet.jar:/script/jGenProg_Defects4J_Chart_11/lib/junit.jar:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

