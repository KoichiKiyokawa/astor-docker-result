Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO ] fr.inria.astor.core.setup.ProjectConfiguration.getVersionJDK(ProjectConfiguration.java:282) - Version of the JVM used: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:383) - Java version of the JDK used to run tests: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:384) - The compliance of the JVM is:  7
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:662) - command line arguments: [-mode  jgenprog  -location  .  -id  Math-15  -failing  org.apache.commons.math3.util.FastMathTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Math_15/target/classes/:/script/jGenProg_Defects4J_Math_15/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.main.evolution.AstorMain.execute(AstorMain.java:228) - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:964) - Source folders: [/script/jGenProg_Defects4J_Math_15/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:983) - Source Test folders: [/script/jGenProg_Defects4J_Math_15/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:105) - mode is Leven
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_15/./output_astor/AstorMain-Math-15//bin//default from 696 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_15/./output_astor/AstorMain-Math-15//bin//default, /script/jGenProg_Defects4J_Math_15/target/classes/, /script/jGenProg_Defects4J_Math_15/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition3
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition4
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaMinusLogGammaSumPrecondition1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaMinusLogGammaSumPrecondition2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaMinusLogGammaSum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.BetaTest#testBcorr
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.BetaTest#testBcorrPrecondition1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.BetaTest#testBcorrPrecondition2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4276, fails: 55, GZoltar suspicious 29409, with positive susp 2644
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4276
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 880 with susp > 0.1, we consider: 880
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:955) - Setting up the max to 5208020 milliseconds (5208 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:801) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_15/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:70) - building model: /script/jGenProg_Defects4J_Math_15/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:84) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_15/target/classes/, /script/jGenProg_Defects4J_Math_15/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:836) - Number of CtTypes created: 628
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 880
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.1502349257508403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.1502349257508403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 880,  273
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 273
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 273, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:181) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:183) - Killed the Process that runs JUnit test cases 560
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:745) - Initial run of test suite fails
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.7976931348623157E308
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_15/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 5208020
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.util.FastMathTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-15
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_15/target/classes/:/script/jGenProg_Defects4J_Math_15/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: remA = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (result * i) / j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (result / (j / d)) * (i / d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: useLong = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = -a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: al = -al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = -b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bl = -bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bl = al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: al = blbu % al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: blbu = bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = ((int) (al))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = ((int) (blbu % al))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = java.lang.Math.min(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = java.lang.Math.abs(delta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: u = -u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: v = -v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: u = -t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: v = t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = (v - u) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(b, a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = a * b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = a - b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: e = e >> 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result.multiply(k2p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: k2p = k2p.multiply(k2p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: e = e.shiftRight(1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2 = new long[maxIndex][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[0] = new long[]{ 1L }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i] = new long[i + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i][0] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i][1] = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i][i] = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sign = -sign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(b, a, pattern)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(val)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(unscaledVal, scale)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(unscaledVal, scale, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(val, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(in)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(in, offset, len)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(in, offset, len, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(in, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.roundingMode = roundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.scale = scale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = source.charAt(index++)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = java.lang.Double.valueOf(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: number = org.apache.commons.math3.util.CompositeFormat.parseNumber(source, special[i], pos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hPrev = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dN = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: cN = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dN = 1 / dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hN = hPrev * deltaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dPrev = dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: cPrev = cN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hPrev = hN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ZERO = new org.apache.commons.math3.util.Decimal64(0.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ONE = new org.apache.commons.math3.util.Decimal64(1.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: NEGATIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NEGATIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: POSITIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: NAN = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NaN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.value = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xl = xl & org.apache.commons.math3.util.FastMath.MASK_30BITS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x = -x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = recip * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + recipb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: negate = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: recipa = -recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: recipb = -recipb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = denom * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = -result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: na = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = da + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: da = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = da * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ratio * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ratioa + ratiob
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: negative = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.FastMath.sqrt((a * a) + 1) + a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_17) * org.apache.commons.math3.util.FastMath.F_15_16))) * org.apache.commons.math3.util.FastMath.F_13_14))) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_13) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_9) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_5) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = 0.5 * org.apache.commons.math3.util.FastMath.log((1 + a) / (1 - a))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_15 + (a2 * org.apache.commons.math3.util.FastMath.F_1_17))))))))))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * org.apache.commons.math3.util.FastMath.F_1_13))))))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * org.apache.commons.math3.util.FastMath.F_1_9))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * org.apache.commons.math3.util.FastMath.F_1_5))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intVal = ((int) (-x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intVal = -intVal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intVal = ((int) (x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = java.lang.Double.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * epsilon) + 0.1666666505023083
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * epsilon) + 0.5000000000042687
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * epsilon) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * epsilon) + (-3.940510424527919E-20)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ((tempC * z) + tempB) + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tempB = -((temp - tempA) - tempB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tempA = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = tempA * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: baseA = (tempA + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: baseB = tempB + (tempA - baseA)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsilon = x - (intFrac / 1024.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = (zb * epsilon) + 0.041666663879186654
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = (zb * epsilon) + 0.16666666666745392
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = (zb * epsilon) + 0.49999999999999994
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = zb * epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = -((temp - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = za * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = (za + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + (za * baseB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + (zb * baseA)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + (zb * baseB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + baseA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + baseB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = (denom + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = denom - za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = -ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = -rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrecOut[0] = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrecOut[1] = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aa = ya * xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ab = ((ya * xb) + (yb * xa)) + (yb * xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = aa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = (aa + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (aa - ya) + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aa = ya + lnCoef_i[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ab = yb + lnCoef_i[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aa = (numer - (xa * denom)) - (xb * denom)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = aa + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnzb = -((lnza - aa) - ab)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = -0.16624882440418567
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + 0.19999954120254515
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + (-0.2499999997677497)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + 0.3333333333332802
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + (-0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = lnza * epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = b + d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + lnza
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - lnza)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + (org.apache.commons.math3.util.FastMath.LN_2_B * exp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - (org.apache.commons.math3.util.FastMath.LN_2_B * exp))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + lnm[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - lnm[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + lnzb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - lnzb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[1] = b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = (y + tmp1) - tmp1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = y - ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = (((tmp1 + tmp2) - tmp1) * org.apache.commons.math3.util.FastMath.HEX_40000000) * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lna = tmp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lna = aa + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnb = -((lna - aa) - ab)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * lnb) + (1.0 / 24.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * lnb) + (1.0 / 6.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * lnb) + 0.5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * lnb) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = z * lnb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: e = -e
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = 1.0 / d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: resultHigh = tmpHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: resultLow = (resultLow * d2p) + tmpLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d2pHigh = cTmpH - (cTmpH - tmpHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d2p = d2pHigh + d2pLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + (-1.9841269659586505E-4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + 0.008333333333329196
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + (-0.16666666666666666)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + (-0.0013888888689039883)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + 0.041666666666621166
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + (-0.49999999999999994)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sinEpsA = temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = costA * sinEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - t)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = (b + (sintA * cosEpsB)) + (costA * sinEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
((sintA + sintB) * (sinEpsA + sinEpsB))) * xb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = b = c = d = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = costA * cosEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = (-sintA) * sinEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: cosa = sina
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sina = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = cosb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: cosb = sinb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sinb = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = est * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = cosa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xbadj = -xbadj
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1] << shift
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpiA = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpiB = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bita = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitb = (bc & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodB = prodB + (bc << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodA = prodA + (bc >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitsum = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = shpiB >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = shpiB & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ac = a * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bc = b * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ad = a * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ac = ac + ((bc + ad) >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitb = (ac & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = shpi0 >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = shpi0 & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bd = b * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = prodA >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = prodA & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bita = (bd & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitb = (ad & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitsum = (prod2B & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bita = (prod2B & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prod2B = prod2B + (bc << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prod2A = prod2A + (bc >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = prodB >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = prodB & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = intPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = sumA * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[2] = sumB * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = -xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: quadrant = ((int) (reduceResults[0])) & 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = reduceResults[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = reduceResults[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: quadrant = cw.getK() & 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = cw.getRemA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = cw.getRemB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = -((xa - a) - b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = -org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = -xb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsB = -((temp - epsA) - epsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsA = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = xa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = epsA * denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = epsB * denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp2 = (xb * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = za + temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = epsA / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsA = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsB = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = 0.07490822288864472
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + (-0.09088450866185192)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + 0.11111095942313305
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + (-0.1428571423679182)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + 0.19999999999923582
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + (-0.33333333333333287)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) * epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = -((temp - ya) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = za + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = pia - result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = -((za - pia) + result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = za + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: resultb = -((result - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb = -((temp - ra) - rb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ra = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = -ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = -yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y = org.apache.commons.math3.util.FastMath.sqrt(za)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = y * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = (y + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = r * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = -((y - ya) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: subnormal = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: inbits = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est = (est * mant) + 0.0875862700108075
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est = (est * mant) + (-0.3058015757857271)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est = (est * mant) + 0.7249995199969751
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est = (est * mant) + 0.5039018405998233
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = ((za * yb) + (ya * zb)) + (zb * yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = za * ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa | (1L << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa >>> (1 - scaledExponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa << 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa & 0xfffffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa | (1 << 23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa & 0x7fffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y = ((long) (x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y = org.apache.commons.math3.util.FastMath.floor(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: remA = xa + a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: remB = -((remA - xa) - a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = (-k) * 7.549789948768648E-8
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = (-k) * 6.123233995736766E-17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.finalK = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.finalRemA = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.finalRemB = remB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SINE_TABLE_A[i] = result[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SINE_TABLE_B[i] = result[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: COSINE_TABLE_A[i] = result[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: COSINE_TABLE_B[i] = result[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[0] = SINE_TABLE_A[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[1] = SINE_TABLE_B[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[0] = COSINE_TABLE_A[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[1] = COSINE_TABLE_B[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SINE_TABLE_A[i] = result[0] * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SINE_TABLE_B[i] = result[1] * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temps[0] = -temps[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temps[1] = -temps[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: as[0] = SINE_TABLE_A[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: as[1] = SINE_TABLE_B[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bs[0] = COSINE_TABLE_A[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bs[1] = COSINE_TABLE_B[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: as[0] = COSINE_TABLE_A[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: as[1] = COSINE_TABLE_B[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[0] = SINE_TABLE_A[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[1] = SINE_TABLE_B[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: TANGENT_TABLE_A[i] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: TANGENT_TABLE_B[i] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[0] = ys[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[0] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[1] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: facts[0] = -facts[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: facts[1] = -facts[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = ys[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = ys[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: split[0] = (d + a) - a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: split[1] = d - split[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: split[0] = ((d + a) - d) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[0] = (c + z) - z
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[1] = (c - a[0]) + d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[0] = ((c + z) - c) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ans[0] = a[0] * b[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ans[1] = ((a[0] * b[1]) + (a[1] * b[0])) + (a[1] * b[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ans[0] = a[0] + b[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ans[1] = a[1] + b[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: in[0] = in[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: in[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = a / in[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = ((b * in[0]) - (a * in[1])) / ((in[0] * in[0]) + (in[0] * in[1]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: err = err * (result[0] + result[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = zs[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = result[1] - ((tmp - result[0]) - zs[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = result[0] + zs[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = result[1] - ((tmp - result[0]) - zs[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = result[0] + zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[0] = 2.718281828459045
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[1] = 1.4456468917292502E-16
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[0] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[1] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x[0] = y[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x[1] = y[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y[0] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y[1] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y[0] = a[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y[1] = a[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: maximalCount = max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: maxCountCallback = cb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: count = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.iterations = iterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.listeners = new java.util.concurrent.CopyOnWriteArrayList<org.apache.commons.math3.util.IterationListener>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations, callBack)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: max = org.apache.commons.math3.util.FastMath.max(max, org.apache.commons.math3.util.FastMath.abs(p1[i] - p2[i]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: previous = val[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: previous = val[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: s1 = 1 + ((s1 * r) * r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x1max = xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: s3 = 1 + ((s3 * r) * r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x3max = xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: norm = x3max * java.lang.Math.sqrt(s3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yValues[j] = y[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x[i] = e.getKey()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yList[j][i] = yValues[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodHigh[i] = ai * bi
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodHighNext = prodHigh[i + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sPrime = sHighCur - prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sHighPrev = sHighCur
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (a1 * b1) + (a2 * b2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ((a1 * b1) + (a2 * b2)) + (a3 * b3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out[i] = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out[i] = (values[i] * normalizedSum) / sum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: counter[last] = -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: counter[i] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dimension = size.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.size = org.apache.commons.math3.util.MathArrays.copyOf(size)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: uniCounterOffset = new int[dimension]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: last = dimension - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: uniCounterOffset[i] = count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: uniCounterOffset[last] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: totalSize = tS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: indices[i] = idx
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: indices[last] = index - count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys = new int[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = new double[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states = new byte[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.missingEntries = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mask = capacity - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys = new int[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = new double[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states = new byte[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: missingEntries = source.missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: size = source.size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mask = source.mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: count = source.count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(perturb, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: index = j & mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys[index] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.REMOVED
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values[index] = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: index = org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: previous = values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newMapping = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys[index] = key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values[index] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newKeys[index] = key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newValues[index] = oldValues[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newStates[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mask = newMask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys = newKeys
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = newValues
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states = newStates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: referenceCount = count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: next = -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: current = next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: next = -2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.field = field
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = buildArray(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: field = source.field
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = buildArray(length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(perturb, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.REMOVED
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: index = org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newStates[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: key = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: value = v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ((37 * result) + h) ^ (h >>> 16)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EPSILON = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 53L) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SAFE_MIN = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 1022L) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - xInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - yInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xInt = org.apache.commons.math3.util.Precision.SGN_MASK - xInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yInt = org.apache.commons.math3.util.Precision.SGN_MASK - yInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.expansionFactor = expansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.contractionCriterion = contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.expansionMode = expansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray = new double[initialCapacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: numElements = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: startIndex = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray[startIndex + (numElements++)] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray = tempArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray[startIndex + (numElements - 1)] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray[substIndex] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newSize = ((int) (org.apache.commons.math3.util.FastMath.ceil(internalArray.length * expansionFactor)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newSize = ((int) (internalArray.length + org.apache.commons.math3.util.FastMath.round(expansionFactor)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.contractionCriterion = contractionCriteria
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: numElements = index + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray[startIndex + index] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: numElements = i
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.contractionCriterion = source.contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.expansionFactor = source.expansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.expansionMode = source.expansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.internalArray = new double[source.internalArray.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.numElements = source.numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.startIndex = source.startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.contractionCriterion == contractionCriterion)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.expansionFactor == expansionFactor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.expansionMode == expansionMode)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.numElements == numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.startIndex == startIndex)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[0] = java.lang.Double.valueOf(expansionFactor).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[1] = java.lang.Double.valueOf(contractionCriterion).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[2] = expansionMode.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[3] = java.util.Arrays.hashCode(internalArray)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[4] = numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[5] = startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: map = new java.util.HashMap<java.lang.Class<?>, org.apache.commons.math3.util.NumberTransformer>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: defaultTransformer = new org.apache.commons.math3.util.DefaultTransformer()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: value = defaultTransformer.transform(o)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: value = trans.transform(o)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hash = (hash * 31) + t.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:73) - modif code: remA = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: remA = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: remA = xa + a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ret = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ret = a * b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ret = a - b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = da + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = za + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xa = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = za + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + baseA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + baseB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = a + t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnza = aa + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + recipb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lna = aa + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = za + temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = b + d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ac = a * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ad = a * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: y = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ret = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: e = e >> 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ret = c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = ratioa + ratiob
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: tempA = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + (za * baseB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + (zb * baseA)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya + (zb * baseB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xb = ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = a + lnzb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: tmp = cosb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bc = b * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bd = b * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ans[0] = a[0] + b[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ans[1] = a[1] + b[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[0] = a / in[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: prodHigh[i] = ai * bi
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: recipb = -recipb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: rb = -((temp - ra) - rb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = (aa - ya) + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = result * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = (za + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: remB = -((remA - xa) - a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: previous = val[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ans[0] = a[0] * b[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: numElements = index + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = -b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bl = al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dN = 1 / dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: zb = -((temp - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = -rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xa = aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: aa = ya * xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = a + lnza
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = y - ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: z = z * lnb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: e = -e
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: tmp = cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: cosb = sinb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: prodA = prodA + (bc >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xb = -xb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: epsA = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: epsA = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: epsB = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = -((temp - ya) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ra = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = -yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: za = za * ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a[0] = (c + z) - z
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a[1] = (c - a[0]) + d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: y[0] = a[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: y[1] = a[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = (a1 * b1) + (a2 * b2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: next = -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: next = -2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: key = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[1] = sumA * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[2] = sumB * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: mask = capacity - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: recipa = -recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = -result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: index = j & mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: prod2A = prod2A + (bc >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hPrev = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: prodB = prodB + (bc << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ys[0] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ys[1] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xs[0] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xs[1] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xb = -((xa - a) - b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrec[0] = tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrecOut[1] = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[0] = ys[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[1] = ys[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[0] = zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[1] = zs[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: resultb = -((result - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnza = lnza * epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = a + lnm[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = -((c - a) - lnzb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: prod2B = prod2B + (bc << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = -((y - ya) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: previous = val[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: keys = newKeys
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: current = next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = (result * i) / j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = -((c - a) - t)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: split[0] = (d + a) - a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnzb = -((lnza - aa) - ab)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: t = (v - u) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrec[0] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrec[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: sinEpsA = temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[0] = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: prodHighNext = prodHigh[i + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: z = (z * lnb) + 0.5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: z = (z * lnb) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a = b = c = d = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[0] = intPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ys[0] = ys[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: tmp = result[0] + zs[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: tmp = result[0] + zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a = -a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: al = -al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bl = -bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: blbu = bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: u = -u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: v = -v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: u = -t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: v = t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: sign = -sign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dN = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: cN = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dPrev = dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: cPrev = cN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hPrev = hN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: x = -x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: na = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: da = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: za = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = -ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a = c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lna = tmp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnb = -((lna - aa) - ab)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = 1.0 / d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: resultHigh = tmpHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: p = (p * x2) * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: cosa = sina
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: sina = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: sinb = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xa = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xa = -xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: quadrant = cw.getK() & 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xa = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = -ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: za = temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: mantissa = mantissa << 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temps[0] = -temps[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temps[1] = -temps[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: x[0] = y[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: x[1] = y[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: x1max = xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: x3max = xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: last = dimension - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: previous = values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: baseA = (tempA + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnza = (lnza * epsilon) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = (aa + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: aa = ya + lnCoef_i[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = -((c - a) - lnza)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.finalRemA = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrecOut[0] = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = epsA * denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: za = pia - result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: negate = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrec[1] = b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: in[0] = in[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d2p = d2pHigh + d2pLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = ((a1 * b1) + (a2 * b2)) + (a3 * b3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: keys = new int[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: referenceCount = count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: stirlingS2[i] = new long[i + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: baseB = tempB + (tempA - baseA)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: zb = -((za - pia) + result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: newMapping = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: values = newValues
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.field = field
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrec[0] = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnza = (lnza * epsilon) + (-0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: sPrime = sHighCur - prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: z = (z * epsilon) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = -((c - a) - lnm[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: split[1] = d - split[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: useLong = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: al = blbu % al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xbadj = -xbadj
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ac = ac + ((bc + ad) >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = epsA / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: mask = newMask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: tempB = -((temp - tempA) - tempB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hash = (hash * 31) + t.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = ((tempC * z) + tempB) + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: resultLow = (resultLow * d2p) + tmpLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: keys = new int[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: indices[last] = index - count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: negative = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: intVal = ((int) (x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: zb = denom - za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bitb = (ad & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: epsB = -((temp - epsA) - epsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: mantissa = mantissa & 0x7fffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.finalK = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: facts[0] = -facts[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: facts[1] = -facts[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: err = err * (result[0] + result[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: sHighPrev = sHighCur
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: states = new byte[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: keys[index] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: field = source.field
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: numElements = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: internalArray = tempArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: numElements = i
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = ((37 * result) + h) ^ (h >>> 16)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: mantissa = mantissa | (1 << 23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: za = (denom + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: TANGENT_TABLE_A[i] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: TANGENT_TABLE_B[i] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: intVal = ((int) (-x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ab = yb + lnCoef_i[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.finalRemB = remB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: maxCountCallback = cb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: values[index] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = (result / (j / d)) * (i / d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: stirlingS2[0] = new long[]{ 1L }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: intVal = -intVal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: epsilon = x - (intFrac / 1024.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a = prodA >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: subnormal = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: mantissa = mantissa | (1L << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: indices[i] = idx
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: z = (z * lnb) + (1.0 / 6.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xs[0] = SINE_TABLE_A[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xs[1] = SINE_TABLE_B[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: uniCounterOffset[i] = count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: states = new byte[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: values = new double[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = (y + tmp1) - tmp1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = (y + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: SINE_TABLE_A[i] = result[0] * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: SINE_TABLE_B[i] = result[1] * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: as[0] = SINE_TABLE_A[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: as[1] = SINE_TABLE_B[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: est = (est * mant) + 0.0875862700108075
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: est = (est * mant) + 0.7249995199969751
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: est = (est * mant) + 0.5039018405998233
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: z = (z * lnb) + (1.0 / 24.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.iterations = iterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: zb = zb * epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = epsB * denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yValues[j] = y[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: x[i] = e.getKey()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: keys[index] = key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ab = ((ya * xb) + (yb * xa)) + (yb * xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: zb = ((za * yb) + (ya * zb)) + (zb * yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = prodA & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: s1 = 1 + ((s1 * r) * r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: s3 = 1 + ((s3 * r) * r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dimension = size.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = result.multiply(k2p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ys[0] = COSINE_TABLE_A[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ys[1] = COSINE_TABLE_B[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: out[i] = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: values = new double[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bs[0] = COSINE_TABLE_A[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bs[1] = COSINE_TABLE_B[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.scale = scale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: aa = (numer - (xa * denom)) - (xb * denom)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bitb = (bc & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = (yb * epsA2) * epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: est = (est * mant) + (-0.3058015757857271)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: in[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: maximalCount = max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: count = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yList[j][i] = yValues[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: counter[last] = -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: size = source.size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: mask = source.mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: states = newStates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: value = v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hashData[5] = startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: internalArray = new double[initialCapacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ret = java.lang.Double.valueOf(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: newValues[index] = oldValues[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnza = (lnza * epsilon) + 0.3333333333332802
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hN = hPrev * deltaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: t = costA * sinEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: t = costA * cosEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bitb = (ac & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: mantissa = mantissa & 0xfffffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: norm = x3max * java.lang.Math.sqrt(s3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = result && (other.startIndex == startIndex)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnza = (lnza * epsilon) + 0.19999954120254515
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = source.charAt(index++)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrec[0] = a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: uniCounterOffset[last] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: value = trans.transform(o)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrec[0] = java.lang.Double.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: stirlingS2 = new long[maxIndex][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: internalArray[substIndex] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: stirlingS2[i][0] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: stirlingS2[i][1] = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: stirlingS2[i][i] = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: count = source.count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: newKeys[index] = key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnza = (lnza * epsilon) + (-0.2499999997677497)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: SINE_TABLE_A[i] = result[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: SINE_TABLE_B[i] = result[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: values = buildArray(length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.expansionMode = expansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: quadrant = ((int) (reduceResults[0])) & 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: internalArray[startIndex + index] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.value = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d2pHigh = cTmpH - (cTmpH - tmpHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: p = (p * x2) + 0.008333333333329196
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: p = (p * x2) + 0.041666666666621166
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ans[1] = ((a[0] * b[1]) + (a[1] * b[0])) + (a[1] * b[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: out[i] = (values[i] * normalizedSum) / sum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: counter[i] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: totalSize = tS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: startIndex = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dest.startIndex = source.startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = result && (other.expansionMode == expansionMode)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: COSINE_TABLE_A[i] = result[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: COSINE_TABLE_B[i] = result[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: values = buildArray(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[1] = result[1] - ((tmp - result[0]) - zs[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[1] = result[1] - ((tmp - result[0]) - zs[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: t = (-sintA) * sinEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: mantissa = mantissa >>> (1 - scaledExponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: p = (p * x2) + (-0.16666666666666666)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: p = (p * x2) + (-0.49999999999999994)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: uniCounterOffset = new int[dimension]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dest.numElements = source.numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: values[index] = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: internalArray[startIndex + (numElements - 1)] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = result && (other.numElements == numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: z = (z * epsilon) + 0.1666666505023083
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: z = (z * epsilon) + 0.5000000000042687
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bita = (bd & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.expansionFactor = expansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = result && (other.expansionFactor == expansionFactor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a = ((int) (blbu % al))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = prodB & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xs[0] = SINE_TABLE_A[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xs[1] = SINE_TABLE_B[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: p = (p * x2) + (-1.9841269659586505E-4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: p = (p * x2) + (-0.0013888888689039883)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = (yb * epsA2) + 0.11111095942313305
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = (yb * epsA2) + 0.19999999999923582
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = (b + (sintA * cosEpsB)) + (costA * sinEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.contractionCriterion = contractionCriteria
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = da * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = za * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = xa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ya * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.roundingMode = roundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = shpiB >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = shpi0 >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a = prodB >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.contractionCriterion = contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = cosa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: zb = (zb * epsilon) + 0.16666666666745392
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: zb = (zb * epsilon) + 0.49999999999999994
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bita = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = (yb * epsA2) + (-0.1428571423679182)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dest.expansionMode = source.expansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = ratio * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: as[0] = COSINE_TABLE_A[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: as[1] = COSINE_TABLE_B[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xs[0] = 2.718281828459045
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hashData[4] = numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = -org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: zb = (zb * epsilon) + 0.041666663879186654
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bita = (prod2B & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = (yb * epsA2) + (-0.09088450866185192)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = (yb * epsA2) + (-0.33333333333333287)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: internalArray[startIndex + (numElements++)] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result[1] = ((b * in[0]) - (a * in[1])) / ((in[0] * in[0]) + (in[0] * in[1]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dest.internalArray = new double[source.internalArray.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bitsum = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: z = (z * epsilon) + (-3.940510424527919E-20)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: bitsum = (prod2B & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = y * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = r * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = result && (other.contractionCriterion == contractionCriterion)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = new java.math.BigDecimal(in, offset, len)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = new java.math.BigDecimal(in, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: lnza = -0.16624882440418567
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: inbits = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.missingEntries = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dest.expansionFactor = source.expansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = est * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: dest.contractionCriterion = source.contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = new java.math.BigDecimal(val, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = java.lang.Math.min(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = recip * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = denom * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp = tempA * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: missingEntries = source.missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hashData[2] = expansionMode.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAtanh = 0.5 * org.apache.commons.math3.util.FastMath.log((1 + a) / (1 - a))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: value = defaultTransformer.transform(o)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = new java.math.BigDecimal(in, offset, len, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xs[1] = 1.4456468917292502E-16
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = a + (org.apache.commons.math3.util.FastMath.LN_2_B * exp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: tmp = aa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xInt = org.apache.commons.math3.util.Precision.SGN_MASK - xInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yInt = org.apache.commons.math3.util.Precision.SGN_MASK - yInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = new java.math.BigDecimal(unscaledVal, scale, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xa = reduceResults[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xb = reduceResults[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = new java.math.BigDecimal(in)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = new java.math.BigDecimal(val)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(b, a, pattern)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - xInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - yInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: result = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ret = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(b, a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: k2p = k2p.multiply(k2p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = shpiB & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = shpi0 & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = -((c - a) - (org.apache.commons.math3.util.FastMath.LN_2_B * exp))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: d = new java.math.BigDecimal(unscaledVal, scale)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: defaultTransformer = new org.apache.commons.math3.util.DefaultTransformer()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.REMOVED
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: newStates[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: y = org.apache.commons.math3.util.FastMath.sqrt(za)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: y = org.apache.commons.math3.util.FastMath.floor(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAsinh = org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.FastMath.sqrt((a * a) + 1) + a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: number = org.apache.commons.math3.util.CompositeFormat.parseNumber(source, special[i], pos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1] << shift
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a[0] = ((c + z) - c) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: newSize = ((int) (internalArray.length + org.apache.commons.math3.util.FastMath.round(expansionFactor)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hashData[0] = java.lang.Double.valueOf(expansionFactor).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
((sintA + sintB) * (sinEpsA + sinEpsB))) * xb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ONE = new org.apache.commons.math3.util.Decimal64(1.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hashData[3] = java.util.Arrays.hashCode(internalArray)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: split[0] = ((d + a) - d) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ZERO = new org.apache.commons.math3.util.Decimal64(0.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: NAN = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NaN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: hashData[1] = java.lang.Double.valueOf(contractionCriterion).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a = java.lang.Math.abs(delta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(perturb, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations, callBack)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: newSize = ((int) (org.apache.commons.math3.util.FastMath.ceil(internalArray.length * expansionFactor)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(perturb, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xl = xl & org.apache.commons.math3.util.FastMath.MASK_30BITS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.REMOVED
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: newStates[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a = (-k) * 7.549789948768648E-8
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: temp2 = (xb * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: b = ((int) (al))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * org.apache.commons.math3.util.FastMath.F_1_5))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: y = ((long) (x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: a = (-k) * 6.123233995736766E-17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: max = org.apache.commons.math3.util.FastMath.max(max, org.apache.commons.math3.util.FastMath.abs(p1[i] - p2[i]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.size = org.apache.commons.math3.util.MathArrays.copyOf(size)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: EPSILON = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 53L) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: NEGATIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NEGATIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: index = org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: SAFE_MIN = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 1022L) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: shpiA = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xa = cw.getRemA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: xb = cw.getRemB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: shpiB = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: e = e.shiftRight(1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: map = new java.util.HashMap<java.lang.Class<?>, org.apache.commons.math3.util.NumberTransformer>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: POSITIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: index = org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: unscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: unscaled = org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: y[0] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: y[1] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: this.listeners = new java.util.concurrent.CopyOnWriteArrayList<org.apache.commons.math3.util.IterationListener>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: ya = (((tmp1 + tmp2) - tmp1) * org.apache.commons.math3.util.FastMath.HEX_40000000) * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: yb = 0.07490822288864472
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * org.apache.commons.math3.util.FastMath.F_1_9))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_5) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * org.apache.commons.math3.util.FastMath.F_1_13))))))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_15 + (a2 * org.apache.commons.math3.util.FastMath.F_1_17))))))))))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_9) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_13) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_17) * org.apache.commons.math3.util.FastMath.F_15_16))) * org.apache.commons.math3.util.FastMath.F_13_14))) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:181) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:183) - Killed the Process that runs JUnit test cases 607


Node: 224c3ebee137



Date: Mon Oct 28 02:47:16 EDT 2019

cd /script/jGenProg_Defects4J_Math_15;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-15 \
	-failing org.apache.commons.math3.util.FastMathTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Math_15/target/classes/:/script/jGenProg_Defects4J_Math_15/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

