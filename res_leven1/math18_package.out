Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO ] fr.inria.astor.core.setup.ProjectConfiguration.getVersionJDK(ProjectConfiguration.java:282) - Version of the JVM used: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:383) - Java version of the JDK used to run tests: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:384) - The compliance of the JVM is:  7
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:662) - command line arguments: [-mode  jgenprog  -location  .  -id  Math-18  -failing  org.apache.commons.math3.optimization.direct.CMAESOptimizerTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Math_18/target/classes/:/script/jGenProg_Defects4J_Math_18/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.main.evolution.AstorMain.execute(AstorMain.java:228) - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:964) - Source folders: [/script/jGenProg_Defects4J_Math_18/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:983) - Source Test folders: [/script/jGenProg_Defects4J_Math_18/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:105) - mode is Leven
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_18/./output_astor/AstorMain-Math-18//bin//default from 674 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_18/./output_astor/AstorMain-Math-18//bin//default, /script/jGenProg_Defects4J_Math_18/target/classes/, /script/jGenProg_Defects4J_Math_18/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testSampling
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetCovarianceMatrix
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testBoundaryRangeTooLarge
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.dfp.DfpTest#testMultiply
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4184, fails: 85, GZoltar suspicious 28992, with positive susp 4126
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4184
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 1000 with susp > 0.1, we consider: 1000
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:955) - Setting up the max to 4735470 milliseconds (4735 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:801) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_18/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:70) - building model: /script/jGenProg_Defects4J_Math_18/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:84) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_18/target/classes/, /script/jGenProg_Defects4J_Math_18/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:836) - Number of CtTypes created: 618
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.16269784336399212]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.16269784336399212]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.16269784336399212]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.16269784336399212]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem$Model, methodName=value(D)D, lineNumber=150, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=79, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=80, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=81, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=83, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=92, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=93, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=94, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=96, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=54, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=55, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=74, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=75, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=76, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=77, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=80, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=target()[D, lineNumber=84, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=88, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=89, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=90, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=91, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=94, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=98, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=101, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=102, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=103, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=104, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=107, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=127, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=128, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=129, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=130, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=132, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=133, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=316, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=319, susp=0.15339299776947407]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.1276306889434551]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.1276306889434551]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=77, susp=0.1252448582170299]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.11308281825797516]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 1000,  310
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 310
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 310, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_18/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 4735470
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.optimization.direct.CMAESOptimizerTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-18
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_18/target/classes/:/script/jGenProg_Defects4J_Math_18/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y = yval[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	final double $1 = yval[$0];
	dFdX[i][$0][k] = f.partialDerivativeX(x, $1);
	dFdY[i][$0][k] = f.partialDerivativeY(x, $1);
	d2FdXdY[i][$0][k] = f.partialDerivativeXY(x, $1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.a = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $0++) {
	this.a[i][$0] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * $0)];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $0++) {
	for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $1++) {
		this.a[$0][$1] = a[$0 + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * $1)];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.OutOfRangeException(x, 0, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x < 0) || (x > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(x, 0, 1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.OutOfRangeException(y, 0, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y < 0) || (y > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(y, 0, 1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x2 = x * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = x * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x3 = x2 * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = x2 * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pX = new double[]{ 1, x, x2, x3 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 1, x, x2, x3 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y2 = y * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = y * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y3 = y2 * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = y2 * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pY = new double[]{ 1, y, y2, y3 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 1, y, y2, y3 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return apply(pX, pY, a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result += (coeff[i][j] * pX[i]) * pY[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $0++) {
	result += (coeff[i][$0] * pX[i]) * pY[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $0++) {
	for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $1++) {
		result += (coeff[$0][$1] * pX[$0]) * pY[$1];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: computePartialDerivatives()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (partialDerivativeX == null) {
	computePartialDerivatives();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivativeX
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (partialDerivativeY == null) {
	computePartialDerivatives();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivativeY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (partialDerivativeXX == null) {
	computePartialDerivatives();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivativeXX
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (partialDerivativeYY == null) {
	computePartialDerivatives();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivativeYY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (partialDerivativeXY == null) {
	computePartialDerivatives();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivativeXY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] aX = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] aY = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] aXX = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] aYY = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] aXY = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double c = a[i][j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a[i][j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aX[i][j] = i * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aY[i][j] = j * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aXX[i][j] = (i - 1) * aX[i][j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aYY[i][j] = (j - 1) * aY[i][j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aXY[i][j] = j * aX[i][j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double c = a[i][$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $0++) {
	final double $1 = a[i][$0];
	aX[i][$0] = i * $1;
	aY[i][$0] = $0 * $1;
	aXX[i][$0] = (i - 1) * aX[i][$0];
	aYY[i][$0] = ($0 - 1) * aY[i][$0];
	aXY[i][$0] = $0 * aX[i][$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double c = a[$0][$1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $0++) {
	for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $1++) {
		final double $2 = a[$0][$1];
		aX[$0][$1] = $0 * $2;
		aY[$0][$1] = $1 * $2;
		aXX[$0][$1] = ($0 - 1) * aX[$0][$1];
		aYY[$0][$1] = ($1 - 1) * aY[$0][$1];
		aXY[$0][$1] = $1 * aX[$0][$1];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pX = new double[]{ 0, 1, x, x2 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 0, 1, x, x2 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return apply(pX, pY, aX)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x2 = x * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pX = new double[]{ 0, 1, x, $0 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y2 = y * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y3 = $2 * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pY = new double[]{ 1, y, $2, $3 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivativeX = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double $0 = x * x;
		final double[] $1 = new double[]{ 0, 1, x, $0 };

		final double $2 = y * y;
		final double $3 = $2 * y;
		final double[] $4 = new double[]{ 1, y, $2, $3 };

		return apply($1, $4, aX);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pY = new double[]{ 0, 1, y, y2 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 0, 1, y, y2 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return apply(pX, pY, aY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x2 = x * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x3 = $0 * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pX = new double[]{ 1, x, $0, $1 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y2 = y * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pY = new double[]{ 0, 1, y, $3 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivativeY = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double $0 = x * x;
		final double $1 = $0 * x;
		final double[] $2 = new double[]{ 1, x, $0, $1 };

		final double $3 = y * y;
		final double[] $4 = new double[]{ 0, 1, y, $3 };

		return apply($2, $4, aY);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pX = new double[]{ 0, 0, 1, x }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 0, 0, 1, x }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return apply(pX, pY, aXX)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pX = new double[]{ 0, 0, 1, x }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y2 = y * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y3 = $1 * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pY = new double[]{ 1, y, $1, $2 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivativeXX = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double[] $0 = new double[]{ 0, 0, 1, x };

		final double $1 = y * y;
		final double $2 = $1 * y;
		final double[] $3 = new double[]{ 1, y, $1, $2 };

		return apply($0, $3, aXX);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pY = new double[]{ 0, 0, 1, y }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 0, 0, 1, y }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return apply(pX, pY, aYY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x2 = x * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x3 = $0 * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pX = new double[]{ 1, x, $0, $1 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pY = new double[]{ 0, 0, 1, y }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivativeYY = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double $0 = x * x;
		final double $1 = $0 * x;
		final double[] $2 = new double[]{ 1, x, $0, $1 };

		final double[] $3 = new double[]{ 0, 0, 1, y };

		return apply($2, $3, aYY);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return apply(pX, pY, aXY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x2 = x * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pX = new double[]{ 0, 1, x, $0 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y2 = y * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pY = new double[]{ 0, 1, y, $2 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivativeXY = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double $0 = x * x;
		final double[] $1 = new double[]{ 0, 1, x, $0 };

		final double $2 = y * y;
		final double[] $3 = new double[]{ 0, 1, y, $2 };

		return apply($1, $3, aXY);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int xLen = x.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = x.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int yLen = y.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = y.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NoDataException()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((((xLen == 0) || (yLen == 0)) || (f.length == 0)) || (f[0].length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, f.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xLen != f.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, f.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdX.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xLen != dFdX.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdX.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdY.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xLen != dFdY.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdY.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdY.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xLen != d2FdXdY.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdY.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathArrays.checkOrder(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathArrays.checkOrder(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xval = x.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yval = y.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int lastI = xLen - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = xLen - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int lastJ = yLen - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = yLen - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: splines = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction[lastI][lastJ]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (f[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (dFdX[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (dFdY[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d2FdXdY[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int ip1 = i + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = i + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int jp1 = j + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = j + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] beta = new double[]{ 
f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 
f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int jp1 = $0 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] beta = new double[]{ 
f[i][$0], f[ip1][$0], f[i][$1], f[ip1][$1], 
dFdX[i][$0], dFdX[ip1][$0], dFdX[i][$1], dFdX[ip1][$1], 
dFdY[i][$0], dFdY[ip1][$0], dFdY[i][$1], dFdY[ip1][$1], 
d2FdXdY[i][$0], d2FdXdY[ip1][$0], d2FdXdY[i][$1], d2FdXdY[ip1][$1] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < lastJ; $0++) {
	final int $1 = $0 + 1;
	final double[] $2 = new double[]{ 
	f[i][$0], f[ip1][$0], f[i][$1], f[ip1][$1], 
	dFdX[i][$0], dFdX[ip1][$0], dFdX[i][$1], dFdX[ip1][$1], 
	dFdY[i][$0], dFdY[ip1][$0], dFdY[i][$1], dFdY[ip1][$1], 
	d2FdXdY[i][$0], d2FdXdY[ip1][$0], d2FdXdY[i][$1], d2FdXdY[ip1][$1] };


	splines[i][$0] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients($2));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int ip1 = $0 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int jp1 = $2 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] beta = new double[]{ 
f[$0][$2], f[$1][$2], f[$0][$3], f[$1][$3], 
dFdX[$0][$2], dFdX[$1][$2], dFdX[$0][$3], dFdX[$1][$3], 
dFdY[$0][$2], dFdY[$1][$2], dFdY[$0][$3], dFdY[$1][$3], 
d2FdXdY[$0][$2], d2FdXdY[$1][$2], d2FdXdY[$0][$3], d2FdXdY[$1][$3] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < lastI; $0++) {
	if (f[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[$0].length, yLen);
	}
	if (dFdX[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[$0].length, yLen);
	}
	if (dFdY[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[$0].length, yLen);
	}
	if (d2FdXdY[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[$0].length, yLen);
	}
	final int $1 = $0 + 1;
	for (int $2 = 0; $2 < lastJ; $2++) {
		final int $3 = $2 + 1;
		final double[] $4 = new double[]{ 
		f[$0][$2], f[$1][$2], f[$0][$3], f[$1][$3], 
		dFdX[$0][$2], dFdX[$1][$2], dFdX[$0][$3], dFdX[$1][$3], 
		dFdY[$0][$2], dFdY[$1][$2], dFdY[$0][$3], dFdY[$1][$3], 
		d2FdXdY[$0][$2], d2FdXdY[$1][$2], d2FdXdY[$0][$3], d2FdXdY[$1][$3] };


		splines[$0][$2] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients($4));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int i = searchIndex(x, xval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = searchIndex(x, xval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.OutOfRangeException(x, xval[0], xval[xval.length - 1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (i == (-1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(x, xval[0], xval[xval.length - 1]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int j = searchIndex(y, yval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = searchIndex(y, yval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.OutOfRangeException(y, yval[0], yval[yval.length - 1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (j == (-1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(y, yval[0], yval[yval.length - 1]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xN = (x - xval[i]) / (xval[i + 1] - xval[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (x - xval[i]) / (xval[i + 1] - xval[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double yN = (y - yval[j]) / (yval[j + 1] - yval[j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (y - yval[j]) / (yval[j + 1] - yval[j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return splines[i][j].value(xN, yN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivative(0, x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivative(1, x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivative(2, x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivative(3, x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivative(4, x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (partialDerivatives == null) {
	computePartialDerivatives();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return partialDerivatives[which][i][j].value(xN, yN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int lastI = xval.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = xval.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int lastJ = yval.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = yval.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivatives = new org.apache.commons.math3.analysis.BivariateFunction[5][lastI][lastJ]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction $0 = splines[i][j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivatives[0][i][j] = f.partialDerivativeX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivatives[1][i][j] = f.partialDerivativeY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivatives[2][i][j] = f.partialDerivativeXX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivatives[3][i][j] = f.partialDerivativeYY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: partialDerivatives[4][i][j] = f.partialDerivativeXY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < lastJ; $0++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction $1 = splines[i][$0];
	partialDerivatives[0][i][$0] = $1.partialDerivativeX();
	partialDerivatives[1][i][$0] = $1.partialDerivativeY();
	partialDerivatives[2][i][$0] = $1.partialDerivativeXX();
	partialDerivatives[3][i][$0] = $1.partialDerivativeYY();
	partialDerivatives[4][i][$0] = $1.partialDerivativeXY();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[$0][$1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < lastI; $0++) {
	for (int $1 = 0; $1 < lastJ; $1++) {
		final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction $2 = splines[$0][$1];
		partialDerivatives[0][$0][$1] = $2.partialDerivativeX();
		partialDerivatives[1][$0][$1] = $2.partialDerivativeY();
		partialDerivatives[2][$0][$1] = $2.partialDerivativeXX();
		partialDerivatives[3][$0][$1] = $2.partialDerivativeYY();
		partialDerivatives[4][$0][$1] = $2.partialDerivativeXY();
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (c < val[0]) {
	return -1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int max = val.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = val.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return i - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (c <= val[i]) {
	return i - 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 < max; $0++) {
	if (c <= val[$0]) {
		return $0 - 1;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] a = new double[16]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[16]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] row = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result += row[j] * beta[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < 16; $0++) {
	result += row[$0] * beta[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[i] = result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] row = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < 16; $0++) {
	double $1 = 0;
	final double[] $2 = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[$0];
	for (int $3 = 0; $3 < 16; $3++) {
		$1 += $2[$3] * beta[$3];
	}
	a[$0] = $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((xval.length == 0) || (yval.length == 0)) || (fval.length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, fval.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xval.length != fval.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, fval.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathArrays.checkOrder(xval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathArrays.checkOrder(yval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int xLen = xval.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = xval.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int yLen = yval.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = yval.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] fX = new double[yLen][xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[yLen][xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (fval[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: fX[j][i] = fval[i][j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	fX[$0][i] = fval[i][$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	if (fval[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$0].length, yLen);
	}

	for (int $1 = 0; $1 < yLen; $1++) {
		fX[$1][$0] = fval[$0][$1];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.interpolation.SplineInterpolator spInterpolator = new org.apache.commons.math3.analysis.interpolation.SplineInterpolator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.interpolation.SplineInterpolator $0 = new org.apache.commons.math3.analysis.interpolation.SplineInterpolator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] ySplineX = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] $0 = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ySplineX[j] = spInterpolator.interpolate(xval, fX[j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	ySplineX[$0] = spInterpolator.interpolate(xval, fX[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] xSplineY = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] $0 = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xSplineY[i] = spInterpolator.interpolate(yval, fval[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	xSplineY[$0] = spInterpolator.interpolate(yval, fval[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] dFdX = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.UnivariateFunction f = ySplineX[j].derivative()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.UnivariateFunction $0 = ySplineX[j].derivative()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dFdX[i][j] = f.value(xval[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	dFdX[$0][j] = f.value(xval[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.UnivariateFunction f = ySplineX[$0].derivative()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	final org.apache.commons.math3.analysis.UnivariateFunction $1 = ySplineX[$0].derivative();
	for (int $2 = 0; $2 < xLen; $2++) {
		dFdX[$2][$0] = $1.value(xval[$2]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] dFdY = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.UnivariateFunction f = xSplineY[i].derivative()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.UnivariateFunction $0 = xSplineY[i].derivative()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dFdY[i][j] = f.value(yval[j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	dFdY[i][$0] = f.value(yval[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.UnivariateFunction f = xSplineY[$0].derivative()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	final org.apache.commons.math3.analysis.UnivariateFunction $1 = xSplineY[$0].derivative();
	for (int $2 = 0; $2 < yLen; $2++) {
		dFdY[$0][$2] = $1.value(yval[$2]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] d2FdXdY = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int nI = nextIndex(i, xLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = nextIndex(i, xLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int pI = previousIndex(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = previousIndex(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int nJ = nextIndex(j, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = nextIndex(j, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int pJ = previousIndex(j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = previousIndex(j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
fval[pI][nJ]) + fval[pI][pJ]) / 
((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int nJ = nextIndex($0, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int pJ = previousIndex($0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	final int $1 = nextIndex($0, yLen);
	final int $2 = previousIndex($0);
	d2FdXdY[i][$0] = (((fval[nI][$1] - fval[nI][$2]) - 
	fval[pI][$1]) + fval[pI][$2]) / 
	((xval[nI] - xval[pI]) * (yval[$1] - yval[$2]));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int nI = nextIndex($0, xLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int pI = previousIndex($0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int nJ = nextIndex($3, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int pJ = previousIndex($3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	final int $1 = nextIndex($0, xLen);
	final int $2 = previousIndex($0);
	for (int $3 = 0; $3 < yLen; $3++) {
		final int $4 = nextIndex($3, yLen);
		final int $5 = previousIndex($3);
		d2FdXdY[$0][$3] = (((fval[$1][$4] - fval[$1][$5]) - 
		fval[$2][$4]) + fval[$2][$5]) / 
		((xval[$1] - xval[$2]) * (yval[$4] - yval[$5]));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction(xval, yval, fval, 
dFdX, dFdY, d2FdXdY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = i + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = i + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return index < max ? index : index - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = i - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = i - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return index >= 0 ? index : 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] c = new double[x.length - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[x.length - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(x, 0, c, 0, c.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] a = org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.computeDividedDifference(x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.computeDividedDifference(x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm(a, c)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] divdiff = y.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = y.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int n = x.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = x.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] a = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[0] = divdiff[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double denominator = x[j + i] - x[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = x[j + i] - x[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double denominator = x[$0 + i] - x[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < (n - i); $0++) {
	final double $1 = x[$0 + i] - x[$0];
	divdiff[$0] = (divdiff[$0 + 1] - divdiff[$0]) / $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[i] = divdiff[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double denominator = x[$1 + $0] - x[$1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 < n; $0++) {
	for (int $1 = 0; $1 < (n - $0); $1++) {
		final double $2 = x[$1 + $0] - x[$1];
		divdiff[$1] = (divdiff[$1 + 1] - divdiff[$1]) / $2;
	}
	a[$0] = divdiff[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.abscissae = new java.util.ArrayList<java.lang.Double>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.topDiagonal = new java.util.ArrayList<double[]>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.bottomDiagonal = new java.util.ArrayList<double[]>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] y = value[i].clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = value[i].clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y[j] *= inv
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < y.length; ++$0) {
	y[$0] *= inv;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (i > 1) {
	double $0 = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
	for (int $1 = 0; $1 < y.length; ++$1) {
		y[$1] *= $0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int n = abscissae.size()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = abscissae.size()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bottomDiagonal.add(n - i, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] bottom0 = y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] bottom1 = bottomDiagonal.get(n - (j + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = bottomDiagonal.get(n - (j + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double inv = 1.0 / (x - abscissae.get(n - (j + 1)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0 / (x - abscissae.get(n - (j + 1)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(inv)) {
	throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bottom1[k] = inv * (bottom0[k] - bottom1[k])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < y.length; ++$0) {
	bottom1[$0] = inv * (bottom0[$0] - bottom1[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bottom0 = bottom1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = i
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] bottom1 = bottomDiagonal.get(n - ($0 + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double inv = 1.0 / (x - abscissae.get(n - ($0 + 1)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = i; $0 < n; ++$0) {
	final double[] $1 = bottomDiagonal.get(n - ($0 + 1));
	final double $2 = 1.0 / (x - abscissae.get(n - ($0 + 1)));
	if (java.lang.Double.isInfinite($2)) {
		throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
	}
	for (int $3 = 0; $3 < y.length; ++$3) {
		$1[$3] = $2 * (bottom0[$3] - $1[$3]);
	}
	bottom0 = $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: topDiagonal.add(bottom0.clone())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: abscissae.add(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] y = value[$0].clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial($0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int n = abscissae.size()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] bottom0 = $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] bottom1 = bottomDiagonal.get($4 - ($6 + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double inv = 1.0 / (x - abscissae.get($4 - ($6 + 1)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < value.length; ++$0) {

	final double[] $1 = value[$0].clone();
	if ($0 > 1) {
		double $2 = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial($0);
		for (int $3 = 0; $3 < $1.length; ++$3) {
			$1[$3] *= $2;
		}
	}


	final int $4 = abscissae.size();
	bottomDiagonal.add($4 - $0, $1);
	double[] $5 = $1;
	for (int $6 = $0; $6 < $4; ++$6) {
		final double[] $7 = bottomDiagonal.get($4 - ($6 + 1));
		final double $8 = 1.0 / (x - abscissae.get($4 - ($6 + 1)));
		if (java.lang.Double.isInfinite($8)) {
			throw new org.apache.commons.math3.exception.ZeroException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);
		}
		for (int $9 = 0; $9 < $1.length; ++$9) {
			$7[$9] = $8 * ($5[$9] - $7[$9]);
		}
		$5 = $7;
	}


	topDiagonal.add($5.clone());


	abscissae.add(x);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: checkInterpolation()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction zero = polynomial(0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction $0 = polynomial(0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[topDiagonal.get(0).length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $0 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[topDiagonal.get(0).length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: polynomials[i] = zero
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < polynomials.length; ++$0) {
	polynomials[$0] = zero;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.analysis.polynomials.PolynomialFunction coeff = polynomial(1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.analysis.polynomials.PolynomialFunction $0 = polynomial(1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] tdi = topDiagonal.get(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = topDiagonal.get(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < polynomials.length; ++$0) {
	polynomials[$0] = polynomials[$0].add(coeff.multiply(polynomial(tdi[$0])));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] tdi = topDiagonal.get($0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < topDiagonal.size(); ++$0) {
	double[] $1 = topDiagonal.get($0);
	for (int $2 = 0; $2 < polynomials.length; ++$2) {
		polynomials[$2] = polynomials[$2].add(coeff.multiply(polynomial($1[$2])));
	}
	coeff = coeff.multiply(polynomial(-abscissae.get($0), 1.0));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return polynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] value = new double[topDiagonal.get(0).length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[topDiagonal.get(0).length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double valueCoeff = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] dividedDifference = topDiagonal.get(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = topDiagonal.get(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: value[k] += dividedDifference[k] * valueCoeff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < value.length; ++$0) {
	value[$0] += dividedDifference[$0] * valueCoeff;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double deltaX = x - abscissae.get(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = x - abscissae.get(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: valueCoeff *= deltaX
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] dividedDifference = topDiagonal.get($0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double deltaX = x - abscissae.get($0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < topDiagonal.size(); ++$0) {
	double[] $1 = topDiagonal.get($0);
	for (int $2 = 0; $2 < value.length; ++$2) {
		value[$2] += $1[$2] * valueCoeff;
	}
	final double $3 = x - abscissae.get($0);
	valueCoeff *= $3;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] value = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] $0 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure[topDiagonal.get(0).length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.util.Arrays.fill(value, x.getField().getZero())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.analysis.differentiation.DerivativeStructure valueCoeff = x.getField().getOne()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.analysis.differentiation.DerivativeStructure $0 = x.getField().getOne()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: value[k] = value[k].add(valueCoeff.multiply(dividedDifference[k]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < value.length; ++$0) {
	value[$0] = value[$0].add(valueCoeff.multiply(dividedDifference[$0]));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure $0 = x.subtract(abscissae.get(i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: valueCoeff = valueCoeff.multiply(deltaX)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] dividedDifference = topDiagonal.get($0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.differentiation.DerivativeStructure deltaX = x.subtract(abscissae.get($0))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < topDiagonal.size(); ++$0) {
	double[] $1 = topDiagonal.get($0);
	for (int $2 = 0; $2 < value.length; ++$2) {
		value[$2] = value[$2].add(valueCoeff.multiply($1[$2]));
	}
	final org.apache.commons.math3.analysis.differentiation.DerivativeStructure $3 = x.subtract(abscissae.get($0));
	valueCoeff = valueCoeff.multiply($3);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (abscissae.isEmpty()) {
	throw new org.apache.commons.math3.exception.NoDataException(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_INTERPOLATION_SAMPLE);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x.length != y.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
x.length, 2, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x.length < 2) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
	x.length, 2, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int n = x.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = x.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] m = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < n; $0++) {
	m[$0] = (y[$0 + 1] - y[$0]) / (x[$0 + 1] - x[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $0 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] coefficients = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: coefficients[0] = y[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: coefficients[1] = m[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < n; $0++) {
	coefficients[0] = y[$0];
	coefficients[1] = m[$0];
	polynomials[$0] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction(x, polynomials)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.bandwidth = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_BANDWIDTH
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.robustnessIters = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.accuracy = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_ACCURACY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(bandwidth, robustnessIters, org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_ACCURACY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, bandwidth, 0, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((bandwidth < 0) || 
(bandwidth > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, bandwidth, 0, 1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.bandwidth = bandwidth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.ROBUSTNESS_ITERATIONS, robustnessIters)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (robustnessIters < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.ROBUSTNESS_ITERATIONS, robustnessIters);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.robustnessIters = robustnessIters
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.accuracy = accuracy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.analysis.interpolation.SplineInterpolator().interpolate(xval, smooth(xval, yval))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, yval.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xval.length != yval.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, yval.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int n = xval.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = xval.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n == 0) {
	throw new org.apache.commons.math3.exception.NoDataException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(xval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(yval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(weights)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new double[]{ yval[0] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n == 1) {
	return new double[]{ yval[0] };
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new double[]{ yval[0], yval[1] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n == 2) {
	return new double[]{ yval[0], yval[1] };
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int bandwidthInPoints = ((int) (bandwidth * n))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = ((int) (bandwidth * n))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, 
bandwidthInPoints, 2, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (bandwidthInPoints < 2) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, 
	bandwidthInPoints, 2, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] res = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] residuals = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] sortedResiduals = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] robustnessWeights = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.util.Arrays.fill(robustnessWeights, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int[] bandwidthInterval = new int[]{ 0, bandwidthInPoints - 1 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int[] $0 = new int[]{ 0, bandwidthInPoints - 1 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x = xval[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = xval[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (i > 0) {
	org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int ileft = bandwidthInterval[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = bandwidthInterval[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int iright = bandwidthInterval[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = bandwidthInterval[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int edge
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: edge = ileft
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: edge = iright
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
	edge = ileft;
} else {
	edge = iright;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumWeights = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumX = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumXSquared = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumY = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumXY = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xk = xval[k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = xval[k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double yk = yval[k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = yval[k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dist = (k < i) ? x - xk : xk - x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (k < i) ? x - xk : xk - x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xkw = xk * w
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = xk * w
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sumWeights += w
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sumX += xkw
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sumXSquared += xk * xkw
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sumY += yk * w
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sumXY += yk * xkw
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = ileft
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xk = xval[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double yk = yval[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dist = ($0 < i) ? x - $1 : $1 - x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($3 * denom) * robustnessWeights[$0]) * weights[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xkw = $1 * $4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = ileft; $0 <= iright; ++$0) {
	final double $1 = xval[$0];
	final double $2 = yval[$0];
	final double $3 = ($0 < i) ? x - $1 : $1 - x;
	final double $4 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($3 * denom) * robustnessWeights[$0]) * weights[$0];
	final double $5 = $1 * $4;
	sumWeights += $4;
	sumX += $5;
	sumXSquared += $1 * $5;
	sumY += $2 * $4;
	sumXY += $2 * $5;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanX = sumX / sumWeights
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = sumX / sumWeights
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanY = sumY / sumWeights
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = sumY / sumWeights
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanXY = sumXY / sumWeights
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = sumXY / sumWeights
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanXSquared = sumXSquared / sumWeights
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = sumXSquared / sumWeights
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double beta
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: beta = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
	beta = 0;
} else {
	beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double alpha = meanY - (beta * meanX)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = meanY - (beta * meanX)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: res[i] = (beta * x) + alpha
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x = xval[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int ileft = bandwidthInterval[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int iright = bandwidthInterval[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int edge
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumWeights = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumX = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumXSquared = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumY = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumXY = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[$4] - $1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = $2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xk = xval[$11]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double yk = yval[$11]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dist = ($11 < $0) ? $1 - $12 : $12 - $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($14 * $10) * robustnessWeights[$11]) * weights[$11]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xkw = $12 * $15
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanX = $6 / $5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanY = $8 / $5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanXY = $9 / $5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanXSquared = $7 / $5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double beta
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double alpha = $18 - ($21 * $17)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < n; ++$0) {
	final double $1 = xval[$0];



	if ($0 > 0) {
		org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, $0, bandwidthInterval);
	}

	final int $2 = bandwidthInterval[0];
	final int $3 = bandwidthInterval[1];



	final int $4;
	if ((xval[$0] - xval[$2]) > (xval[$3] - xval[$0])) {
		$4 = $2;
	} else {
		$4 = $3;
	}








	double $5 = 0;
	double $6 = 0;
	double $7 = 0;
	double $8 = 0;
	double $9 = 0;
	double $10 = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[$4] - $1));
	for (int $11 = $2; $11 <= $3; ++$11) {
		final double $12 = xval[$11];
		final double $13 = yval[$11];
		final double $14 = ($11 < $0) ? $1 - $12 : $12 - $1;
		final double $15 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($14 * $10) * robustnessWeights[$11]) * weights[$11];
		final double $16 = $12 * $15;
		$5 += $15;
		$6 += $16;
		$7 += $12 * $16;
		$8 += $13 * $15;
		$9 += $13 * $16;
	}

	final double $17 = $6 / $5;
	final double $18 = $8 / $5;
	final double $19 = $9 / $5;
	final double $20 = $7 / $5;

	final double $21;
	if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs($20 - ($17 * $17))) < accuracy) {
		$21 = 0;
	} else {
		$21 = ($19 - ($17 * $18)) / ($20 - ($17 * $17));
	}

	final double $22 = $18 - ($21 * $17);

	res[$0] = ($21 * $1) + $22;
	residuals[$0] = org.apache.commons.math3.util.FastMath.abs(yval[$0] - res[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: break
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (iter == robustnessIters) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.util.Arrays.sort(sortedResiduals)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double medianResidual = sortedResiduals[n / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = sortedResiduals[n / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.abs(medianResidual) < accuracy) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double arg = residuals[i] / (6 * medianResidual)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = residuals[i] / (6 * medianResidual)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: robustnessWeights[i] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = 1 - (arg * arg)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1 - (arg * arg)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: robustnessWeights[i] = w * w
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = 1 - (arg * arg)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (arg >= 1) {
	robustnessWeights[i] = 0;
} else {
	final double $0 = 1 - (arg * arg);
	robustnessWeights[i] = $0 * $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double arg = residuals[$0] / (6 * medianResidual)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = 1 - ($1 * $1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < n; ++$0) {
	final double $1 = residuals[$0] / (6 * medianResidual);
	if ($1 >= 1) {
		robustnessWeights[$0] = 0;
	} else {
		final double $2 = 1 - ($1 * $1);
		robustnessWeights[$0] = $2 * $2;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int iter = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int[] bandwidthInterval = new int[]{ 0, bandwidthInPoints - 1 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x = xval[$2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int ileft = $1[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int iright = $1[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int edge
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumWeights = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumX = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumXSquared = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumY = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumXY = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[$6] - $3))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = $4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xk = xval[$13]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double yk = yval[$13]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dist = ($13 < $2) ? $3 - $14 : $14 - $3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($16 * $12) * robustnessWeights[$13]) * weights[$13]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xkw = $14 * $17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanX = $8 / $7
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanY = $10 / $7
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanXY = $11 / $7
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double meanXSquared = $9 / $7
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double beta
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double alpha = $20 - ($23 * $19)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double medianResidual = sortedResiduals[n / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double arg = residuals[$26] / (6 * $25)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = 1 - ($27 * $27)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 <= robustnessIters; ++$0) {
	final int[] $1 = new int[]{ 0, bandwidthInPoints - 1 };

	for (int $2 = 0; $2 < n; ++$2) {
		final double $3 = xval[$2];



		if ($2 > 0) {
			org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, $2, $1);
		}

		final int $4 = $1[0];
		final int $5 = $1[1];



		final int $6;
		if ((xval[$2] - xval[$4]) > (xval[$5] - xval[$2])) {
			$6 = $4;
		} else {
			$6 = $5;
		}








		double $7 = 0;
		double $8 = 0;
		double $9 = 0;
		double $10 = 0;
		double $11 = 0;
		double $12 = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[$6] - $3));
		for (int $13 = $4; $13 <= $5; ++$13) {
			final double $14 = xval[$13];
			final double $15 = yval[$13];
			final double $16 = ($13 < $2) ? $3 - $14 : $14 - $3;
			final double $17 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($16 * $12) * robustnessWeights[$13]) * weights[$13];
			final double $18 = $14 * $17;
			$7 += $17;
			$8 += $18;
			$9 += $14 * $18;
			$10 += $15 * $17;
			$11 += $15 * $18;
		}

		final double $19 = $8 / $7;
		final double $20 = $10 / $7;
		final double $21 = $11 / $7;
		final double $22 = $9 / $7;

		final double $23;
		if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs($22 - ($19 * $19))) < accuracy) {
			$23 = 0;
		} else {
			$23 = ($21 - ($19 * $20)) / ($22 - ($19 * $19));
		}

		final double $24 = $20 - ($23 * $19);

		res[$2] = ($23 * $3) + $24;
		residuals[$2] = org.apache.commons.math3.util.FastMath.abs(yval[$2] - res[$2]);
	}



	if ($0 == robustnessIters) {
		break;
	}






	java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n);
	java.util.Arrays.sort(sortedResiduals);
	final double $25 = sortedResiduals[n / 2];

	if (org.apache.commons.math3.util.FastMath.abs($25) < accuracy) {
		break;
	}

	for (int $26 = 0; $26 < n; ++$26) {
		final double $27 = residuals[$26] / (6 * $25);
		if ($27 >= 1) {
			robustnessWeights[$26] = 0;
		} else {
			final double $28 = 1 - ($27 * $27);
			robustnessWeights[$26] = $28 * $28;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return res
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] unitWeights = new double[xval.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[xval.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.util.Arrays.fill(unitWeights, 1.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return smooth(xval, yval, unitWeights)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int left = bandwidthInterval[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = bandwidthInterval[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int right = bandwidthInterval[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = bandwidthInterval[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int nextRight = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, right)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, right)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int nextLeft = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, bandwidthInterval[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, bandwidthInterval[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bandwidthInterval[0] = nextLeft
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bandwidthInterval[1] = nextRight
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int nextLeft = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, bandwidthInterval[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((nextRight < xval.length) && ((xval[nextRight] - xval[i]) < (xval[i] - xval[left]))) {
	int $0 = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, bandwidthInterval[0]);
	bandwidthInterval[0] = $0;
	bandwidthInterval[1] = nextRight;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = i + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = i + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ++j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while ((j < weights.length) && (weights[j] == 0)) {
	++j;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double absX = org.apache.commons.math3.util.FastMath.abs(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.abs(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (absX >= 1.0) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmp = 1 - ((absX * absX) * absX)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1 - ((absX * absX) * absX)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (tmp * tmp) * tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathUtils.checkFinite(values[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < values.length; $0++) {
	org.apache.commons.math3.util.MathUtils.checkFinite(values[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: normal = new org.apache.commons.math3.linear.ArrayRealVector(n)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return normal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: brightestIllumination = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: brightestSample = null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.brightestIllumination = illuminationFromSample
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.brightestSample = sample
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (illuminationFromSample > this.brightestIllumination) {
	this.brightestIllumination = illuminationFromSample;
	this.brightestSample = sample;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return brightestIllumination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return brightestSample
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NullArgumentException()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((xval == null) || 
(yval == null)) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xval.length == 0) {
	throw new org.apache.commons.math3.exception.NoDataException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xval[0] == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dimension = xval[0].length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.brightnessExponent = brightnessExponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: samples = new java.util.HashMap<org.apache.commons.math3.linear.RealVector, java.lang.Double>(yval.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] xvalI = xval[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = xval[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xvalI == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xvalI.length != dimension) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: samples.put(new org.apache.commons.math3.linear.ArrayRealVector(xvalI), yval[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] xvalI = xval[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xval.length; ++$0) {
	final double[] $1 = xval[$0];
	if ($1 == null) {
		throw new org.apache.commons.math3.exception.NullArgumentException();
	}
	if ($1.length != dimension) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException($1.length, dimension);
	}

	samples.put(new org.apache.commons.math3.linear.ArrayRealVector($1), yval[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: microsphere = new java.util.ArrayList<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement>(microsphereElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < microsphereElements; $0++) {
	microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.linear.RealVector p = new org.apache.commons.math3.linear.ArrayRealVector(point)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.linear.RealVector $0 = new org.apache.commons.math3.linear.ArrayRealVector(point)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: md.reset()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement $0 : microsphere) {
	$0.reset();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.linear.RealVector diff = sd.getKey().subtract(p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.linear.RealVector $0 = sd.getKey().subtract(p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double diffNorm = diff.getNorm()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = diff.getNorm()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sd.getValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.abs(diffNorm) < org.apache.commons.math3.util.FastMath.ulp(1.0)) {


	return sd.getValue();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: md.store(cosAngle(diff, md.normal()) * w, sd)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement $0 : microsphere) {
	final double $1 = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent);
	$0.store(cosAngle(diff, $0.normal()) * $1, sd);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> sd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.linear.RealVector diff = $0.getKey().subtract(p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double diffNorm = $1.getNorm()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double w = org.apache.commons.math3.util.FastMath.pow($2, -brightnessExponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> $0 : samples.entrySet()) {


	final org.apache.commons.math3.linear.RealVector $1 = $0.getKey().subtract(p);
	final double $2 = $1.getNorm();

	if (org.apache.commons.math3.util.FastMath.abs($2) < org.apache.commons.math3.util.FastMath.ulp(1.0)) {


		return $0.getValue();
	}

	for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement $3 : microsphere) {
		final double $4 = org.apache.commons.math3.util.FastMath.pow($2, -brightnessExponent);
		$3.store(cosAngle($1, $3.normal()) * $4, $0);
	}

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double value = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double totalWeight = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double iV = md.illumination()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = md.illumination()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> sd = md.sample()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> $0 = md.sample()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: value += iV * sd.getValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: totalWeight += iV
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (sd != null) {
	value += iV * sd.getValue();
	totalWeight += iV;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double iV = $0.illumination()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> sd = $0.sample()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement $0 : microsphere) {
	final double $1 = $0.illumination();
	final java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> $2 = $0.sample();
	if ($2 != null) {
		value += $1 * $2.getValue();
		totalWeight += $1;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return value / totalWeight
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return v.dotProduct(w) / (v.getNorm() * w.getNorm())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator.DEFAULT_MICROSPHERE_ELEMENTS, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator.DEFAULT_BRIGHTNESS_EXPONENT)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotPositiveException(exponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (exponent < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(exponent);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(elements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (elements <= 0) {
	throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(elements);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: microsphereElements = elements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: brightnessExponent = exponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.random.UnitSphereRandomVectorGenerator rand = 
new org.apache.commons.math3.random.UnitSphereRandomVectorGenerator(xval[0].length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.random.UnitSphereRandomVectorGenerator $0 = 
new org.apache.commons.math3.random.UnitSphereRandomVectorGenerator(xval[0].length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction(xval, yval, 
brightnessExponent, 
microsphereElements, 
rand)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm(x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(degree, degree)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xFitter = new org.apache.commons.math3.optimization.fitting.PolynomialFitter(xDegree, new org.apache.commons.math3.optimization.general.GaussNewtonOptimizer(false))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yFitter = new org.apache.commons.math3.optimization.fitting.PolynomialFitter(yDegree, new org.apache.commons.math3.optimization.general.GaussNewtonOptimizer(false))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	if (fval[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$0].length, yLen);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] yPolyX = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $0 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xFitter.clearObservations()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xFitter.addObservedPoint(1, xval[i], fval[i][j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	xFitter.addObservedPoint(1, xval[$0], fval[$0][j]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yPolyX[j] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(xFitter.fit())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	xFitter.clearObservations();
	for (int $1 = 0; $1 < xLen; $1++) {
		xFitter.addObservedPoint(1, xval[$1], fval[$1][$0]);
	}

	yPolyX[$0] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(xFitter.fit());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] fval_1 = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = yPolyX[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction $0 = yPolyX[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: fval_1[i][j] = f.value(xval[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	fval_1[$0][j] = f.value(xval[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = yPolyX[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction $1 = yPolyX[$0];
	for (int $2 = 0; $2 < xLen; $2++) {
		fval_1[$2][$0] = $1.value(xval[$2]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] xPolyY = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $0 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yFitter.clearObservations()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yFitter.addObservedPoint(1, yval[j], fval_1[i][j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	yFitter.addObservedPoint(1, yval[$0], fval_1[i][$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xPolyY[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(yFitter.fit())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	yFitter.clearObservations();
	for (int $1 = 0; $1 < yLen; $1++) {
		yFitter.addObservedPoint(1, yval[$1], fval_1[$0][$1]);
	}

	xPolyY[$0] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(yFitter.fit());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][] fval_2 = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][] $0 = new double[xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = xPolyY[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction $0 = xPolyY[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: fval_2[i][j] = f.value(yval[j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	fval_2[i][$0] = f.value(yval[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = xPolyY[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction $1 = xPolyY[$0];
	for (int $2 = 0; $2 < yLen; $2++) {
		fval_2[$0][$2] = $1.value(yval[$2]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return super.interpolate(xval, yval, fval_2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
x.length, 3, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x.length < 3) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
	x.length, 3, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int n = x.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = x.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] h = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: h[i] = x[i + 1] - x[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < n; $0++) {
	h[$0] = x[$0 + 1] - x[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] mu = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] z = new double[n + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mu[0] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z[0] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double g = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: g = (2.0 * (x[i + 1] - x[i - 1])) - (h[i - 1] * mu[i - 1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mu[i] = h[i] / g
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z[i] = (((3.0 * (((y[i + 1] * h[i - 1]) - (y[i] * (x[i + 1] - x[i - 1]))) + (y[i - 1] * h[i]))) / 
(h[i - 1] * h[i])) - (h[i - 1] * z[i - 1])) / g
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 < n; $0++) {
	g = (2.0 * (x[$0 + 1] - x[$0 - 1])) - (h[$0 - 1] * mu[$0 - 1]);
	mu[$0] = h[$0] / g;
	z[$0] = (((3.0 * (((y[$0 + 1] * h[$0 - 1]) - (y[$0] * (x[$0 + 1] - x[$0 - 1]))) + (y[$0 - 1] * h[$0]))) / 
	(h[$0 - 1] * h[$0])) - (h[$0 - 1] * z[$0 - 1])) / g;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] b = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] c = new double[n + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] d = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z[n] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c[n] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c[j] = z[j] - (mu[j] * c[j + 1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b[j] = ((y[j + 1] - y[j]) / h[j]) - ((h[j] * (c[j + 1] + (2.0 * c[j]))) / 3.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d[j] = (c[j + 1] - c[j]) / (3.0 * h[j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = n - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = n - 1; $0 >= 0; $0--) {
	c[$0] = z[$0] - (mu[$0] * c[$0 + 1]);
	b[$0] = ((y[$0 + 1] - y[$0]) / h[$0]) - ((h[$0] * (c[$0 + 1] + (2.0 * c[$0]))) / 3.0);
	d[$0] = (c[$0 + 1] - c[$0]) / (3.0 * h[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] coefficients = new double[4]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[4]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: coefficients[1] = b[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: coefficients[2] = c[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: coefficients[3] = d[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < n; $0++) {
	coefficients[0] = y[$0];
	coefficients[1] = b[$0];
	coefficients[2] = c[$0];
	coefficients[3] = d[$0];
	polynomials[$0] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $0++) {
	a[i][j][$0] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * $0)))];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $0++) {
	for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $1++) {
		a[i][$0][$1] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * ($0 + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * $1)))];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $0++) {
	for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $1++) {
		for (int $2 = 0; $2 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $2++) {
			a[$0][$1][$2] = aV[$0 + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * ($1 + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * $2)))];
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.OutOfRangeException(z, 0, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((z < 0) || (z > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(z, 0, 1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double z2 = z * z
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = z * z
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double z3 = z2 * z
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = z2 * z
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] pZ = new double[]{ 1, z, z2, z3 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 1, z, z2, z3 }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $0++) {
	result += ((a[i][j][$0] * pX[i]) * pY[j]) * pZ[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $0++) {
	for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $1++) {
		result += ((a[i][$0][$1] * pX[i]) * pY[$0]) * pZ[$1];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $0++) {
	for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $1++) {
		for (int $2 = 0; $2 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $2++) {
			result += ((a[$0][$1][$2] * pX[$0]) * pY[$1]) * pZ[$2];
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int zLen = z.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = z.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((((xLen == 0) || (yLen == 0)) || (z.length == 0)) || (f.length == 0)) || (f[0].length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdZ.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xLen != dFdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdZ.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdZ.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xLen != d2FdXdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdZ.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdYdZ.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xLen != d2FdYdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdYdZ.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d3FdXdYdZ.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xLen != d3FdXdYdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d3FdXdYdZ.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathArrays.checkOrder(z)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zval = z.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int lastK = zLen - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = zLen - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: splines = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction[lastI][lastJ][lastK]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (dFdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d2FdXdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d2FdYdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d3FdXdYdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (f[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (dFdX[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (dFdY[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (dFdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d2FdXdY[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d2FdXdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d2FdYdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d3FdXdYdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int kp1 = k + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = k + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] beta = new double[]{ 
f[i][j][k], f[ip1][j][k], 
f[i][jp1][k], f[ip1][jp1][k], 
f[i][j][kp1], f[ip1][j][kp1], 
f[i][jp1][kp1], f[ip1][jp1][kp1], 

dFdX[i][j][k], dFdX[ip1][j][k], 
dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

dFdY[i][j][k], dFdY[ip1][j][k], 
dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

dFdZ[i][j][k], dFdZ[ip1][j][k], 
dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 
f[i][j][k], f[ip1][j][k], 
f[i][jp1][k], f[ip1][jp1][k], 
f[i][j][kp1], f[ip1][j][kp1], 
f[i][jp1][kp1], f[ip1][jp1][kp1], 

dFdX[i][j][k], dFdX[ip1][j][k], 
dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

dFdY[i][j][k], dFdY[ip1][j][k], 
dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

dFdZ[i][j][k], dFdZ[ip1][j][k], 
dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int kp1 = $0 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] beta = new double[]{ 
f[i][j][$0], f[ip1][j][$0], 
f[i][jp1][$0], f[ip1][jp1][$0], 
f[i][j][$1], f[ip1][j][$1], 
f[i][jp1][$1], f[ip1][jp1][$1], 

dFdX[i][j][$0], dFdX[ip1][j][$0], 
dFdX[i][jp1][$0], dFdX[ip1][jp1][$0], 
dFdX[i][j][$1], dFdX[ip1][j][$1], 
dFdX[i][jp1][$1], dFdX[ip1][jp1][$1], 

dFdY[i][j][$0], dFdY[ip1][j][$0], 
dFdY[i][jp1][$0], dFdY[ip1][jp1][$0], 
dFdY[i][j][$1], dFdY[ip1][j][$1], 
dFdY[i][jp1][$1], dFdY[ip1][jp1][$1], 

dFdZ[i][j][$0], dFdZ[ip1][j][$0], 
dFdZ[i][jp1][$0], dFdZ[ip1][jp1][$0], 
dFdZ[i][j][$1], dFdZ[ip1][j][$1], 
dFdZ[i][jp1][$1], dFdZ[ip1][jp1][$1], 

d2FdXdY[i][j][$0], d2FdXdY[ip1][j][$0], 
d2FdXdY[i][jp1][$0], d2FdXdY[ip1][jp1][$0], 
d2FdXdY[i][j][$1], d2FdXdY[ip1][j][$1], 
d2FdXdY[i][jp1][$1], d2FdXdY[ip1][jp1][$1], 

d2FdXdZ[i][j][$0], d2FdXdZ[ip1][j][$0], 
d2FdXdZ[i][jp1][$0], d2FdXdZ[ip1][jp1][$0], 
d2FdXdZ[i][j][$1], d2FdXdZ[ip1][j][$1], 
d2FdXdZ[i][jp1][$1], d2FdXdZ[ip1][jp1][$1], 

d2FdYdZ[i][j][$0], d2FdYdZ[ip1][j][$0], 
d2FdYdZ[i][jp1][$0], d2FdYdZ[ip1][jp1][$0], 
d2FdYdZ[i][j][$1], d2FdYdZ[ip1][j][$1], 
d2FdYdZ[i][jp1][$1], d2FdYdZ[ip1][jp1][$1], 

d3FdXdYdZ[i][j][$0], d3FdXdYdZ[ip1][j][$0], 
d3FdXdYdZ[i][jp1][$0], d3FdXdYdZ[ip1][jp1][$0], 
d3FdXdYdZ[i][j][$1], d3FdXdYdZ[ip1][j][$1], 
d3FdXdYdZ[i][jp1][$1], d3FdXdYdZ[ip1][jp1][$1] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < lastK; $0++) {
	final int $1 = $0 + 1;

	final double[] $2 = new double[]{ 
	f[i][j][$0], f[ip1][j][$0], 
	f[i][jp1][$0], f[ip1][jp1][$0], 
	f[i][j][$1], f[ip1][j][$1], 
	f[i][jp1][$1], f[ip1][jp1][$1], 

	dFdX[i][j][$0], dFdX[ip1][j][$0], 
	dFdX[i][jp1][$0], dFdX[ip1][jp1][$0], 
	dFdX[i][j][$1], dFdX[ip1][j][$1], 
	dFdX[i][jp1][$1], dFdX[ip1][jp1][$1], 

	dFdY[i][j][$0], dFdY[ip1][j][$0], 
	dFdY[i][jp1][$0], dFdY[ip1][jp1][$0], 
	dFdY[i][j][$1], dFdY[ip1][j][$1], 
	dFdY[i][jp1][$1], dFdY[ip1][jp1][$1], 

	dFdZ[i][j][$0], dFdZ[ip1][j][$0], 
	dFdZ[i][jp1][$0], dFdZ[ip1][jp1][$0], 
	dFdZ[i][j][$1], dFdZ[ip1][j][$1], 
	dFdZ[i][jp1][$1], dFdZ[ip1][jp1][$1], 

	d2FdXdY[i][j][$0], d2FdXdY[ip1][j][$0], 
	d2FdXdY[i][jp1][$0], d2FdXdY[ip1][jp1][$0], 
	d2FdXdY[i][j][$1], d2FdXdY[ip1][j][$1], 
	d2FdXdY[i][jp1][$1], d2FdXdY[ip1][jp1][$1], 

	d2FdXdZ[i][j][$0], d2FdXdZ[ip1][j][$0], 
	d2FdXdZ[i][jp1][$0], d2FdXdZ[ip1][jp1][$0], 
	d2FdXdZ[i][j][$1], d2FdXdZ[ip1][j][$1], 
	d2FdXdZ[i][jp1][$1], d2FdXdZ[ip1][jp1][$1], 

	d2FdYdZ[i][j][$0], d2FdYdZ[ip1][j][$0], 
	d2FdYdZ[i][jp1][$0], d2FdYdZ[ip1][jp1][$0], 
	d2FdYdZ[i][j][$1], d2FdYdZ[ip1][j][$1], 
	d2FdYdZ[i][jp1][$1], d2FdYdZ[ip1][jp1][$1], 

	d3FdXdYdZ[i][j][$0], d3FdXdYdZ[ip1][j][$0], 
	d3FdXdYdZ[i][jp1][$0], d3FdXdYdZ[ip1][jp1][$0], 
	d3FdXdYdZ[i][j][$1], d3FdXdYdZ[ip1][j][$1], 
	d3FdXdYdZ[i][jp1][$1], d3FdXdYdZ[ip1][jp1][$1] };


	splines[i][j][$0] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients($2));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int jp1 = $0 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int kp1 = $2 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] beta = new double[]{ 
f[i][$0][$2], f[ip1][$0][$2], 
f[i][$1][$2], f[ip1][$1][$2], 
f[i][$0][$3], f[ip1][$0][$3], 
f[i][$1][$3], f[ip1][$1][$3], 

dFdX[i][$0][$2], dFdX[ip1][$0][$2], 
dFdX[i][$1][$2], dFdX[ip1][$1][$2], 
dFdX[i][$0][$3], dFdX[ip1][$0][$3], 
dFdX[i][$1][$3], dFdX[ip1][$1][$3], 

dFdY[i][$0][$2], dFdY[ip1][$0][$2], 
dFdY[i][$1][$2], dFdY[ip1][$1][$2], 
dFdY[i][$0][$3], dFdY[ip1][$0][$3], 
dFdY[i][$1][$3], dFdY[ip1][$1][$3], 

dFdZ[i][$0][$2], dFdZ[ip1][$0][$2], 
dFdZ[i][$1][$2], dFdZ[ip1][$1][$2], 
dFdZ[i][$0][$3], dFdZ[ip1][$0][$3], 
dFdZ[i][$1][$3], dFdZ[ip1][$1][$3], 

d2FdXdY[i][$0][$2], d2FdXdY[ip1][$0][$2], 
d2FdXdY[i][$1][$2], d2FdXdY[ip1][$1][$2], 
d2FdXdY[i][$0][$3], d2FdXdY[ip1][$0][$3], 
d2FdXdY[i][$1][$3], d2FdXdY[ip1][$1][$3], 

d2FdXdZ[i][$0][$2], d2FdXdZ[ip1][$0][$2], 
d2FdXdZ[i][$1][$2], d2FdXdZ[ip1][$1][$2], 
d2FdXdZ[i][$0][$3], d2FdXdZ[ip1][$0][$3], 
d2FdXdZ[i][$1][$3], d2FdXdZ[ip1][$1][$3], 

d2FdYdZ[i][$0][$2], d2FdYdZ[ip1][$0][$2], 
d2FdYdZ[i][$1][$2], d2FdYdZ[ip1][$1][$2], 
d2FdYdZ[i][$0][$3], d2FdYdZ[ip1][$0][$3], 
d2FdYdZ[i][$1][$3], d2FdYdZ[ip1][$1][$3], 

d3FdXdYdZ[i][$0][$2], d3FdXdYdZ[ip1][$0][$2], 
d3FdXdYdZ[i][$1][$2], d3FdXdYdZ[ip1][$1][$2], 
d3FdXdYdZ[i][$0][$3], d3FdXdYdZ[ip1][$0][$3], 
d3FdXdYdZ[i][$1][$3], d3FdXdYdZ[ip1][$1][$3] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < lastJ; $0++) {
	if (f[i][$0].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][$0].length, zLen);
	}
	if (dFdX[i][$0].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][$0].length, zLen);
	}
	if (dFdY[i][$0].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][$0].length, zLen);
	}
	if (dFdZ[i][$0].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][$0].length, zLen);
	}
	if (d2FdXdY[i][$0].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][$0].length, zLen);
	}
	if (d2FdXdZ[i][$0].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][$0].length, zLen);
	}
	if (d2FdYdZ[i][$0].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][$0].length, zLen);
	}
	if (d3FdXdYdZ[i][$0].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][$0].length, zLen);
	}

	final int $1 = $0 + 1;
	for (int $2 = 0; $2 < lastK; $2++) {
		final int $3 = $2 + 1;

		final double[] $4 = new double[]{ 
		f[i][$0][$2], f[ip1][$0][$2], 
		f[i][$1][$2], f[ip1][$1][$2], 
		f[i][$0][$3], f[ip1][$0][$3], 
		f[i][$1][$3], f[ip1][$1][$3], 

		dFdX[i][$0][$2], dFdX[ip1][$0][$2], 
		dFdX[i][$1][$2], dFdX[ip1][$1][$2], 
		dFdX[i][$0][$3], dFdX[ip1][$0][$3], 
		dFdX[i][$1][$3], dFdX[ip1][$1][$3], 

		dFdY[i][$0][$2], dFdY[ip1][$0][$2], 
		dFdY[i][$1][$2], dFdY[ip1][$1][$2], 
		dFdY[i][$0][$3], dFdY[ip1][$0][$3], 
		dFdY[i][$1][$3], dFdY[ip1][$1][$3], 

		dFdZ[i][$0][$2], dFdZ[ip1][$0][$2], 
		dFdZ[i][$1][$2], dFdZ[ip1][$1][$2], 
		dFdZ[i][$0][$3], dFdZ[ip1][$0][$3], 
		dFdZ[i][$1][$3], dFdZ[ip1][$1][$3], 

		d2FdXdY[i][$0][$2], d2FdXdY[ip1][$0][$2], 
		d2FdXdY[i][$1][$2], d2FdXdY[ip1][$1][$2], 
		d2FdXdY[i][$0][$3], d2FdXdY[ip1][$0][$3], 
		d2FdXdY[i][$1][$3], d2FdXdY[ip1][$1][$3], 

		d2FdXdZ[i][$0][$2], d2FdXdZ[ip1][$0][$2], 
		d2FdXdZ[i][$1][$2], d2FdXdZ[ip1][$1][$2], 
		d2FdXdZ[i][$0][$3], d2FdXdZ[ip1][$0][$3], 
		d2FdXdZ[i][$1][$3], d2FdXdZ[ip1][$1][$3], 

		d2FdYdZ[i][$0][$2], d2FdYdZ[ip1][$0][$2], 
		d2FdYdZ[i][$1][$2], d2FdYdZ[ip1][$1][$2], 
		d2FdYdZ[i][$0][$3], d2FdYdZ[ip1][$0][$3], 
		d2FdYdZ[i][$1][$3], d2FdYdZ[ip1][$1][$3], 

		d3FdXdYdZ[i][$0][$2], d3FdXdYdZ[ip1][$0][$2], 
		d3FdXdYdZ[i][$1][$2], d3FdXdYdZ[ip1][$1][$2], 
		d3FdXdYdZ[i][$0][$3], d3FdXdYdZ[ip1][$0][$3], 
		d3FdXdYdZ[i][$1][$3], d3FdXdYdZ[ip1][$1][$3] };


		splines[i][$0][$2] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients($4));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int ip1 = $0 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int jp1 = $2 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int kp1 = $4 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] beta = new double[]{ 
f[$0][$2][$4], f[$1][$2][$4], 
f[$0][$3][$4], f[$1][$3][$4], 
f[$0][$2][$5], f[$1][$2][$5], 
f[$0][$3][$5], f[$1][$3][$5], 

dFdX[$0][$2][$4], dFdX[$1][$2][$4], 
dFdX[$0][$3][$4], dFdX[$1][$3][$4], 
dFdX[$0][$2][$5], dFdX[$1][$2][$5], 
dFdX[$0][$3][$5], dFdX[$1][$3][$5], 

dFdY[$0][$2][$4], dFdY[$1][$2][$4], 
dFdY[$0][$3][$4], dFdY[$1][$3][$4], 
dFdY[$0][$2][$5], dFdY[$1][$2][$5], 
dFdY[$0][$3][$5], dFdY[$1][$3][$5], 

dFdZ[$0][$2][$4], dFdZ[$1][$2][$4], 
dFdZ[$0][$3][$4], dFdZ[$1][$3][$4], 
dFdZ[$0][$2][$5], dFdZ[$1][$2][$5], 
dFdZ[$0][$3][$5], dFdZ[$1][$3][$5], 

d2FdXdY[$0][$2][$4], d2FdXdY[$1][$2][$4], 
d2FdXdY[$0][$3][$4], d2FdXdY[$1][$3][$4], 
d2FdXdY[$0][$2][$5], d2FdXdY[$1][$2][$5], 
d2FdXdY[$0][$3][$5], d2FdXdY[$1][$3][$5], 

d2FdXdZ[$0][$2][$4], d2FdXdZ[$1][$2][$4], 
d2FdXdZ[$0][$3][$4], d2FdXdZ[$1][$3][$4], 
d2FdXdZ[$0][$2][$5], d2FdXdZ[$1][$2][$5], 
d2FdXdZ[$0][$3][$5], d2FdXdZ[$1][$3][$5], 

d2FdYdZ[$0][$2][$4], d2FdYdZ[$1][$2][$4], 
d2FdYdZ[$0][$3][$4], d2FdYdZ[$1][$3][$4], 
d2FdYdZ[$0][$2][$5], d2FdYdZ[$1][$2][$5], 
d2FdYdZ[$0][$3][$5], d2FdYdZ[$1][$3][$5], 

d3FdXdYdZ[$0][$2][$4], d3FdXdYdZ[$1][$2][$4], 
d3FdXdYdZ[$0][$3][$4], d3FdXdYdZ[$1][$3][$4], 
d3FdXdYdZ[$0][$2][$5], d3FdXdYdZ[$1][$2][$5], 
d3FdXdYdZ[$0][$3][$5], d3FdXdYdZ[$1][$3][$5] }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < lastI; $0++) {
	if (f[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[$0].length, yLen);
	}
	if (dFdX[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[$0].length, yLen);
	}
	if (dFdY[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[$0].length, yLen);
	}
	if (dFdZ[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[$0].length, yLen);
	}
	if (d2FdXdY[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[$0].length, yLen);
	}
	if (d2FdXdZ[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[$0].length, yLen);
	}
	if (d2FdYdZ[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[$0].length, yLen);
	}
	if (d3FdXdYdZ[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[$0].length, yLen);
	}

	final int $1 = $0 + 1;
	for (int $2 = 0; $2 < lastJ; $2++) {
		if (f[$0][$2].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(f[$0][$2].length, zLen);
		}
		if (dFdX[$0][$2].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[$0][$2].length, zLen);
		}
		if (dFdY[$0][$2].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[$0][$2].length, zLen);
		}
		if (dFdZ[$0][$2].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[$0][$2].length, zLen);
		}
		if (d2FdXdY[$0][$2].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[$0][$2].length, zLen);
		}
		if (d2FdXdZ[$0][$2].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[$0][$2].length, zLen);
		}
		if (d2FdYdZ[$0][$2].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[$0][$2].length, zLen);
		}
		if (d3FdXdYdZ[$0][$2].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[$0][$2].length, zLen);
		}

		final int $3 = $2 + 1;
		for (int $4 = 0; $4 < lastK; $4++) {
			final int $5 = $4 + 1;

			final double[] $6 = new double[]{ 
			f[$0][$2][$4], f[$1][$2][$4], 
			f[$0][$3][$4], f[$1][$3][$4], 
			f[$0][$2][$5], f[$1][$2][$5], 
			f[$0][$3][$5], f[$1][$3][$5], 

			dFdX[$0][$2][$4], dFdX[$1][$2][$4], 
			dFdX[$0][$3][$4], dFdX[$1][$3][$4], 
			dFdX[$0][$2][$5], dFdX[$1][$2][$5], 
			dFdX[$0][$3][$5], dFdX[$1][$3][$5], 

			dFdY[$0][$2][$4], dFdY[$1][$2][$4], 
			dFdY[$0][$3][$4], dFdY[$1][$3][$4], 
			dFdY[$0][$2][$5], dFdY[$1][$2][$5], 
			dFdY[$0][$3][$5], dFdY[$1][$3][$5], 

			dFdZ[$0][$2][$4], dFdZ[$1][$2][$4], 
			dFdZ[$0][$3][$4], dFdZ[$1][$3][$4], 
			dFdZ[$0][$2][$5], dFdZ[$1][$2][$5], 
			dFdZ[$0][$3][$5], dFdZ[$1][$3][$5], 

			d2FdXdY[$0][$2][$4], d2FdXdY[$1][$2][$4], 
			d2FdXdY[$0][$3][$4], d2FdXdY[$1][$3][$4], 
			d2FdXdY[$0][$2][$5], d2FdXdY[$1][$2][$5], 
			d2FdXdY[$0][$3][$5], d2FdXdY[$1][$3][$5], 

			d2FdXdZ[$0][$2][$4], d2FdXdZ[$1][$2][$4], 
			d2FdXdZ[$0][$3][$4], d2FdXdZ[$1][$3][$4], 
			d2FdXdZ[$0][$2][$5], d2FdXdZ[$1][$2][$5], 
			d2FdXdZ[$0][$3][$5], d2FdXdZ[$1][$3][$5], 

			d2FdYdZ[$0][$2][$4], d2FdYdZ[$1][$2][$4], 
			d2FdYdZ[$0][$3][$4], d2FdYdZ[$1][$3][$4], 
			d2FdYdZ[$0][$2][$5], d2FdYdZ[$1][$2][$5], 
			d2FdYdZ[$0][$3][$5], d2FdYdZ[$1][$3][$5], 

			d3FdXdYdZ[$0][$2][$4], d3FdXdYdZ[$1][$2][$4], 
			d3FdXdYdZ[$0][$3][$4], d3FdXdYdZ[$1][$3][$4], 
			d3FdXdYdZ[$0][$2][$5], d3FdXdYdZ[$1][$2][$5], 
			d3FdXdYdZ[$0][$3][$5], d3FdXdYdZ[$1][$3][$5] };


			splines[$0][$2][$4] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients($6));
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int k = searchIndex(z, zval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = searchIndex(z, zval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.OutOfRangeException(z, zval[0], zval[zval.length - 1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k == (-1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(z, zval[0], zval[zval.length - 1]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double zN = (z - zval[k]) / (zval[k + 1] - zval[k])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (z - zval[k]) / (zval[k + 1] - zval[k])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return splines[i][j][k].value(xN, yN, zN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int sz = 64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = 64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] a = new double[sz]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[sz]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] row = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < sz; $0++) {
	result += row[$0] * beta[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] row = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < sz; $0++) {
	double $1 = 0;
	final double[] $2 = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[$0];
	for (int $3 = 0; $3 < sz; $3++) {
		$1 += $2[$3] * beta[$3];
	}
	a[$0] = $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((((xval.length == 0) || (yval.length == 0)) || (zval.length == 0)) || (fval.length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathArrays.checkOrder(zval)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int zLen = zval.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = zval.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][][] fvalXY = new double[zLen][xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][][] $0 = new double[zLen][xLen][yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][][] fvalZX = new double[yLen][zLen][xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][][] $0 = new double[yLen][zLen][xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (fval[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double v = fval[i][j][k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = fval[i][j][k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: fvalXY[k][i][j] = v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: fvalZX[j][k][i] = v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double v = fval[i][j][$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < zLen; $0++) {
	final double $1 = fval[i][j][$0];
	fvalXY[$0][i][j] = $1;
	fvalZX[j][$0][i] = $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double v = fval[i][$0][$1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	if (fval[i][$0].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][$0].length, zLen);
	}

	for (int $1 = 0; $1 < zLen; $1++) {
		final double $2 = fval[i][$0][$1];
		fvalXY[$1][i][$0] = $2;
		fvalZX[$0][$1][i] = $2;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double v = fval[$0][$1][$2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	if (fval[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$0].length, yLen);
	}

	for (int $1 = 0; $1 < yLen; $1++) {
		if (fval[$0][$1].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$0][$1].length, zLen);
		}

		for (int $2 = 0; $2 < zLen; $2++) {
			final double $3 = fval[$0][$1][$2];
			fvalXY[$2][$0][$1] = $3;
			fvalZX[$1][$2][$0] = $3;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator bsi = new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator $0 = new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] xSplineYZ = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] $0 = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[xLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xSplineYZ[i] = bsi.interpolate(yval, zval, fval[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < xLen; $0++) {
	xSplineYZ[$0] = bsi.interpolate(yval, zval, fval[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] ySplineZX = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] $0 = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[yLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ySplineZX[j] = bsi.interpolate(zval, xval, fvalZX[j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yLen; $0++) {
	ySplineZX[$0] = bsi.interpolate(zval, xval, fvalZX[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] zSplineXY = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[zLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] $0 = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[zLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zSplineXY[k] = bsi.interpolate(xval, yval, fvalXY[k])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < zLen; $0++) {
	zSplineXY[$0] = bsi.interpolate(xval, yval, fvalXY[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][][] dFdX = new double[xLen][yLen][zLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][][] $0 = new double[xLen][yLen][zLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][][] dFdY = new double[xLen][yLen][zLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][][] $0 = new double[xLen][yLen][zLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[][][] d2FdXdY = new double[xLen][yLen][zLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[][][] $0 = new double[xLen][yLen][zLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = zSplineXY[k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $0 = zSplineXY[k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y = yval[j]
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 1
spoon.refactoring.RefactoringException: CtLocalVariableImpl with name $0 is in conflict.
spoon.refactoring.RefactoringException: CtLocalVariableImpl with name $0 is in conflict.
	at spoon.refactoring.CtRenameLocalVariableRefactoring.createNameConflictIssue(CtRenameLocalVariableRefactoring.java:243)
	at spoon.refactoring.CtRenameLocalVariableRefactoring.detectNameConflicts(CtRenameLocalVariableRefactoring.java:147)
	at spoon.refactoring.AbstractRenameRefactoring.detectIssues(AbstractRenameRefactoring.java:45)
	at spoon.refactoring.AbstractRenameRefactoring.refactor(AbstractRenameRefactoring.java:37)
	at spoon.refactoring.Refactoring.changeLocalVariableName(Refactoring.java:206)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:122)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$0(LevenSearchStrategy.java:49)
	at java.util.ArrayList.forEach(ArrayList.java:1249)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:49)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:207)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:251)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:222)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 2.133
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:186) - 
 --SOLUTIONS DESCRIPTION--


Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-18
TOTAL_TIME=2.133
NR_GENERATIONS=1
NR_RIGHT_COMPILATIONS=null
NR_FAILLING_COMPILATIONS=null
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=ERROR

Patch stats:

[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:212) - Time Total(s): 4137.594


Node: 66dd0116a93c



Date: Mon Oct 28 03:13:37 EDT 2019

cd /script/jGenProg_Defects4J_Math_18;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-18 \
	-failing org.apache.commons.math3.optimization.direct.CMAESOptimizerTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Math_18/target/classes/:/script/jGenProg_Defects4J_Math_18/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

