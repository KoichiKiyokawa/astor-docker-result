Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO ] fr.inria.astor.core.setup.ProjectConfiguration.getVersionJDK(ProjectConfiguration.java:282) - Version of the JVM used: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:383) - Java version of the JDK used to run tests: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:384) - The compliance of the JVM is:  7
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:662) - command line arguments: [-mode  jgenprog  -location  .  -id  Math-11  -failing  org.apache.commons.math3.distribution.MultivariateNormalDistributionTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Math_11/target/classes/:/script/jGenProg_Defects4J_Math_11/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.main.evolution.AstorMain.execute(AstorMain.java:228) - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:964) - Source folders: [/script/jGenProg_Defects4J_Math_11/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:983) - Source Test folders: [/script/jGenProg_Defects4J_Math_11/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:105) - mode is Leven
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_11/./output_astor/AstorMain-Math-11//bin//default from 758 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_11/./output_astor/AstorMain-Math-11//bin//default, /script/jGenProg_Defects4J_Math_11/target/classes/, /script/jGenProg_Defects4J_Math_11/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testPrimitiveRemainder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testRemainder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828Cycle
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.linear.DiagonalMatrixTest#testSetNonDiagonalEntry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4573, fails: 46, GZoltar suspicious 32907, with positive susp 3181
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4573
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 1000 with susp > 0.1, we consider: 1000
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:955) - Setting up the max to 8204220 milliseconds (8204 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:801) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_11/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:70) - building model: /script/jGenProg_Defects4J_Math_11/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:84) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_11/target/classes/, /script/jGenProg_Defects4J_Math_11/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:836) - Number of CtTypes created: 696
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.2211629342323457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.2211629342323457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.2211629342323457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.2211629342323457]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=68, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=69, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=71, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=72, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=73, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=74, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=75, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=76, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=77, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=78, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=79, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=81, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=53, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=54, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=55, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=56, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=57, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=58, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=59, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=60, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=39, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=40, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=43, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=44, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=45, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=46, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=47, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunction()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction;, lineNumber=51, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunctionGradient()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient;, lineNumber=66, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/gradient/CircleScalar;)Ljava/util/ArrayList;, lineNumber=31, susp=0.20851441405707477]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.16427570345801806]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.16427570345801806]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.1504823163572115]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=116, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=117, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=118, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=120, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=121, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=113, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=114, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=125, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=126, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=130, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/LineSearch;)Lorg/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer;, lineNumber=35, susp=0.1430397079704303]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 1000,  319
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 319
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 319, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_11/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 8204220
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.distribution.MultivariateNormalDistributionTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-11
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_11/target/classes/:/script/jGenProg_Defects4J_Math_11/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return finalRemB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (s))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.floor(result + 0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(n)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, k))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientLog(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return logSum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.exp(org.apache.commons.math3.util.ArithmeticUtils.factorialLog(n)) + 0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(a + b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (bl))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a << shift
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(u) + org.apache.commons.math3.util.FastMath.abs(v)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-u) * (1L << k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (m))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ret
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return k.pow(e)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return stirlingS2[n][k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (1L << (n - 1)) - 1L
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (n > 0) && ((n & (n - 1)) == 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return roundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return scale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.add(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.subtract(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.negate())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.divide(a.d, scale, roundingMode))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(java.math.BigDecimal.ONE.divide(d, scale, roundingMode))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.multiply(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.multiply(new java.math.BigDecimal(n)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d.compareTo(a.d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d.doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d.equals(((org.apache.commons.math3.util.BigReal) (other)).d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigRealField.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigRealField.LazyHolder.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigReal.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigReal.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigReal.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return nf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return number
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return toAppendTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, maxIterations)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return hN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64Field.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(this.value + a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(this.value - a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(-this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(this.value * a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(n * this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(this.value / a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(1.0 / this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((byte) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((short) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((long) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.compare(this.value, o.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
that.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (v ^ (v >>> 32)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.toString(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.isInfinite(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.isNaN(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64Field.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((java.lang.Number) (o)).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.valueOf(o.toString()).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return other instanceof org.apache.commons.math3.util.DefaultTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 401993047
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble(xl)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.sqrt(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (0.5 * t) * t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 0.5 * org.apache.commons.math3.util.FastMath.exp(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((-0.5) * t) * t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(a + org.apache.commons.math3.util.FastMath.sqrt((a * a) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return negative ? -absAsinh : absAsinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return negative ? -absAtanh : absAtanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.random()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.expm1(x, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((-1.0) + hiPrec[0]) + hiPrec[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(x, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return lores
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return y * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(x) / org.apache.commons.math3.util.FastMath.log(base)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.pow(-x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow(-x, y) : -org.apache.commons.math3.util.FastMath.pow(-x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return resultHigh + resultLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.sinQ(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return est + err
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -java.lang.Math.PI
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_3_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_3_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.atan(r, 0, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI / 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-java.lang.Math.PI) / 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.atan(ra, rb, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.atan(ra, rb, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return est
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x < 0 ? -x : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x < 0L ? -x : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x < 0.0F ? -x : x == 0.0F ? 0.0F : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x < 0.0 ? -x : x == 0.0 ? 0.0 : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Double.longBitsToDouble(java.lang.Double.doubleToLongBits(x) ^ 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Float.intBitsToFloat(java.lang.Float.floatToIntBits(x) ^ 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d > 0 ? 0.0 : -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble(sign | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sign == 0L ? 0.0 : -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f * java.lang.Float.intBitsToFloat((n + 127) << 23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f > 0 ? 0.0F : -0.0F
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.intBitsToFloat(sign | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sign == 0 ? 0.0F : -0.0F
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return direction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (direction))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return y + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (z & 1) == 0 ? y : y + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((long) (org.apache.commons.math3.util.FastMath.floor(x + 0.5)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (org.apache.commons.math3.util.FastMath.floor(x + 0.5F)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a <= b ? a : b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a <= b ? b : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.StrictMath.IEEEremainder(dividend, divisor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return magnitude
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -magnitude
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) ((java.lang.Double.doubleToLongBits(d) >>> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((java.lang.Float.floatToIntBits(f) >>> 23) & 0xff) - 127
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return finalK
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return finalRemA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ys[0] + ys[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return "Double.NaN,"
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,"
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return maximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return count < maximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return iterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return iterations.getCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return iterations.getMaximalCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.sqrt(sum)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.MathArrays.checkOrder(val, dir, strict, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return norm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.MathArrays.copyOf(source, source.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return output
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return !((x == null) ^ (y == null))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return out
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new java.lang.Double(value).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.util.Arrays.hashCode(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a - (org.apache.commons.math3.util.MathUtils.TWO_PI * org.apache.commons.math3.util.FastMath.floor(((a + org.apache.commons.math3.util.FastMath.PI) - center) / org.apache.commons.math3.util.MathUtils.TWO_PI))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (a - (p * org.apache.commons.math3.util.FastMath.floor((a - offset) / p))) - offset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((byte) (-magnitude))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((short) (-magnitude))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ++count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.MathArrays.copyOf(counter)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return counter[dim]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.MultidimensionalCounter.Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return dimension
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return indices
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return count + c[last]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return totalSize
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.MathArrays.copyOf(size)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sb.toString()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return capacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToDoubleHashMap.nextPowerOfTwo(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Integer.highestOneBit(i) << 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return hash & 0x7fffffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(keys, states, key, mask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return index
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return firstRemoved
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (((j << 2) + j) + perturb) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-index) - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return doRemove(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((key != 0) || (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL)) && (keys[index] == key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return previous
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return size > ((mask + 1) * org.apache.commons.math3.util.OpenIntToDoubleHashMap.LOAD_FACTOR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (h ^ (h >>> 7)) ^ (h >>> 4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return next >= 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return keys[current]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return values[current]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToFieldHashMap.nextPowerOfTwo(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(keys, states, key, mask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((key != 0) || (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL)) && (keys[index] == key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return size > ((mask + 1) * org.apache.commons.math3.util.OpenIntToFieldHashMap.LOAD_FACTOR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((T[]) (java.lang.reflect.Array.newInstance(field.getRuntimeClass(), length)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (key == null ? 
oP.key == null : 
key.equals(oP.key)) && 
(value == null ? 
oP.value == null : 
value.equals(oP.value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Precision.equals(x, y, 1) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Precision.equalsIncludingNaN(x, y) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (isEqual && (!java.lang.Float.isNaN(x))) && (!java.lang.Float.isNaN(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return relativeDifference <= eps
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (isEqual && (!java.lang.Double.isNaN(x))) && (!java.lang.Double.isNaN(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Precision.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new java.math.BigDecimal(
java.lang.Double.toString(x)).setScale(
scale, roundingMethod).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (org.apache.commons.math3.util.Precision.roundUnscaled(x * factor, sign, roundingMethod))) / factor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return unscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (x + originalDelta) - x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return discarded
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (getContractionCriterion()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return internalArray[startIndex + index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return elementArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (expansionFactor))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return internalArray.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return internalArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f.evaluate(internalArray, startIndex, numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (internalArray.length / ((float) (numElements))) > contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (internalArray.length - numElements) > contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.util.Arrays.equals(internalArray, other.internalArray)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.util.Arrays.hashCode(hashData)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.containsKey(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.containsValue(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.get(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.put(key, transformer)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.remove(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.keySet()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.values()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return hash
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:73) - modif code: return finalRemB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return finalRemB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return finalRemA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return finalK
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return firstRemoved
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return scale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return indices
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return index
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return number
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return norm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return totalSize
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return unscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return discarded
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((int) (m))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((int) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return maximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return map.values()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((int) (s))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return logSum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ret
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return k.pow(e)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return nf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return lores
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return est + err
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return est
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return f
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return direction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return sum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return dimension
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return capacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return internalArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return hash
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((long) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((int) (bl))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return d.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return counter[dim]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (-index) - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return iterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((float) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return d.doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return hN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return 401993047
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return -1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return y * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return x * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return y + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return magnitude
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return output
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return out
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ++count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return previous
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return next >= 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((byte) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return roundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return elementArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return map.get(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return map.keySet()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((short) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return a << shift
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return toAppendTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return -magnitude
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return count + c[last]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return internalArray.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return "Double.NaN,"
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return keys[current]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (x + originalDelta) - x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return stirlingS2[n][k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return map.containsValue(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Math.PI
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return count < maximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return map.containsKey(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return doRemove(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return values[current]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return map.remove(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return -java.lang.Math.PI
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((float) (direction))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return iterations.getCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (0.5 * t) * t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ys[0] + ys[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return sb.toString()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return d.compareTo(a.d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Float.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Math.random()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return x < 0 ? -x : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return a <= b ? a : b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return a <= b ? b : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((float) (expansionFactor))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Math.PI / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((byte) (-magnitude))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return x < 0L ? -x : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return iterations.getMaximalCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return relativeDifference <= eps
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Math.sqrt(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return resultHigh + resultLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((short) (-magnitude))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (-u) * (1L << k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((-0.5) * t) * t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Math.PI / 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return sign == 0L ? 0.0 : -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (1L << (n - 1)) - 1L
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return f > 0 ? 0.0F : -0.0F
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.isInfinite(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return hash & 0x7fffffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((int) (v ^ (v >>> 32)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return sign == 0 ? 0.0F : -0.0F
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.toString(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return map.put(key, transformer)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return d > 0 ? 0.0 : -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.isNaN(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return internalArray[startIndex + index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (-java.lang.Math.PI) / 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return negative ? -absAsinh : absAsinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return negative ? -absAtanh : absAtanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return !((x == null) ^ (y == null))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.util.Arrays.hashCode(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.BigReal.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.longBitsToDouble(xl)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((float) (getContractionCriterion()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return f.evaluate(internalArray, startIndex, numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.BigReal.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((java.lang.Number) (o)).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new java.lang.Double(value).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.BigReal.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.Decimal64.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Integer.highestOneBit(i) << 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.util.Arrays.hashCode(hashData)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.Decimal64.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.Decimal64.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((-1.0) + hiPrec[0]) + hiPrec[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Float.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.valueOf(o.toString()).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (((j << 2) + j) + perturb) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (z & 1) == 0 ? y : y + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.compare(this.value, o.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (n > 0) && ((n & (n - 1)) == 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (h ^ (h >>> 7)) ^ (h >>> 4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Float.intBitsToFloat(sign | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.BigReal(d.add(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.BigReal(d.negate())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.BigReal(d.multiply(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.Decimal64Field.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.expm1(x, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.sqrt(sum)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (internalArray.length - numElements) > contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.longBitsToDouble(sign | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.log(n)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.abs(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.abs(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.BigRealField.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.Decimal64(-this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return 0.5 * org.apache.commons.math3.util.FastMath.exp(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return f * java.lang.Float.intBitsToFloat((n + 127) << 23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.BigReal(d.subtract(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.Decimal64Field.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.StrictMath.IEEEremainder(dividend, divisor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.Decimal64(n * this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.util.Arrays.equals(internalArray, other.internalArray)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return other instanceof org.apache.commons.math3.util.DefaultTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.abs(a + b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.pow(-x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.sinQ(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return d.equals(((org.apache.commons.math3.util.BigReal) (other)).d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.Decimal64(1.0 / this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return x < 0.0 ? -x : x == 0.0 ? 0.0 : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.MathArrays.copyOf(counter)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.BigRealField.LazyHolder.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.log(x, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((java.lang.Float.floatToIntBits(f) >>> 23) & 0xff) - 127
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.floor(result + 0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.atan(ra, rb, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((int) (org.apache.commons.math3.util.FastMath.floor(x + 0.5F)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((int) ((java.lang.Double.doubleToLongBits(d) >>> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.Decimal64(this.value + a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.Decimal64(this.value - a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.Decimal64(this.value * a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.Decimal64(this.value / a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.MathArrays.copyOf(size)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (internalArray.length / ((float) (numElements))) > contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return x < 0.0F ? -x : x == 0.0F ? 0.0F : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.MultidimensionalCounter.Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.atan(r, 0, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.BigReal(d.multiply(new java.math.BigDecimal(n)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_3_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((long) (org.apache.commons.math3.util.FastMath.floor(x + 0.5)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.atan(ra, rb, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((T[]) (java.lang.reflect.Array.newInstance(field.getRuntimeClass(), length)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,"
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (isEqual && (!java.lang.Double.isNaN(x))) && (!java.lang.Double.isNaN(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_3_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.BigReal(d.divide(a.d, scale, roundingMode))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.MathArrays.copyOf(source, source.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientLog(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (isEqual && (!java.lang.Float.isNaN(x))) && (!java.lang.Float.isNaN(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new org.apache.commons.math3.util.BigReal(java.math.BigDecimal.ONE.divide(d, scale, roundingMode))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.Precision.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.MathArrays.checkOrder(val, dir, strict, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.OpenIntToFieldHashMap.nextPowerOfTwo(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.OpenIntToDoubleHashMap.nextPowerOfTwo(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return size > ((mask + 1) * org.apache.commons.math3.util.OpenIntToFieldHashMap.LOAD_FACTOR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return size > ((mask + 1) * org.apache.commons.math3.util.OpenIntToDoubleHashMap.LOAD_FACTOR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(keys, states, key, mask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(keys, states, key, mask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, maxIterations)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (a - (p * org.apache.commons.math3.util.FastMath.floor((a - offset) / p))) - offset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.abs(u) + org.apache.commons.math3.util.FastMath.abs(v)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
that.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.log(x) / org.apache.commons.math3.util.FastMath.log(base)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((float) (org.apache.commons.math3.util.Precision.roundUnscaled(x * factor, sign, roundingMethod))) / factor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return new java.math.BigDecimal(
java.lang.Double.toString(x)).setScale(
scale, roundingMethod).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.log(a + org.apache.commons.math3.util.FastMath.sqrt((a * a) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.Precision.equals(x, y, 1) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, k))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Double.longBitsToDouble(java.lang.Double.doubleToLongBits(x) ^ 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((key != 0) || (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL)) && (keys[index] == key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.Precision.equalsIncludingNaN(x, y) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return ((key != 0) || (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL)) && (keys[index] == key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Float.intBitsToFloat(java.lang.Float.floatToIntBits(x) ^ 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow(-x, y) : -org.apache.commons.math3.util.FastMath.pow(-x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return (key == null ? 
oP.key == null : 
key.equals(oP.key)) && 
(value == null ? 
oP.value == null : 
value.equals(oP.value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.exp(org.apache.commons.math3.util.ArithmeticUtils.factorialLog(n)) + 0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$1(LevenSearchStrategy.java:75) - baseElement: return a - (org.apache.commons.math3.util.MathUtils.TWO_PI * org.apache.commons.math3.util.FastMath.floor(((a + org.apache.commons.math3.util.FastMath.PI) - center) / org.apache.commons.math3.util.MathUtils.TWO_PI))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int len = msgPatterns.size()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = msgPatterns.size()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final java.util.List<java.lang.Object> $0 = new java.util.ArrayList<java.lang.Object>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: list.add(oR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.lang.Object oR
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (java.lang.Object $0 : org.apache.commons.math3.exception.util.ArgUtils.flatten(((java.lang.Object[]) (o)))) {
	list.add($0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: list.add(o)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.lang.Object oR
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (o instanceof java.lang.Object[]) {
	for (java.lang.Object $0 : org.apache.commons.math3.exception.util.ArgUtils.flatten(((java.lang.Object[]) (o)))) {
		list.add($0);
	}
} else {
	list.add(o);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.lang.Object o
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.lang.Object oR
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (java.lang.Object $0 : array) {
	if ($0 instanceof java.lang.Object[]) {
		for (java.lang.Object $1 : org.apache.commons.math3.exception.util.ArgUtils.flatten(((java.lang.Object[]) ($0)))) {
			list.add($1);
		}
	} else {
		list.add($0);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.lang.Object o
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.lang.Object oR
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (array != null) {
	for (java.lang.Object $0 : array) {
		if ($0 instanceof java.lang.Object[]) {
			for (java.lang.Object $1 : org.apache.commons.math3.exception.util.ArgUtils.flatten(((java.lang.Object[]) ($0)))) {
				list.add($1);
			}
		} else {
			list.add($0);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return list.toArray()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.source = source
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return source
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.throwable = throwable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: msgPatterns = new java.util.ArrayList<org.apache.commons.math3.exception.util.Localizable>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: msgArguments = new java.util.ArrayList<java.lang.Object[]>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: context = new java.util.HashMap<java.lang.String, java.lang.Object>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return throwable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: msgPatterns.add(pattern)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: msgArguments.add(org.apache.commons.math3.exception.util.ArgUtils.flatten(arguments))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: context.put(key, value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return context.get(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return context.keySet()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return getMessage(java.util.Locale.US)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return getMessage(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return buildMessage(locale, ": ")
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return buildMessage(locale, separator)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.lang.StringBuilder sb = new java.lang.StringBuilder()
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 2
spoon.refactoring.RefactoringException: CtLocalVariableImpl with name $0 is in conflict.
spoon.refactoring.RefactoringException: CtLocalVariableImpl with name $0 is in conflict.
	at spoon.refactoring.CtRenameLocalVariableRefactoring.createNameConflictIssue(CtRenameLocalVariableRefactoring.java:243)
	at spoon.refactoring.CtRenameLocalVariableRefactoring.detectNameConflicts(CtRenameLocalVariableRefactoring.java:147)
	at spoon.refactoring.AbstractRenameRefactoring.detectIssues(AbstractRenameRefactoring.java:45)
	at spoon.refactoring.AbstractRenameRefactoring.refactor(AbstractRenameRefactoring.java:37)
	at spoon.refactoring.Refactoring.changeLocalVariableName(Refactoring.java:206)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:122)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$0(LevenSearchStrategy.java:49)
	at java.util.ArrayList.forEach(ArrayList.java:1249)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:49)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:207)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:251)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:222)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 58.923
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 2
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:186) - 
 --SOLUTIONS DESCRIPTION--


Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-11
TOTAL_TIME=58.923
NR_GENERATIONS=2
NR_RIGHT_COMPILATIONS=1
NR_FAILLING_COMPILATIONS=null
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=ERROR

Patch stats:

[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:212) - Time Total(s): 3798.122


Node: fbfb78d8000e



Date: Mon Oct 28 03:08:02 EDT 2019

cd /script/jGenProg_Defects4J_Math_11;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-11 \
	-failing org.apache.commons.math3.distribution.MultivariateNormalDistributionTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Math_11/target/classes/:/script/jGenProg_Defects4J_Math_11/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

