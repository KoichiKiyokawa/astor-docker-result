Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO ] fr.inria.astor.core.setup.ProjectConfiguration.getVersionJDK(ProjectConfiguration.java:282) - Version of the JVM used: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:383) - Java version of the JDK used to run tests: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:384) - The compliance of the JVM is:  7
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:662) - command line arguments: [-mode  jgenprog  -location  .  -id  Math-16  -failing  org.apache.commons.math3.util.FastMathTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Math_16/target/classes/:/script/jGenProg_Defects4J_Math_16/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.main.evolution.AstorMain.execute(AstorMain.java:228) - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:964) - Source folders: [/script/jGenProg_Defects4J_Math_16/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:983) - Source Test folders: [/script/jGenProg_Defects4J_Math_16/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:105) - mode is Leven
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_16/./output_astor/AstorMain-Math-16//bin//default from 696 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_16/./output_astor/AstorMain-Math-16//bin//default, /script/jGenProg_Defects4J_Math_16/target/classes/, /script/jGenProg_Defects4J_Math_16/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition3
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition4
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaMinusLogGammaSumPrecondition1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaMinusLogGammaSumPrecondition2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaMinusLogGammaSum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.BetaTest#testBcorr
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.BetaTest#testBcorrPrecondition1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.BetaTest#testBcorrPrecondition2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4274, fails: 55, GZoltar suspicious 29407, with positive susp 2644
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4274
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 880 with susp > 0.1, we consider: 880
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:955) - Setting up the max to 5361310 milliseconds (5361 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:801) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_16/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:70) - building model: /script/jGenProg_Defects4J_Math_16/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:84) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_16/target/classes/, /script/jGenProg_Defects4J_Math_16/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:836) - Number of CtTypes created: 628
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 880
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.1502349257508403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.1502349257508403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 880,  274
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 274
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 274, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:181) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.processbased.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:183) - Killed the Process that runs JUnit test cases 560
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:745) - Initial run of test suite fails
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.7976931348623157E308
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_16/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 5361310
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.util.FastMathTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-16
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_16/target/classes/:/script/jGenProg_Defects4J_Math_16/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long s = ((long) (x)) + ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = ((long) (x)) + ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (s))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.ArithmeticUtils.checkBinomial(n, k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((n == k) || (k == 0)) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((k == 1) || (k == (n - 1))) {
	return n;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k > (n / 2)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long result = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = (n - k) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = (n - k) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (result * i) / j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: i++
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 <= k; $0++) {
	result = (result * i) / $0;
	i++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long d = org.apache.commons.math3.util.ArithmeticUtils.gcd(i, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final long $0 = org.apache.commons.math3.util.ArithmeticUtils.gcd(i, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (result / (j / d)) * (i / d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long d = org.apache.commons.math3.util.ArithmeticUtils.gcd(i, $0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 <= k; $0++) {






	final long $1 = org.apache.commons.math3.util.ArithmeticUtils.gcd(i, $0);
	result = (result / ($0 / $1)) * (i / $1);
	i++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long d = org.apache.commons.math3.util.ArithmeticUtils.gcd(i, $0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 <= k; $0++) {
	final long $1 = org.apache.commons.math3.util.ArithmeticUtils.gcd(i, $0);
	result = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(result / ($0 / $1), i / $1);
	i++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = (n - k) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long d = org.apache.commons.math3.util.ArithmeticUtils.gcd($0, $1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = (n - k) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long d = org.apache.commons.math3.util.ArithmeticUtils.gcd($3, $4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n <= 66) {


	int $0 = (n - k) + 1;
	for (int $1 = 1; $1 <= k; $1++) {






		final long $2 = org.apache.commons.math3.util.ArithmeticUtils.gcd($0, $1);
		result = (result / ($1 / $2)) * ($0 / $2);
		$0++;
	}
} else {



	int $3 = (n - k) + 1;
	for (int $4 = 1; $4 <= k; $4++) {
		final long $5 = org.apache.commons.math3.util.ArithmeticUtils.gcd($3, $4);
		result = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(result / ($4 / $5), $3 / $5);
		$3++;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = (n - k) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = (n - k) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long d = org.apache.commons.math3.util.ArithmeticUtils.gcd($2, $3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = (n - k) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long d = org.apache.commons.math3.util.ArithmeticUtils.gcd($5, $6)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n <= 61) {

	int $0 = (n - k) + 1;
	for (int $1 = 1; $1 <= k; $1++) {
		result = (result * $0) / $1;
		$0++;
	}
} else { 	if (n <= 66) {


		int $2 = (n - k) + 1;
		for (int $3 = 1; $3 <= k; $3++) {






			final long $4 = org.apache.commons.math3.util.ArithmeticUtils.gcd($2, $3);
			result = (result / ($3 / $4)) * ($2 / $4);
			$2++;
		}
	} else {



		int $5 = (n - k) + 1;
		for (int $6 = 1; $6 <= k; $6++) {
			final long $7 = org.apache.commons.math3.util.ArithmeticUtils.gcd($5, $6);
			result = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(result / ($6 / $7), $5 / $7);
			$5++;
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((n == k) || (k == 0)) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k > (n / 2)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < 67) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result *= ((double) ((n - k) + i)) / ((double) (i))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 <= k; $0++) {
	result *= ((double) ((n - k) + $0)) / ((double) ($0));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.floor(result + 0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((n == k) || (k == 0)) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(n)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((k == 1) || (k == (n - 1))) {
	return org.apache.commons.math3.util.FastMath.log(n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < 67) {
	return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, k));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, k))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < 1030) {
	return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble(n, k));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientLog(n, n - k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k > (n / 2)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientLog(n, n - k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double logSum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: logSum += org.apache.commons.math3.util.FastMath.log(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = (n - k) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = (n - k) + 1; $0 <= n; $0++) {
	logSum += org.apache.commons.math3.util.FastMath.log($0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: logSum -= org.apache.commons.math3.util.FastMath.log(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 2; $0 <= k; $0++) {
	logSum -= org.apache.commons.math3.util.FastMath.log($0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return logSum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
n)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER, 
	n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n > 20) {
	throw new org.apache.commons.math3.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < 21) {
	return org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.exp(org.apache.commons.math3.util.ArithmeticUtils.factorialLog(n)) + 0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < 21) {
	return org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.ArithmeticUtils.FACTORIALS[n]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 2; $0 <= n; $0++) {
	logSum += org.apache.commons.math3.util.FastMath.log($0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int a = p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int b = q
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = q
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
p, q)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((a == java.lang.Integer.MIN_VALUE) || 
(b == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(a + b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((a == 0) || 
(b == 0)) {
	if ((a == java.lang.Integer.MIN_VALUE) || 
	(b == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math3.util.FastMath.abs(a + b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long al = a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long bl = b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean useLong = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: boolean $0 = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: useLong = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = -a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Integer.MIN_VALUE == a) {
	useLong = true;
} else {
	a = -a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: al = -al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a < 0) {
	if (java.lang.Integer.MIN_VALUE == a) {
		useLong = true;
	} else {
		a = -a;
	}
	al = -al;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = -b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Integer.MIN_VALUE == b) {
	useLong = true;
} else {
	b = -b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bl = -bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (b < 0) {
	if (java.lang.Integer.MIN_VALUE == b) {
		useLong = true;
	} else {
		b = -b;
	}
	bl = -bl;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (al == bl) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long blbu = bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bl = al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: al = blbu % al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (bl > java.lang.Integer.MAX_VALUE) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (bl))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (al == 0) {
	if (bl > java.lang.Integer.MAX_VALUE) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return ((int) (bl));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: blbu = bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = ((int) (al))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = ((int) (blbu % al))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long blbu = bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (useLong) {
	if (al == bl) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	long $0 = bl;
	bl = al;
	al = $0 % al;
	if (al == 0) {
		if (bl > java.lang.Integer.MAX_VALUE) {
			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
			p, q);
		}
		return ((int) (bl));
	}
	$0 = bl;


	b = ((int) (al));
	a = ((int) ($0 % al));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (b == 0) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a == 0) {
	return b;
} else 
{ 	if (b == 0) {
		return a;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int aTwos = java.lang.Integer.numberOfTrailingZeros(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = java.lang.Integer.numberOfTrailingZeros(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a >>= aTwos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int bTwos = java.lang.Integer.numberOfTrailingZeros(b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = java.lang.Integer.numberOfTrailingZeros(b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b >>= bTwos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int shift = java.lang.Math.min(aTwos, bTwos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = java.lang.Math.min(aTwos, bTwos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int delta = a - b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = a - b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = java.lang.Math.min(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = java.lang.Math.abs(delta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a >>= java.lang.Integer.numberOfTrailingZeros(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int delta = a - b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (a != b) {
	final int $0 = a - b;
	b = java.lang.Math.min(a, b);
	a = java.lang.Math.abs($0);


	a >>= java.lang.Integer.numberOfTrailingZeros(a);
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a << shift
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long u = p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long v = q
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = q
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
p, q)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(u) + org.apache.commons.math3.util.FastMath.abs(v)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((u == 0) || (v == 0)) {
	if ((u == java.lang.Long.MIN_VALUE) || (v == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
		p, q);
	}
	return org.apache.commons.math3.util.FastMath.abs(u) + org.apache.commons.math3.util.FastMath.abs(v);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: u = -u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (u > 0) {
	u = -u;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: v = -v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (v > 0) {
	v = -v;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: u /= 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: v /= 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: k++
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while ((((u & 1) == 0) && ((v & 1) == 0)) && (k < 63)) {

	u /= 2;
	v /= 2;
	k++;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k == 63) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS, 
	p, q);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long t = ((u & 1) == 1) ? v : -(u / 2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = ((u & 1) == 1) ? v : -(u / 2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t /= 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while ((t & 1) == 0) {
	t /= 2;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: u = -t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: v = t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (t > 0) {
	u = -t;
} else {
	v = t;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = (v - u) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: do {


	while ((t & 1) == 0) {
		t /= 2;
	} 

	if (t > 0) {
		u = -t;
	} else {
		v = t;
	}

	t = (v - u) / 2;


} while (t != 0 )
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-u) * (1L << k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((a == 0) || (b == 0)) {
	return 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int lcm = org.apache.commons.math3.util.FastMath.abs(org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(a / org.apache.commons.math3.util.ArithmeticUtils.gcd(a, b), b))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = org.apache.commons.math3.util.FastMath.abs(org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(a / org.apache.commons.math3.util.ArithmeticUtils.gcd(a, b), b))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (lcm == java.lang.Integer.MIN_VALUE) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS, 
	a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return lcm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long lcm = org.apache.commons.math3.util.FastMath.abs(org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(a / org.apache.commons.math3.util.ArithmeticUtils.gcd(a, b), b))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = org.apache.commons.math3.util.FastMath.abs(org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(a / org.apache.commons.math3.util.ArithmeticUtils.gcd(a, b), b))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (lcm == java.lang.Long.MIN_VALUE) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_64_BITS, 
	a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long m = ((long) (x)) * ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = ((long) (x)) * ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (m))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long ret
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(b, a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = a * b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a >= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math3.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((java.lang.Long.MIN_VALUE / b) <= a) {
	ret = a * b;
} else {
	throw new org.apache.commons.math3.exception.MathArithmeticException();

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (b > 0) {

	if ((java.lang.Long.MIN_VALUE / b) <= a) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math3.exception.MathArithmeticException();

	}
} else {

	ret = 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (b < 0) {

	if (a >= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math3.exception.MathArithmeticException();
	}
} else { 	if (b > 0) {

		if ((java.lang.Long.MIN_VALUE / b) <= a) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math3.exception.MathArithmeticException();

		}
	} else {

		ret = 0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a <= (java.lang.Long.MAX_VALUE / b)) {
	ret = a * b;
} else {
	throw new org.apache.commons.math3.exception.MathArithmeticException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > 0) {




	if (a <= (java.lang.Long.MAX_VALUE / b)) {
		ret = a * b;
	} else {
		throw new org.apache.commons.math3.exception.MathArithmeticException();
	}
} else {

	ret = 0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a < 0) {
	if (b < 0) {

		if (a >= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math3.exception.MathArithmeticException();
		}
	} else { 		if (b > 0) {

			if ((java.lang.Long.MIN_VALUE / b) <= a) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math3.exception.MathArithmeticException();

			}
		} else {

			ret = 0;
		}}
} else { 	if (a > 0) {




		if (a <= (java.lang.Long.MAX_VALUE / b)) {
			ret = a * b;
		} else {
			throw new org.apache.commons.math3.exception.MathArithmeticException();
		}
	} else {

		ret = 0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > b) {

	ret = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(b, a);
} else {
	if (a < 0) {
		if (b < 0) {

			if (a >= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math3.exception.MathArithmeticException();
			}
		} else { 			if (b > 0) {

				if ((java.lang.Long.MIN_VALUE / b) <= a) {
					ret = a * b;
				} else {
					throw new org.apache.commons.math3.exception.MathArithmeticException();

				}
			} else {

				ret = 0;
			}}
	} else { 		if (a > 0) {




			if (a <= (java.lang.Long.MAX_VALUE / b)) {
				ret = a * b;
			} else {
				throw new org.apache.commons.math3.exception.MathArithmeticException();
			}
		} else {

			ret = 0;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ret
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long s = ((long) (x)) - ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = ((long) (x)) - ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((s < java.lang.Integer.MIN_VALUE) || (s > java.lang.Integer.MAX_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = a - b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a < 0) {
	ret = a - b;
} else {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (b == java.lang.Long.MIN_VALUE) {
	if (a < 0) {
		ret = a - b;
	} else {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);
	}
} else {

	ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.EXPONENT, e)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (e < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.EXPONENT, e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int result = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k2p = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result *= k2p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((e & 0x1) != 0) {
	result *= k2p;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: k2p *= k2p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: e = e >> 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (e != 0) {
	if ((e & 0x1) != 0) {
		result *= k2p;
	}
	k2p *= k2p;
	e = e >> 1;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long result = 1L
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = 1L
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long k2p = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return k.pow(e)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.math.BigInteger result = java.math.BigInteger.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.math.BigInteger $0 = java.math.BigInteger.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.math.BigInteger k2p = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.math.BigInteger $0 = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result.multiply(k2p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((e & 0x1) != 0) {
	result = result.multiply(k2p);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: k2p = k2p.multiply(k2p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (e != 0) {
	if ((e & 0x1) != 0) {
		result = result.multiply(k2p);
	}
	k2p = k2p.multiply(k2p);
	e = e >> 1;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (e.compareTo(java.math.BigInteger.ZERO) < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.EXPONENT, e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (e.testBit(0)) {
	result = result.multiply(k2p);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: e = e.shiftRight(1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (!java.math.BigInteger.ZERO.equals(e)) {
	if (e.testBit(0)) {
		result = result.multiply(k2p);
	}
	k2p = k2p.multiply(k2p);
	e = e.shiftRight(1);
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotPositiveException(k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k > n) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long[][] stirlingS2 = org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.get()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long[][] $0 = org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.get()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int maxIndex = 26
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = 26
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2 = new long[maxIndex][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[0] = new long[]{ 1L }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i] = new long[i + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i][0] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i][1] = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i][i] = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 2; $0 < i; ++$0) {
	stirlingS2[i][$0] = ($0 * stirlingS2[i - 1][$0]) + stirlingS2[i - 1][$0 - 1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 < stirlingS2.length; ++$0) {
	stirlingS2[$0] = new long[$0 + 1];
	stirlingS2[$0][0] = 0;
	stirlingS2[$0][1] = 1;
	stirlingS2[$0][$0] = 1;
	for (int $1 = 2; $1 < $0; ++$1) {
		stirlingS2[$0][$1] = ($1 * stirlingS2[$0 - 1][$1]) + stirlingS2[$0 - 1][$1 - 1];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int maxIndex = 26
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (stirlingS2 == null) {





	final int $0 = 26;
	stirlingS2 = new long[$0][];
	stirlingS2[0] = new long[]{ 1L };
	for (int $1 = 1; $1 < stirlingS2.length; ++$1) {
		stirlingS2[$1] = new long[$1 + 1];
		stirlingS2[$1][0] = 0;
		stirlingS2[$1][1] = 1;
		stirlingS2[$1][$1] = 1;
		for (int $2 = 2; $2 < $1; ++$2) {
			stirlingS2[$1][$2] = ($2 * stirlingS2[$1 - 1][$2]) + stirlingS2[$1 - 1][$2 - 1];
		}
	}


	org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return stirlingS2[n][k]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (1L << (n - 1)) - 1L
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sign = ((k & 0x1) == 0) ? 1 : -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = ((k & 0x1) == 0) ? 1 : -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sign = -sign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
n, 0, stirlingS2.length - 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (sum < 0) {

	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
	n, 0, stirlingS2.length - 1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 <= k; ++$0) {
	sign = -sign;
	sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, $0)) * org.apache.commons.math3.util.ArithmeticUtils.pow($0, n);
	if (sum < 0) {

		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
		n, 0, stirlingS2.length - 1);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sign = ((k & 0x1) == 0) ? 1 : -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long $0 = 0;
	long $1 = ((k & 0x1) == 0) ? 1 : -1;
	for (int $2 = 1; $2 <= k; ++$2) {
		$1 = -$1;
		$0 += ($1 * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, $2)) * org.apache.commons.math3.util.ArithmeticUtils.pow($2, n);
		if ($0 < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return $0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sign = ((k & 0x1) == 0) ? 1 : -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else { 	if (k == (n - 1)) {
		return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
	} else {

		long $0 = 0;
		long $1 = ((k & 0x1) == 0) ? 1 : -1;
		for (int $2 = 1; $2 <= k; ++$2) {
			$1 = -$1;
			$0 += ($1 * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, $2)) * org.apache.commons.math3.util.ArithmeticUtils.pow($2, n);
			if ($0 < 0) {

				throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
				n, 0, stirlingS2.length - 1);
			}
		}
		return $0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sign = ((k & 0x1) == 0) ? 1 : -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((k == 1) || (k == n)) {
	return 1;
} else { 	if (k == 2) {
		return (1L << (n - 1)) - 1L;
	} else { 		if (k == (n - 1)) {
			return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
		} else {

			long $0 = 0;
			long $1 = ((k & 0x1) == 0) ? 1 : -1;
			for (int $2 = 1; $2 <= k; ++$2) {
				$1 = -$1;
				$0 += ($1 * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, $2)) * org.apache.commons.math3.util.ArithmeticUtils.pow($2, n);
				if ($0 < 0) {

					throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
					n, 0, stirlingS2.length - 1);
				}
			}
			return $0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sign = ((k & 0x1) == 0) ? 1 : -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (k == 0) {
	return 0;
} else { 	if ((k == 1) || (k == n)) {
		return 1;
	} else { 		if (k == 2) {
			return (1L << (n - 1)) - 1L;
		} else { 			if (k == (n - 1)) {
				return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
			} else {

				long $0 = 0;
				long $1 = ((k & 0x1) == 0) ? 1 : -1;
				for (int $2 = 1; $2 <= k; ++$2) {
					$1 = -$1;
					$0 += ($1 * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, $2)) * org.apache.commons.math3.util.ArithmeticUtils.pow($2, n);
					if ($0 < 0) {

						throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
						n, 0, stirlingS2.length - 1);
					}
				}
				return $0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long sign = ((k & 0x1) == 0) ? 1 : -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < stirlingS2.length) {

	return stirlingS2[n][k];
} else {

	if (k == 0) {
		return 0;
	} else { 		if ((k == 1) || (k == n)) {
			return 1;
		} else { 			if (k == 2) {
				return (1L << (n - 1)) - 1L;
			} else { 				if (k == (n - 1)) {
					return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
				} else {

					long $0 = 0;
					long $1 = ((k & 0x1) == 0) ? 1 : -1;
					for (int $2 = 1; $2 <= k; ++$2) {
						$1 = -$1;
						$0 += ($1 * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, $2)) * org.apache.commons.math3.util.ArithmeticUtils.pow($2, n);
						if ($0 < 0) {

							throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
							n, 0, stirlingS2.length - 1);
						}
					}
					return $0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
				}}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(b, a, pattern)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(pattern, a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((java.lang.Long.MIN_VALUE - b) <= a) {
	ret = a + b;
} else {
	throw new org.apache.commons.math3.exception.MathArithmeticException(pattern, a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (b < 0) {

	if ((java.lang.Long.MIN_VALUE - b) <= a) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math3.exception.MathArithmeticException(pattern, a, b);
	}
} else {

	ret = a + b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a <= (java.lang.Long.MAX_VALUE - b)) {
	ret = a + b;
} else {
	throw new org.apache.commons.math3.exception.MathArithmeticException(pattern, a, b);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a < 0) {
	if (b < 0) {

		if ((java.lang.Long.MIN_VALUE - b) <= a) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math3.exception.MathArithmeticException(pattern, a, b);
		}
	} else {

		ret = a + b;
	}
} else {




	if (a <= (java.lang.Long.MAX_VALUE - b)) {
		ret = a + b;
	} else {
		throw new org.apache.commons.math3.exception.MathArithmeticException(pattern, a, b);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > b) {

	ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(b, a, pattern);
} else {


	if (a < 0) {
		if (b < 0) {

			if ((java.lang.Long.MIN_VALUE - b) <= a) {
				ret = a + b;
			} else {
				throw new org.apache.commons.math3.exception.MathArithmeticException(pattern, a, b);
			}
		} else {

			ret = a + b;
		}
	} else {




		if (a <= (java.lang.Long.MAX_VALUE - b)) {
			ret = a + b;
		} else {
			throw new org.apache.commons.math3.exception.MathArithmeticException(pattern, a, b);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, 
k, n, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < k) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER, 
	k, n, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (n > 0) && ((n & (n - 1)) == 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(val)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(unscaledVal, scale)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(unscaledVal, scale, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(val, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(in)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(in, offset, len)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(in, offset, len, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = new java.math.BigDecimal(in, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return roundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.roundingMode = roundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return scale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.scale = scale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.add(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.subtract(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.negate())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.divide(a.d, scale, roundingMode))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NOT_ALLOWED)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(java.math.BigDecimal.ONE.divide(d, scale, roundingMode))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.multiply(a.d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.BigReal(d.multiply(new java.math.BigDecimal(n)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d.compareTo(a.d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d.doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (this == other) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d.equals(((org.apache.commons.math3.util.BigReal) (other)).d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (other instanceof org.apache.commons.math3.util.BigReal) {
	return d.equals(((org.apache.commons.math3.util.BigReal) (other)).d);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigRealField.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigRealField.LazyHolder.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigReal.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigReal.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.BigReal.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale.getDefault())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.text.NumberFormat nf = java.text.NumberFormat.getInstance(locale)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final java.text.NumberFormat $0 = java.text.NumberFormat.getInstance(locale)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: nf.setMaximumFractionDigits(10)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return nf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.CompositeFormat.parseNextCharacter(source, pos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: pos.setIndex(pos.getIndex() - 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int index = pos.getIndex()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = pos.getIndex()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int n = source.length()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = source.length()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: char ret = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: char $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: char c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: char $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = source.charAt(index++)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: do {
	c = source.charAt(index++);
} while (java.lang.Character.isWhitespace(c) && (index < n) )
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: pos.setIndex(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (index < n) {
	ret = c;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: char c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (index < n) {
	char $0;
	do {
		$0 = source.charAt(index++);
	} while (java.lang.Character.isWhitespace($0) && (index < n) );
	pos.setIndex(index);

	if (index < n) {
		ret = $0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.lang.Number ret = null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.Number $0 = null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.lang.StringBuilder sb = new java.lang.StringBuilder()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.StringBuilder $0 = new java.lang.StringBuilder()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sb.append('(')
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sb.append(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sb.append(')')
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int n = sb.length()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = sb.length()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int startIndex = pos.getIndex()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = pos.getIndex()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int endIndex = startIndex + n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = startIndex + n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ret = java.lang.Double.valueOf(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: pos.setIndex(endIndex)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
	ret = java.lang.Double.valueOf(value);
	pos.setIndex(endIndex);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (endIndex < source.length()) {
	if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
		ret = java.lang.Double.valueOf(value);
		pos.setIndex(endIndex);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.lang.Number number = format.parse(source, pos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.Number $0 = format.parse(source, pos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int endIndex = pos.getIndex()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = pos.getIndex()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] special = new double[]{ 
java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[]{ 
java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: number = org.apache.commons.math3.util.CompositeFormat.parseNumber(source, special[i], pos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: break
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (number != null) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < special.length; ++$0) {
	number = org.apache.commons.math3.util.CompositeFormat.parseNumber(source, special[$0], pos);
	if (number != null) {
		break;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] special = new double[]{ 
java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (startIndex == endIndex) {

	final double[] $0 = new double[]{ 
	java.lang.Double.NaN, java.lang.Double.POSITIVE_INFINITY, java.lang.Double.NEGATIVE_INFINITY };

	for (int $1 = 0; $1 < $0.length; ++$1) {
		number = org.apache.commons.math3.util.CompositeFormat.parseNumber(source, $0[$1], pos);
		if (number != null) {
			break;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return number
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int endIndex = startIndex + expected.length()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = startIndex + expected.length()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: pos.setIndex(startIndex)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: pos.setErrorIndex(startIndex)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((startIndex >= source.length()) || 
(endIndex > source.length())) || 
(source.substring(startIndex, endIndex).compareTo(expected) != 0)) {

	pos.setIndex(startIndex);
	pos.setErrorIndex(startIndex);
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: toAppendTo.append('(')
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: toAppendTo.append(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: toAppendTo.append(')')
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: format.format(value, toAppendTo, pos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(value) || java.lang.Double.isInfinite(value)) {
	toAppendTo.append('(');
	toAppendTo.append(value);
	toAppendTo.append(')');
} else {
	format.format(value, toAppendTo, pos);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return toAppendTo
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, maxIterations)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double small = 1.0E-50
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0E-50
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double hPrev = getA(0, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = getA(0, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hPrev = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.Precision.equals(hPrev, 0.0, small)) {
	hPrev = small;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int n = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double dPrev = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double cPrev = hPrev
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = hPrev
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double hN = hPrev
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = hPrev
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = getA(n, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = getA(n, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b = getB(n, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = getB(n, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double dN = a + (b * dPrev)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = a + (b * dPrev)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dN = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
	dN = small;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double cN = a + (b / cPrev)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = a + (b / cPrev)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: cN = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
	cN = small;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dN = 1 / dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double deltaN = cN * dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = cN * dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hN = hPrev * deltaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dPrev = dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: cPrev = cN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hPrev = hN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: n++
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = getA(n, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b = getB(n, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double dN = $0 + ($1 * dPrev)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double cN = $0 + ($1 / cPrev)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double deltaN = $3 * $2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (n < maxIterations) {
	final double $0 = getA(n, x);
	final double $1 = getB(n, x);

	double $2 = $0 + ($1 * dPrev);
	if (org.apache.commons.math3.util.Precision.equals($2, 0.0, small)) {
		$2 = small;
	}
	double $3 = $0 + ($1 / cPrev);
	if (org.apache.commons.math3.util.Precision.equals($3, 0.0, small)) {
		$3 = small;
	}

	$2 = 1 / $2;
	final double $4 = $3 * $2;
	hN = hPrev * $4;

	if (java.lang.Double.isInfinite(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	if (java.lang.Double.isNaN(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
		x);
	}

	if (org.apache.commons.math3.util.FastMath.abs($4 - 1.0) < epsilon) {
		break;
	}

	dPrev = $2;
	cPrev = $3;
	hPrev = hN;
	n++;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, 
maxIterations, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n >= maxIterations) {
	throw new org.apache.commons.math3.exception.MaxCountExceededException(org.apache.commons.math3.exception.util.LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, 
	maxIterations, x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return hN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ZERO = new org.apache.commons.math3.util.Decimal64(0.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ONE = new org.apache.commons.math3.util.Decimal64(1.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: NEGATIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NEGATIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: POSITIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: NAN = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NaN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.value = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64Field.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(this.value + a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(this.value - a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(-this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(this.value * a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(n * this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(this.value / a.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.Decimal64(1.0 / this.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((byte) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((short) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((long) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.compare(this.value, o.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.util.Decimal64 $0 = ((org.apache.commons.math3.util.Decimal64) (obj))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
that.value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (obj instanceof org.apache.commons.math3.util.Decimal64) {
	final org.apache.commons.math3.util.Decimal64 $0 = ((org.apache.commons.math3.util.Decimal64) (obj));
	return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
	$0.value);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long v = java.lang.Double.doubleToLongBits(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = java.lang.Double.doubleToLongBits(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (v ^ (v >>> 32)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.toString(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.isInfinite(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.isNaN(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64Field.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64.ZERO
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64.ONE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Decimal64.class
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NullArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.OBJECT_TRANSFORMATION)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (o == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.OBJECT_TRANSFORMATION);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((java.lang.Number) (o)).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (o instanceof java.lang.Number) {
	return ((java.lang.Number) (o)).doubleValue();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.valueOf(o.toString()).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE, 
o.toString())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return other instanceof org.apache.commons.math3.util.DefaultTransformer
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 401993047
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((d > (-org.apache.commons.math3.util.Precision.SAFE_MIN)) && (d < org.apache.commons.math3.util.Precision.SAFE_MIN)) {
	return d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long xl = java.lang.Double.doubleToLongBits(d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = java.lang.Double.doubleToLongBits(d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xl = xl & org.apache.commons.math3.util.FastMath.MASK_30BITS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble(xl)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.sqrt(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x != x) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 0.5 * org.apache.commons.math3.util.FastMath.exp(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x > 20) {

	return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < (-20)) {

	return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] hiPrec = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x = -x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < 0.0) {
	x = -x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.exp(x, 0.0, hiPrec)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = hiPrec[0] + hiPrec[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = hiPrec[0] + hiPrec[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = -((ya - hiPrec[0]) - hiPrec[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((ya - hiPrec[0]) - hiPrec[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = ya * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ya * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yaa = (ya + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (ya + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yab = ya - yaa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ya - yaa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double recip = 1.0 / ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.0 / ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = recip * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double recipa = (recip + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (recip + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double recipb = recip - recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = recip - recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: recipb += ((((1.0 - (yaa * recipa)) - (yaa * recipb)) - (yab * recipa)) - (yab * recipb)) * recip
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: recipb += ((-yb) * recip) * recip
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - ya) - recipa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + recipb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - ya) - recipb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result *= 0.5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean negate = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: boolean $0 = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < (-20)) {

	return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == 0) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: negate = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < 0.0) {
	x = -x;
	negate = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] hiPrec = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: recipa = -recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: recipb = -recipb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.expm1(x, hiPrec)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denom = 1.0 + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.0 + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denomr = 1.0 / denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.0 / denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denomb = (-((denom - 1.0) - ya)) + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (-((denom - 1.0) - ya)) + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratio = ya * denomr
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ya * denomr
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = ratio * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ratio * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ra = (ratio + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (ratio + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double rb = ratio - ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ratio - ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = denom * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double za = (denom + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (denom + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double zb = denom - za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = denom - za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb += ((((ya - (za * ra)) - (za * rb)) - (zb * ra)) - (zb * rb)) * denomr
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb += yb * denomr
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb += (((-ya) * denomb) * denomr) * denomr
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - ya) - ra)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - ya) - rb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] hiPrec = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = $0[0] + $0[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = -(($1 - $0[0]) - $0[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = $1 * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yaa = ($1 + $3) - $3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yab = $1 - $4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double recip = 1.0 / $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double recipa = ($6 + $3) - $3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double recipb = $6 - $7
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] hiPrec = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = $9[0] + $9[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = -(($10 - $9[0]) - $9[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denom = 1.0 + $10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denomr = 1.0 / $12
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denomb = (-(($12 - 1.0) - $10)) + $11
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratio = $10 * $13
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = $15 * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ra = ($15 + $16) - $16
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double rb = $15 - $17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double za = ($12 + $16) - $16
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double zb = $12 - $19
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x > 0.25) {
	double[] $0 = new double[2];
	org.apache.commons.math3.util.FastMath.exp(x, 0.0, $0);

	double $1 = $0[0] + $0[1];
	double $2 = -(($1 - $0[0]) - $0[1]);

	double $3 = $1 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $4 = ($1 + $3) - $3;
	double $5 = $1 - $4;


	double $6 = 1.0 / $1;
	$3 = $6 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $7 = ($6 + $3) - $3;
	double $8 = $6 - $7;


	$8 += ((((1.0 - ($4 * $7)) - ($4 * $8)) - ($5 * $7)) - ($5 * $8)) * $6;

	$8 += ((-$2) * $6) * $6;

	$7 = -$7;
	$8 = -$8;


	$3 = $1 + $7;
	$2 += -(($3 - $1) - $7);
	$1 = $3;
	$3 = $1 + $8;
	$2 += -(($3 - $1) - $8);
	$1 = $3;

	result = $1 + $2;
	result *= 0.5;
} else 
{
	double[] $9 = new double[2];
	org.apache.commons.math3.util.FastMath.expm1(x, $9);

	double $10 = $9[0] + $9[1];
	double $11 = -(($10 - $9[0]) - $9[1]);


	double $12 = 1.0 + $10;
	double $13 = 1.0 / $12;
	double $14 = (-(($12 - 1.0) - $10)) + $11;
	double $15 = $10 * $13;
	double $16 = $15 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $17 = ($15 + $16) - $16;
	double $18 = $15 - $17;

	$16 = $12 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $19 = ($12 + $16) - $16;
	double $20 = $12 - $19;

	$18 += (((($10 - ($19 * $17)) - ($19 * $18)) - ($20 * $17)) - ($20 * $18)) * $13;


	$18 += $11 * $13;
	$18 += (((-$10) * $14) * $13) * $13;


	$16 = $10 + $17;
	$11 += -(($16 - $10) - $17);
	$10 = $16;
	$16 = $10 + $18;
	$11 += -(($16 - $10) - $18);
	$10 = $16;

	result = $10 + $11;
	result *= 0.5;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = -result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (negate) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x > 20.0) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < (-20)) {
	return -1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.exp(x * 2.0, 0.0, hiPrec)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double na = (-1.0) + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (-1.0) + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double nb = -((na + 1.0) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((na + 1.0) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = na + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = na + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: nb += -((temp - na) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: na = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double da = 1.0 + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.0 + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double db = -((da - 1.0) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((da - 1.0) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = da + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: db += -((temp - da) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: da = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = da * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double daa = (da + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (da + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double dab = da - daa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = da - daa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratio = na / da
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = na / da
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ratio * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratioa = (ratio + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (ratio + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratiob = ratio - ratioa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ratio - ratioa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ratiob += ((((na - (daa * ratioa)) - (daa * ratiob)) - (dab * ratioa)) - (dab * ratiob)) / da
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ratiob += nb / da
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ratiob += (((-db) * na) / da) / da
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ratioa + ratiob
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.expm1(x * 2.0, hiPrec)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double na = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double nb = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double da = 2.0 + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 2.0 + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double db = -((da - 2.0) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((da - 2.0) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = da + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = da + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] hiPrec = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = $0[0] + $0[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = -(($1 - $0[0]) - $0[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double na = (-1.0) + $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double nb = -(($3 + 1.0) - $1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = $3 + $2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double da = 1.0 + $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double db = -(($6 - 1.0) - $1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double daa = ($6 + $5) - $5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double dab = $6 - $8
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratio = $3 / $6
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratioa = ($10 + $5) - $5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratiob = $10 - $11
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] hiPrec = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = $13[0] + $13[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = -(($14 - $13[0]) - $13[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double na = $14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double nb = $15
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double da = 2.0 + $14
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double db = -(($18 - 2.0) - $14)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = $18 + $15
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double daa = ($18 + $20) - $20
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double dab = $18 - $21
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratio = $16 / $18
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratioa = ($23 + $20) - $20
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratiob = $23 - $24
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x >= 0.5) {
	double[] $0 = new double[2];

	org.apache.commons.math3.util.FastMath.exp(x * 2.0, 0.0, $0);

	double $1 = $0[0] + $0[1];
	double $2 = -(($1 - $0[0]) - $0[1]);


	double $3 = (-1.0) + $1;
	double $4 = -(($3 + 1.0) - $1);
	double $5 = $3 + $2;
	$4 += -(($5 - $3) - $2);
	$3 = $5;


	double $6 = 1.0 + $1;
	double $7 = -(($6 - 1.0) - $1);
	$5 = $6 + $2;
	$7 += -(($5 - $6) - $2);
	$6 = $5;

	$5 = $6 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $8 = ($6 + $5) - $5;
	double $9 = $6 - $8;


	double $10 = $3 / $6;
	$5 = $10 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $11 = ($10 + $5) - $5;
	double $12 = $10 - $11;


	$12 += (((($3 - ($8 * $11)) - ($8 * $12)) - ($9 * $11)) - ($9 * $12)) / $6;


	$12 += $4 / $6;

	$12 += (((-$7) * $3) / $6) / $6;

	result = $11 + $12;
} else 
{
	double[] $13 = new double[2];

	org.apache.commons.math3.util.FastMath.expm1(x * 2.0, $13);

	double $14 = $13[0] + $13[1];
	double $15 = -(($14 - $13[0]) - $13[1]);


	double $16 = $14;
	double $17 = $15;


	double $18 = 2.0 + $14;
	double $19 = -(($18 - 2.0) - $14);
	double $20 = $18 + $15;
	$19 += -(($20 - $18) - $15);
	$18 = $20;

	$20 = $18 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $21 = ($18 + $20) - $20;
	double $22 = $18 - $21;


	double $23 = $16 / $18;
	$20 = $23 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $24 = ($23 + $20) - $20;
	double $25 = $23 - $24;


	$25 += (((($16 - ($21 * $24)) - ($21 * $25)) - ($22 * $24)) - ($22 * $25)) / $18;


	$25 += $17 / $18;

	$25 += (((-$19) * $16) / $18) / $18;

	result = $24 + $25;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(a + org.apache.commons.math3.util.FastMath.sqrt((a * a) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean negative = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: boolean $0 = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: negative = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a < 0) {
	negative = true;
	a = -a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double absAsinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.FastMath.sqrt((a * a) + 1) + a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a2 = a * a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a * a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_17) * org.apache.commons.math3.util.FastMath.F_15_16))) * org.apache.commons.math3.util.FastMath.F_13_14))) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_13) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_9) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_5) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > 0.0036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_9) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
} else {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_5) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > 0.036) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_13) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
} else { 	if (a > 0.0036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_9) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
	} else {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_5) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > 0.097) {
	absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_17) * org.apache.commons.math3.util.FastMath.F_15_16))) * org.apache.commons.math3.util.FastMath.F_13_14))) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
} else { 	if (a > 0.036) {
		absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_13) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
	} else { 		if (a > 0.0036) {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_9) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
		} else {
			absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_5) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a2 = a * a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > 0.167) {
	absAsinh = org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.FastMath.sqrt((a * a) + 1) + a);
} else {
	final double $0 = a * a;
	if (a > 0.097) {
		absAsinh = a * (1 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_3 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_5 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_7 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_9 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_11 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_13 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_15 - (($0 * org.apache.commons.math3.util.FastMath.F_1_17) * org.apache.commons.math3.util.FastMath.F_15_16))) * org.apache.commons.math3.util.FastMath.F_13_14))) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
	} else { 		if (a > 0.036) {
			absAsinh = a * (1 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_3 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_5 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_7 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_9 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_11 - (($0 * org.apache.commons.math3.util.FastMath.F_1_13) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
		} else { 			if (a > 0.0036) {
				absAsinh = a * (1 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_3 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_5 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_7 - (($0 * org.apache.commons.math3.util.FastMath.F_1_9) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
			} else {
				absAsinh = a * (1 - (($0 * (org.apache.commons.math3.util.FastMath.F_1_3 - (($0 * org.apache.commons.math3.util.FastMath.F_1_5) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2));
			}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return negative ? -absAsinh : absAsinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double absAtanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = 0.5 * org.apache.commons.math3.util.FastMath.log((1 + a) / (1 - a))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_15 + (a2 * org.apache.commons.math3.util.FastMath.F_1_17))))))))))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * org.apache.commons.math3.util.FastMath.F_1_13))))))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * org.apache.commons.math3.util.FastMath.F_1_9))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * org.apache.commons.math3.util.FastMath.F_1_5))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > 0.003) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * org.apache.commons.math3.util.FastMath.F_1_9))))))));
} else {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * org.apache.commons.math3.util.FastMath.F_1_5))));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > 0.031) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * org.apache.commons.math3.util.FastMath.F_1_13))))))))))));
} else { 	if (a > 0.003) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * org.apache.commons.math3.util.FastMath.F_1_9))))))));
	} else {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * org.apache.commons.math3.util.FastMath.F_1_5))));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > 0.087) {
	absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_15 + (a2 * org.apache.commons.math3.util.FastMath.F_1_17))))))))))))))));
} else { 	if (a > 0.031) {
		absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * org.apache.commons.math3.util.FastMath.F_1_13))))))))))));
	} else { 		if (a > 0.003) {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * org.apache.commons.math3.util.FastMath.F_1_9))))))));
		} else {
			absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * org.apache.commons.math3.util.FastMath.F_1_5))));
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a2 = a * a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > 0.15) {
	absAtanh = 0.5 * org.apache.commons.math3.util.FastMath.log((1 + a) / (1 - a));
} else {
	final double $0 = a * a;
	if (a > 0.087) {
		absAtanh = a * (1 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_3 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_5 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_7 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_9 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_11 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_13 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_15 + ($0 * org.apache.commons.math3.util.FastMath.F_1_17))))))))))))))));
	} else { 		if (a > 0.031) {
			absAtanh = a * (1 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_3 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_5 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_7 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_9 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_11 + ($0 * org.apache.commons.math3.util.FastMath.F_1_13))))))))))));
		} else { 			if (a > 0.003) {
				absAtanh = a * (1 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_3 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_5 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_7 + ($0 * org.apache.commons.math3.util.FastMath.F_1_9))))))));
			} else {
				absAtanh = a * (1 + ($0 * (org.apache.commons.math3.util.FastMath.F_1_3 + ($0 * org.apache.commons.math3.util.FastMath.F_1_5))));
			}}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return negative ? -absAtanh : absAtanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a < 0.0 ? -1.0 : a > 0.0 ? 1.0 : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a < 0.0F ? -1.0F : a > 0.0F ? 1.0F : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.nextAfter(a, java.lang.Float.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.random()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.exp(x, 0.0, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double intPartA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double intPartB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int intVal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intVal = ((int) (-x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {
	hiPrec[0] = 0.0;
	hiPrec[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (intVal > 746) {
	if (hiPrec != null) {
		hiPrec[0] = 0.0;
		hiPrec[1] = 0.0;
	}
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = org.apache.commons.math3.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] /= 2.85040095144011776E17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[1] /= 2.85040095144011776E17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {
	hiPrec[0] /= 2.85040095144011776E17;
	hiPrec[1] /= 2.85040095144011776E17;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = org.apache.commons.math3.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (intVal > 709) {

	final double $0 = org.apache.commons.math3.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
	if (hiPrec != null) {
		hiPrec[0] /= 2.85040095144011776E17;
		hiPrec[1] /= 2.85040095144011776E17;
	}
	return $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = org.apache.commons.math3.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] /= 4.455505956692757
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[1] /= 4.455505956692757
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {
	hiPrec[0] /= 4.455505956692757;
	hiPrec[1] /= 4.455505956692757;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = org.apache.commons.math3.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (intVal == 709) {

	final double $0 = org.apache.commons.math3.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
	if (hiPrec != null) {
		hiPrec[0] /= 4.455505956692757;
		hiPrec[1] /= 4.455505956692757;
	}
	return $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intVal++
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intVal = -intVal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intVal = ((int) (x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = java.lang.Double.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	hiPrec[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (intVal > 709) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
		hiPrec[1] = 0.0;
	}
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = org.apache.commons.math3.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = org.apache.commons.math3.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < 0.0) {
	intVal = ((int) (-x));

	if (intVal > 746) {
		if (hiPrec != null) {
			hiPrec[0] = 0.0;
			hiPrec[1] = 0.0;
		}
		return 0.0;
	}

	if (intVal > 709) {

		final double $0 = org.apache.commons.math3.util.FastMath.exp(x + 40.19140625, extra, hiPrec) / 2.85040095144011776E17;
		if (hiPrec != null) {
			hiPrec[0] /= 2.85040095144011776E17;
			hiPrec[1] /= 2.85040095144011776E17;
		}
		return $0;
	}

	if (intVal == 709) {

		final double $1 = org.apache.commons.math3.util.FastMath.exp(x + 1.494140625, extra, hiPrec) / 4.455505956692757;
		if (hiPrec != null) {
			hiPrec[0] /= 4.455505956692757;
			hiPrec[1] /= 4.455505956692757;
		}
		return $1;
	}

	intVal++;

	intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];
	intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal];

	intVal = -intVal;
} else {
	intVal = ((int) (x));

	if (intVal > 709) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
			hiPrec[1] = 0.0;
		}
		return java.lang.Double.POSITIVE_INFINITY;
	}

	intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
	intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int intFrac = ((int) ((x - intVal) * 1024.0))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = ((int) ((x - intVal) * 1024.0))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double fracPartA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double fracPartB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double epsilon = x - (intVal + (intFrac / 1024.0))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = x - (intVal + (intFrac / 1024.0))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double z = 0.04168701738764507
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0.04168701738764507
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * epsilon) + 0.1666666505023083
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * epsilon) + 0.5000000000042687
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * epsilon) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * epsilon) + (-3.940510424527919E-20)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tempA = intPartA * fracPartA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = intPartA * fracPartA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tempB = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ((intPartA * fracPartB) + (intPartB * fracPartA)) + (intPartB * fracPartB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tempC = tempB + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = tempB + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ((tempC * z) + tempB) + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (extra != 0.0) {
	result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA;
} else {
	result = ((tempC * z) + tempB) + tempA;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {

	hiPrec[0] = tempA;
	hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.expm1(x, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x != x) || (x == 0.0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((-1.0) + hiPrec[0]) + hiPrec[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ra = (-1.0) + hiPrec[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (-1.0) + hiPrec[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double rb = -((ra + 1.0) - hiPrec[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((ra + 1.0) - hiPrec[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb += hiPrec[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ra = (-1.0) + hiPrec[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double rb = -(($0 + 1.0) - hiPrec[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x > 0.0) {
	return ((-1.0) + hiPrec[0]) + hiPrec[1];
} else {
	final double $0 = (-1.0) + hiPrec[0];
	double $1 = -(($0 + 1.0) - hiPrec[0]);
	$1 += hiPrec[1];
	return $0 + $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] hiPrec = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ra = (-1.0) + $0[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double rb = -(($1 + 1.0) - $0[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x <= (-1.0)) || (x >= 1.0)) {


	double[] $0 = new double[2];
	org.apache.commons.math3.util.FastMath.exp(x, 0.0, $0);
	if (x > 0.0) {
		return ((-1.0) + $0[0]) + $0[1];
	} else {
		final double $1 = (-1.0) + $0[0];
		double $2 = -(($1 + 1.0) - $0[0]);
		$2 += $0[1];
		return $1 + $2;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double baseA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double baseB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < 0.0) {
	x = -x;
	negative = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int intFrac = ((int) (x * 1024.0))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = ((int) (x * 1024.0))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tempA = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tempB = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[intFrac]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = tempA + tempB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = tempA + tempB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tempB = -((temp - tempA) - tempB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tempA = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = tempA * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: baseA = (tempA + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: baseB = tempB + (tempA - baseA)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsilon = x - (intFrac / 1024.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double zb = 0.008336750013465571
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0.008336750013465571
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = (zb * epsilon) + 0.041666663879186654
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = (zb * epsilon) + 0.16666666666745392
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = (zb * epsilon) + 0.49999999999999994
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = zb * epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double za = epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = za + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = za + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = -((temp - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = za * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = (za + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb += za - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = za * baseA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = za * baseA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + (za * baseB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = -((temp - ya) - (za * baseB))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((temp - ya) - (za * baseB))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + (zb * baseA)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - ya) - (zb * baseA))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + (zb * baseB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - ya) - (zb * baseB))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + baseA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - baseA) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - ya) - za)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + baseB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - ya) - baseB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += -((temp - ya) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ra = (ratio + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (ratio + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = (denom + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = denom - za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = -ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = -rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denom = 1.0 + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denomr = 1.0 / $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double denomb = (-(($0 - 1.0) - ya)) + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ratio = ya * $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ra = ($3 + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double rb = $3 - $4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (negative) {

	double $0 = 1.0 + ya;
	double $1 = 1.0 / $0;
	double $2 = (-(($0 - 1.0) - ya)) + yb;
	double $3 = ya * $1;
	temp = $3 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	final double $4 = ($3 + temp) - temp;
	double $5 = $3 - $4;

	temp = $0 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	za = ($0 + temp) - temp;
	zb = $0 - za;

	$5 += ((((ya - (za * $4)) - (za * $5)) - (zb * $4)) - (zb * $5)) * $1;










	$5 += yb * $1;
	$5 += (((-ya) * $2) * $1) * $1;


	ya = -$4;
	yb = -$5;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrecOut[0] = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrecOut[1] = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrecOut != null) {
	hiPrecOut[0] = ya;
	hiPrecOut[1] = yb;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(x, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == 0) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long bits = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x != 0.0) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NaN;
	}

	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((bits & 0x8000000000000000L) != 0) || (x != x)) {
	if (x != 0.0) {
		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NaN;
		}

		return java.lang.Double.NaN;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.POSITIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int exp = ((int) (bits >> 52)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = ((int) (bits >> 52)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {
	hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == 0) {

	if (hiPrec != null) {
		hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bits <<= 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: --exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while ((bits & 0x10000000000000L) == 0) {
	--exp;
	bits <<= 1;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((bits & 0x7ff0000000000000L) == 0) {

	if (x == 0) {

		if (hiPrec != null) {
			hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.NEGATIVE_INFINITY;
	}


	bits <<= 1;
	while ((bits & 0x10000000000000L) == 0) {
		--exp;
		bits <<= 1;
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xa = x - 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = x - 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xb = (xa - x) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (xa - x) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp = xa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = xa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double aa = (xa + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (xa + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ab = xa - aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = xa - aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = lnCoef_last[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = lnCoef_last[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = lnCoef_last[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = lnCoef_last[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aa = ya * xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ab = ((ya * xb) + (yb * xa)) + (yb * xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = aa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = (aa + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (aa - ya) + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aa = ya + lnCoef_i[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ab = yb + lnCoef_i[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 2; $0 >= 0; $0--) {

	aa = ya * xa;
	ab = ((ya * xb) + (yb * xa)) + (yb * xb);

	tmp = aa * org.apache.commons.math3.util.FastMath.HEX_40000000;
	ya = (aa + tmp) - tmp;
	yb = (aa - ya) + ab;


	final double[] $1 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[$0];
	aa = ya + $1[0];
	ab = yb + $1[1];

	tmp = aa * org.apache.commons.math3.util.FastMath.HEX_40000000;
	ya = (aa + tmp) - tmp;
	yb = (aa - ya) + ab;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xa = x - 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xb = ($0 - x) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp = $0 * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double aa = ($0 + $2) - $2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ab = $0 - $3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = $5[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = $5[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[$8]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




	double $0 = x - 1.0;
	double $1 = ($0 - x) + 1.0;
	double $2 = $0 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $3 = ($0 + $2) - $2;
	double $4 = $0 - $3;
	$0 = $3;
	$1 = $4;

	final double[] $5 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 1];
	double $6 = $5[0];
	double $7 = $5[1];

	for (int $8 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 2; $8 >= 0; $8--) {

		$3 = $6 * $0;
		$4 = (($6 * $1) + ($7 * $0)) + ($7 * $1);

		$2 = $3 * org.apache.commons.math3.util.FastMath.HEX_40000000;
		$6 = ($3 + $2) - $2;
		$7 = ($3 - $6) + $4;


		final double[] $9 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[$8];
		$3 = $6 + $9[0];
		$4 = $7 + $9[1];

		$2 = $3 * org.apache.commons.math3.util.FastMath.HEX_40000000;
		$6 = ($3 + $2) - $2;
		$7 = ($3 - $6) + $4;
	}


	$3 = $6 * $0;
	$4 = (($6 * $1) + ($7 * $0)) + ($7 * $1);

	$2 = $3 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	$6 = ($3 + $2) - $2;
	$7 = ($3 - $6) + $4;

	return $6 + $7;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xa = x - 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xb = ($0 - x) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp = $0 * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double aa = ($0 + $2) - $2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ab = $0 - $3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = $5[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = $5[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[$8]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((exp == (-1)) || (exp == 0)) {
	if (((x < 1.01) && (x > 0.99)) && (hiPrec == null)) {




		double $0 = x - 1.0;
		double $1 = ($0 - x) + 1.0;
		double $2 = $0 * org.apache.commons.math3.util.FastMath.HEX_40000000;
		double $3 = ($0 + $2) - $2;
		double $4 = $0 - $3;
		$0 = $3;
		$1 = $4;

		final double[] $5 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 1];
		double $6 = $5[0];
		double $7 = $5[1];

		for (int $8 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 2; $8 >= 0; $8--) {

			$3 = $6 * $0;
			$4 = (($6 * $1) + ($7 * $0)) + ($7 * $1);

			$2 = $3 * org.apache.commons.math3.util.FastMath.HEX_40000000;
			$6 = ($3 + $2) - $2;
			$7 = ($3 - $6) + $4;


			final double[] $9 = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[$8];
			$3 = $6 + $9[0];
			$4 = $7 + $9[1];

			$2 = $3 * org.apache.commons.math3.util.FastMath.HEX_40000000;
			$6 = ($3 + $2) - $2;
			$7 = ($3 - $6) + $4;
		}


		$3 = $6 * $0;
		$4 = (($6 * $1) + ($7 * $0)) + ($7 * $1);

		$2 = $3 * org.apache.commons.math3.util.FastMath.HEX_40000000;
		$6 = ($3 + $2) - $2;
		$7 = ($3 - $6) + $4;

		return $6 + $7;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 0xffc0000000000L) >> 42))]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 0xffc0000000000L) >> 42))]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (bits & 0x3ffffffffffL) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double lnza = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double lnzb = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp = epsilon * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = epsilon * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double aa = (epsilon + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (epsilon + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ab = epsilon - aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = epsilon - aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xa = aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xb = ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double numer = bits & 0x3ffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = bits & 0x3ffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double denom = org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: aa = (numer - (xa * denom)) - (xb * denom)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb += aa / denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 2; $0 >= 0; $0--) {

	aa = ya * xa;
	ab = ((ya * xb) + (yb * xa)) + (yb * xb);

	tmp = aa * org.apache.commons.math3.util.FastMath.HEX_40000000;
	ya = (aa + tmp) - tmp;
	yb = (aa - ya) + ab;


	final double[] $1 = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[$0];
	aa = ya + $1[0];
	ab = yb + $1[1];

	tmp = aa * org.apache.commons.math3.util.FastMath.HEX_40000000;
	ya = (aa + tmp) - tmp;
	yb = (aa - ya) + ab;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = aa + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnzb = -((lnza - aa) - ab)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = -0.16624882440418567
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + 0.19999954120254515
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + (-0.2499999997677497)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + 0.3333333333332802
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + (-0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = (lnza * epsilon) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnza = lnza * epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp = epsilon * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double aa = (epsilon + $0) - $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ab = epsilon - $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xa = $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xb = $2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double numer = bits & 0x3ffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double denom = org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = $7[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = $7[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[$10]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {

	double $0 = epsilon * org.apache.commons.math3.util.FastMath.HEX_40000000;
	double $1 = (epsilon + $0) - $0;
	double $2 = epsilon - $1;
	double $3 = $1;
	double $4 = $2;


	final double $5 = bits & 0x3ffffffffffL;
	final double $6 = org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L);
	$1 = ($5 - ($3 * $6)) - ($4 * $6);
	$4 += $1 / $6;


	final double[] $7 = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 1];
	double $8 = $7[0];
	double $9 = $7[1];

	for (int $10 = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 2; $10 >= 0; $10--) {

		$1 = $8 * $3;
		$2 = (($8 * $4) + ($9 * $3)) + ($9 * $4);

		$0 = $1 * org.apache.commons.math3.util.FastMath.HEX_40000000;
		$8 = ($1 + $0) - $0;
		$9 = ($1 - $8) + $2;


		final double[] $11 = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[$10];
		$1 = $8 + $11[0];
		$2 = $9 + $11[1];

		$0 = $1 * org.apache.commons.math3.util.FastMath.HEX_40000000;
		$8 = ($1 + $0) - $0;
		$9 = ($1 - $8) + $2;
	}


	$1 = $8 * $3;
	$2 = (($8 * $4) + ($9 * $3)) + ($9 * $4);







	lnza = $1 + $2;
	lnzb = -((lnza - $1) - $2);
} else {


	lnza = -0.16624882440418567;
	lnza = (lnza * epsilon) + 0.19999954120254515;
	lnza = (lnza * epsilon) + (-0.2499999997677497);
	lnza = (lnza * epsilon) + 0.3333333333332802;
	lnza = (lnza * epsilon) + (-0.5);
	lnza = (lnza * epsilon) + 1.0;
	lnza = lnza * epsilon;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double a = org.apache.commons.math3.util.FastMath.LN_2_A * exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.LN_2_A * exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double b = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double c = a + lnm[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = a + lnm[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double d = -((c - a) - lnm[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((c - a) - lnm[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = b + d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + lnza
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - lnza)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + (org.apache.commons.math3.util.FastMath.LN_2_B * exp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - (org.apache.commons.math3.util.FastMath.LN_2_B * exp))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + lnm[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - lnm[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + lnzb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - lnzb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[0] = a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hiPrec[1] = b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (hiPrec != null) {
	hiPrec[0] = a;
	hiPrec[1] = b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == (-1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xpa = 1 + x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1 + x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xpb = -((xpa - 1) - x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = -((xpa - 1) - x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return lores
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(lores)) {
	return lores;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double fx1 = xpb / xpa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = xpb / xpa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double epsilon = (0.5 * fx1) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (0.5 * fx1) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return y * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xpa = 1 + x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xpb = -(($0 - 1) - x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] hiPrec = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double lores = org.apache.commons.math3.util.FastMath.log($0, $2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double fx1 = $1 / $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double epsilon = (0.5 * $4) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double y = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x > 1.0E-6) || 
(x < (-1.0E-6))) {
	final double $0 = 1 + x;
	final double $1 = -(($0 - 1) - x);

	final double[] $2 = new double[2];
	final double $3 = org.apache.commons.math3.util.FastMath.log($0, $2);
	if (java.lang.Double.isInfinite($3)) {
		return $3;
	}



	final double $4 = $1 / $0;
	final double $5 = (0.5 * $4) + 1;
	return (($5 * $4) + $2[1]) + $2[0];
} else {

	final double $6 = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1;
	return $6 * x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double lores = org.apache.commons.math3.util.FastMath.log(x, hiPrec)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.log(x, hiPrec)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmp = hiPrec[0] * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = hiPrec[0] * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double lna = (hiPrec[0] + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (hiPrec[0] + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double lnb = (hiPrec[0] - lna) + hiPrec[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (hiPrec[0] - lna) + hiPrec[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double rln10a = 0.4342944622039795
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 0.4342944622039795
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double rln10b = 1.9699272335463627E-8
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.9699272335463627E-8
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (((rln10b * lnb) + (rln10b * lna)) + (rln10a * lnb)) + (rln10a * lna)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.log(x) / org.apache.commons.math3.util.FastMath.log(base)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] lns = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == 0.0) {
	return 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long yi = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((y < 0) && (y == yi)) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((y > 0) && (y == yi)) && ((yi & 1) == 1)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long yi = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((bits & 0x8000000000000000L) != 0) {

	long $0 = ((long) (y));

	if (((y < 0) && (y == $0)) && (($0 & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	if (((y > 0) && (y == $0)) && (($0 & 1) == 1)) {
		return -0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y < 0) {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y > 0) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long bits = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long yi = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == 0) {
	long $0 = java.lang.Double.doubleToLongBits(x);
	if (($0 & 0x8000000000000000L) != 0) {

		long $1 = ((long) (y));

		if (((y < 0) && (y == $1)) && (($1 & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		if (((y > 0) && (y == $1)) && (($1 & 1) == 1)) {
			return -0.0;
		}
	}

	if (y < 0) {
		return java.lang.Double.POSITIVE_INFINITY;
	}
	if (y > 0) {
		return 0.0;
	}

	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y != y) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y < 0.0) {
	return 0.0;
} else {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.POSITIVE_INFINITY) {
	if (y != y) {
		return y;
	}
	if (y < 0.0) {
		return 0.0;
	} else {
		return java.lang.Double.POSITIVE_INFINITY;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x * x) == 1.0) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x * x) > 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == java.lang.Double.POSITIVE_INFINITY) {
	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) > 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y == yi) && ((yi & 1) == 1)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long yi = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y < 0) {
	long $0 = ((long) (y));
	if ((y == $0) && (($0 & 1) == 1)) {
		return -0.0;
	}

	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y == yi) && ((yi & 1) == 1)) {
	return java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long yi = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y > 0) {
	long $0 = ((long) (y));
	if ((y == $0) && (($0 & 1) == 1)) {
		return java.lang.Double.NEGATIVE_INFINITY;
	}

	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long yi = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long yi = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.NEGATIVE_INFINITY) {
	if (y != y) {
		return y;
	}

	if (y < 0) {
		long $0 = ((long) (y));
		if ((y == $0) && (($0 & 1) == 1)) {
			return -0.0;
		}

		return 0.0;
	}

	if (y > 0) {
		long $1 = ((long) (y));
		if ((y == $1) && (($1 & 1) == 1)) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}

		return java.lang.Double.POSITIVE_INFINITY;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x * x) < 1.0) {
	return java.lang.Double.POSITIVE_INFINITY;
} else {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == java.lang.Double.NEGATIVE_INFINITY) {

	if ((x * x) == 1.0) {
		return java.lang.Double.NaN;
	}

	if ((x * x) < 1.0) {
		return java.lang.Double.POSITIVE_INFINITY;
	} else {
		return 0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.pow(-x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y >= org.apache.commons.math3.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math3.util.FastMath.TWO_POWER_52))) {
	return org.apache.commons.math3.util.FastMath.pow(-x, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow(-x, y) : -org.apache.commons.math3.util.FastMath.pow(-x, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == ((long) (y))) {

	return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow(-x, y) : -org.apache.commons.math3.util.FastMath.pow(-x, y);
} else {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < 0) {

	if ((y >= org.apache.commons.math3.util.FastMath.TWO_POWER_52) || (y <= (-org.apache.commons.math3.util.FastMath.TWO_POWER_52))) {
		return org.apache.commons.math3.util.FastMath.pow(-x, y);
	}

	if (y == ((long) (y))) {

		return (((long) (y)) & 1) == 0 ? org.apache.commons.math3.util.FastMath.pow(-x, y) : -org.apache.commons.math3.util.FastMath.pow(-x, y);
	} else {
		return java.lang.Double.NaN;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp1 = y * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = y * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = (y + tmp1) - tmp1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = y - ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp1 = y * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = y * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp2 = tmp1 * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = tmp1 * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = (((tmp1 + tmp2) - tmp1) * org.apache.commons.math3.util.FastMath.HEX_40000000) * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp1 = y * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp1 = y * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp2 = $1 * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y < 8.0E298) && (y > (-8.0E298))) {
	double $0 = y * org.apache.commons.math3.util.FastMath.HEX_40000000;
	ya = (y + $0) - $0;
	yb = y - ya;
} else {
	double $1 = y * 9.313225746154785E-10;
	double $2 = $1 * 9.313225746154785E-10;
	ya = ((($1 + $2) - $1) * org.apache.commons.math3.util.FastMath.HEX_40000000) * org.apache.commons.math3.util.FastMath.HEX_40000000;
	yb = y - ya;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double lores = org.apache.commons.math3.util.FastMath.log(x, lns)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.log(x, lns)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double lna = lns[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = lns[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double lnb = lns[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = lns[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp1 = lna * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = lna * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp2 = (lna + tmp1) - tmp1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (lna + tmp1) - tmp1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnb += lna - tmp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lna = tmp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double aa = lna * ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = lna * ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ab = ((lna * yb) + (lnb * ya)) + (lnb * yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ((lna * yb) + (lnb * ya)) + (lnb * yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lna = aa + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: lnb = -((lna - aa) - ab)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double z = 1.0 / 120.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.0 / 120.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * lnb) + (1.0 / 24.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * lnb) + (1.0 / 6.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * lnb) + 0.5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = (z * lnb) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: z = z * lnb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = org.apache.commons.math3.util.FastMath.exp(lna, z, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.exp(lna, z, null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: e = -e
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = 1.0 / d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (e < 0) {
	e = -e;
	d = 1.0 / d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (e == 0) {
	return 1.0;
} else { 	if (e < 0) {
		e = -e;
		d = 1.0 / d;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int splitFactor = 0x8000001
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = 0x8000001
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cd = splitFactor * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = splitFactor * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d1High = cd - (cd - d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = cd - (cd - d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d1Low = d - d1High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = d - d1High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double resultHigh = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double resultLow = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double d2p = d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double d2pHigh = d1High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = d1High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double d2pLow = d1Low
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = d1Low
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpHigh = resultHigh * d2p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = resultHigh * d2p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cRH = splitFactor * resultHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = splitFactor * resultHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double rHH = cRH - (cRH - resultHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = cRH - (cRH - resultHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double rHL = resultHigh - rHH
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = resultHigh - rHH
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: resultHigh = tmpHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: resultLow = (resultLow * d2p) + tmpLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpHigh = resultHigh * d2p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cRH = splitFactor * resultHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double rHH = $1 - ($1 - resultHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double rHL = resultHigh - $2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpLow = ($3 * d2pLow) - ((($0 - ($2 * d2pHigh)) - ($3 * d2pHigh)) - ($2 * d2pLow))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((e & 0x1) != 0) {


	final double $0 = resultHigh * d2p;
	final double $1 = splitFactor * resultHigh;
	final double $2 = $1 - ($1 - resultHigh);
	final double $3 = resultHigh - $2;
	final double $4 = ($3 * d2pLow) - ((($0 - ($2 * d2pHigh)) - ($3 * d2pHigh)) - ($2 * d2pLow));
	resultHigh = $0;
	resultLow = (resultLow * d2p) + $4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpHigh = d2pHigh * d2p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = d2pHigh * d2p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cD2pH = splitFactor * d2pHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = splitFactor * d2pHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d2pHH = cD2pH - (cD2pH - d2pHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = cD2pH - (cD2pH - d2pHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d2pHL = d2pHigh - d2pHH
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = d2pHigh - d2pHH
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpLow = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (d2pHL * d2pLow) - (((tmpHigh - (d2pHH * d2pHigh)) - (d2pHL * d2pHigh)) - (d2pHH * d2pLow))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cTmpH = splitFactor * tmpHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = splitFactor * tmpHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d2pHigh = cTmpH - (cTmpH - tmpHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d2p = d2pHigh + d2pLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpHigh = resultHigh * d2p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cRH = splitFactor * resultHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double rHH = $1 - ($1 - resultHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double rHL = resultHigh - $2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpLow = ($3 * d2pLow) - ((($0 - ($2 * d2pHigh)) - ($3 * d2pHigh)) - ($2 * d2pLow))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpHigh = d2pHigh * d2p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cD2pH = splitFactor * d2pHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d2pHH = $6 - ($6 - d2pHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d2pHL = d2pHigh - $7
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double tmpLow = ($8 * d2pLow) - ((($5 - ($7 * d2pHigh)) - ($8 * d2pHigh)) - ($7 * d2pLow))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cTmpH = splitFactor * $5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (e != 0) {

	if ((e & 0x1) != 0) {


		final double $0 = resultHigh * d2p;
		final double $1 = splitFactor * resultHigh;
		final double $2 = $1 - ($1 - resultHigh);
		final double $3 = resultHigh - $2;
		final double $4 = ($3 * d2pLow) - ((($0 - ($2 * d2pHigh)) - ($3 * d2pHigh)) - ($2 * d2pLow));
		resultHigh = $0;
		resultLow = (resultLow * d2p) + $4;
	}



	final double $5 = d2pHigh * d2p;
	final double $6 = splitFactor * d2pHigh;
	final double $7 = $6 - ($6 - d2pHigh);
	final double $8 = d2pHigh - $7;
	final double $9 = ($8 * d2pLow) - ((($5 - ($7 * d2pHigh)) - ($8 * d2pHigh)) - ($7 * d2pLow));
	final double $10 = splitFactor * $5;
	d2pHigh = $10 - ($10 - $5);
	d2pLow = ((d2pLow * d2p) + $9) + ($5 - d2pHigh);
	d2p = d2pHigh + d2pLow;

	e = e >> 1;

} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return resultHigh + resultLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double x2 = x * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = x * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double p = 2.7553817452272217E-6
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 2.7553817452272217E-6
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + (-1.9841269659586505E-4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + 0.008333333333329196
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + (-0.16666666666666666)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return p
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double p = 2.479773539153719E-5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 2.479773539153719E-5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + (-0.0013888888689039883)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + 0.041666666666621166
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p = (p * x2) + (-0.49999999999999994)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p *= x2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int idx = ((int) ((xa * 8.0) + 0.5))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = ((int) ((xa * 8.0) + 0.5))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double epsilon = xa - org.apache.commons.math3.util.FastMath.EIGHTHS[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = xa - org.apache.commons.math3.util.FastMath.EIGHTHS[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double sintA = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.SINE_TABLE_A[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double sintB = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.SINE_TABLE_B[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double costA = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.COSINE_TABLE_A[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double costB = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.COSINE_TABLE_B[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sinEpsA = epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sinEpsB = org.apache.commons.math3.util.FastMath.polySine(epsilon)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.polySine(epsilon)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cosEpsA = 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cosEpsB = org.apache.commons.math3.util.FastMath.polyCosine(epsilon)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.polyCosine(epsilon)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double temp = sinEpsA * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = sinEpsA * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp2 = (sinEpsA + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (sinEpsA + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sinEpsB += sinEpsA - temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sinEpsA = temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double a = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double b = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double t = sintA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = sintA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double c = a + t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = a + t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double d = -((c - a) - t)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((c - a) - t)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = costA * sinEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = a + t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = -((c - a) - t)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = (b + (sintA * cosEpsB)) + (costA * sinEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
((sintA + sintB) * (sinEpsA + sinEpsB))) * xb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xb != 0.0) {
	t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
	((sintA + sintB) * (sinEpsA + sinEpsB))) * xb;
	c = a + t;
	d = -((c - a) - t);
	a = c;
	b = b + d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double pi2a = 1.5707963267948966
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.5707963267948966
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double pi2b = 6.123233995736766E-17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 6.123233995736766E-17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = pi2a - xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = pi2a - xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double b = -((a - pi2a) + xa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((a - pi2a) + xa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b += pi2b - xb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.sinQ(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = sinEpsA * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = sinEpsA * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sina = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sinb = -((sina - a) - b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((sina - a) - b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = b = c = d = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = costA * cosEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: t = (-sintA) * sinEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double cosa = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double cosb = -((cosa - a) - b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((cosa - a) - b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: cosa = sina
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sina = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = cosb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: cosb = sinb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sinb = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (cotanFlag) {
	double $0;
	$0 = cosa; 	cosa = sina; 	sina = $0;
	$0 = cosb; 	cosb = sinb; 	sinb = $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double est = sina / cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = sina / cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = est * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double esta = (est + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (est + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double estb = est - esta
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = est - esta
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = cosa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double cosaa = (cosa + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (cosa + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double cosab = cosa - cosaa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = cosa - cosaa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double err = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ((((sina - (esta * cosaa)) - (esta * cosab)) - (estb * cosaa)) - (estb * cosab)) / cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: err += sinb / cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: err += (((-sina) * cosb) / cosa) / cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xbadj = xb + ((est * est) * xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = xb + ((est * est) * xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xbadj = -xbadj
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (cotanFlag) {
	xbadj = -xbadj;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: err += xbadj
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xbadj = xb + ((est * est) * xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xb != 0.0) {


	double $0 = xb + ((est * est) * xb);
	if (cotanFlag) {
		$0 = -$0;
	}

	err += $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return est + err
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long inbits = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = ((int) ((inbits >> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: inbits &= 0xfffffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: inbits |= 0x10000000000000L
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: exponent++
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: inbits <<= 11
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long shpi0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long shpiA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long shpiB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int idx = exponent >> 6
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = exponent >> 6
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int shift = exponent - (idx << 6)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = exponent - (idx << 6)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1] << shift
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpi0 |= org.apache.commons.math3.util.FastMath.RECIP_2PI[idx] >>> (64 - shift)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpiA = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpiB = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (shift != 0) {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1] << shift;
	shpi0 |= org.apache.commons.math3.util.FastMath.RECIP_2PI[idx] >>> (64 - shift);
	shpiA = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift));
	shpiB = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift));
} else {
	shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1];
	shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx];
	shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long a = inbits >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = inbits >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long b = inbits & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = inbits & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long c = shpiA >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = shpiA >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long d = shpiA & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = shpiA & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long ac = a * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = a * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long bd = b * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = b * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long bc = b * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = b * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long ad = a * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = a * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long prodB = bd + (ad << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = bd + (ad << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long prodA = ac + (ad >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = ac + (ad >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean bita = (bd & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: boolean $0 = (bd & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean bitb = (ad & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: boolean $0 = (ad & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean bitsum = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: boolean $0 = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodA++
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prodA++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bita = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitb = (bc & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodB = prodB + (bc << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodA = prodA + (bc >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitsum = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = shpiB >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = shpiB & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ac = a * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bc = b * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ad = a * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ac = ac + ((bc + ad) >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitb = (ac & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodB += ac
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = shpi0 >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = shpi0 & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bd = b * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodA += bd + ((bc + ad) << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int intPart = ((int) (prodA >>> 62))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = ((int) (prodA >>> 62))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodA <<= 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodA |= prodB >>> 62
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodB <<= 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = prodA >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = prodA & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long prod2B = bd + (ad << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = bd + (ad << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long prod2A = ac + (ad >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = ac + (ad >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bita = (bd & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitb = (ad & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bitsum = (prod2B & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prod2A++
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((bita && bitb) || 
((bita || bitb) && (!bitsum))) {
	prod2A++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bita = (prod2B & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prod2B = prod2B + (bc << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prod2A = prod2A + (bc >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prod2B += ac
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = prodB >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = prodB & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmpA = (prod2A >>> 12) / org.apache.commons.math3.util.FastMath.TWO_POWER_52
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (prod2A >>> 12) / org.apache.commons.math3.util.FastMath.TWO_POWER_52
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmpB = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math3.util.FastMath.TWO_POWER_52) / org.apache.commons.math3.util.FastMath.TWO_POWER_52
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ((((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / org.apache.commons.math3.util.FastMath.TWO_POWER_52) / org.apache.commons.math3.util.FastMath.TWO_POWER_52
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumA = tmpA + tmpB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = tmpA + tmpB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sumB = -((sumA - tmpA) - tmpB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((sumA - tmpA) - tmpB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = intPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = sumA * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[2] = sumB * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int quadrant = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xb = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = -xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < 0) {
	negative = true;
	xa = -xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (bits < 0) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long bits = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xa == 0.0) {
	long $0 = java.lang.Double.doubleToLongBits(x);
	if ($0 < 0) {
		return -0.0;
	}
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((xa != xa) || (xa == java.lang.Double.POSITIVE_INFINITY)) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] reduceResults = new double[3]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[3]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, reduceResults)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: quadrant = ((int) (reduceResults[0])) & 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = reduceResults[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = reduceResults[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.util.FastMath.CodyWaite $0 = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: quadrant = cw.getK() & 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = cw.getRemA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = cw.getRemB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xa > 1.5707963267948966) {
	final org.apache.commons.math3.util.FastMath.CodyWaite $0 = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
	quadrant = $0.getK() & 3;
	xa = $0.getRemA();
	xb = $0.getRemB();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] reduceResults = new double[3]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.FastMath.CodyWaite cw = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xa > 3294198.0) {



	double[] $0 = new double[3];
	org.apache.commons.math3.util.FastMath.reducePayneHanek(xa, $0);
	quadrant = ((int) ($0[0])) & 3;
	xa = $0[1];
	xb = $0[2];
} else { 	if (xa > 1.5707963267948966) {
		final org.apache.commons.math3.util.FastMath.CodyWaite $1 = new org.apache.commons.math3.util.FastMath.CodyWaite(xa, xb);
		quadrant = $1.getK() & 3;
		xa = $1.getRemA();
		xb = $1.getRemB();
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: quadrant ^= 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (negative) {
	quadrant ^= 2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: switch (quadrant) {
	case 0 :
		return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
	case 1 :
		return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
	case 2 :
		return -org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
	case 3 :
		return -org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
	default :
		return java.lang.Double.NaN;}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xa = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < 0) {
	xa = -xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xb = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: switch (quadrant) {
	case 0 :
		return org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
	case 1 :
		return -org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
	case 2 :
		return -org.apache.commons.math3.util.FastMath.cosQ(xa, xb);
	case 3 :
		return org.apache.commons.math3.util.FastMath.sinQ(xa, xb);
	default :
		return java.lang.Double.NaN;}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = -((xa - a) - b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: quadrant ^= 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: negative ^= true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double pi2a = 1.5707963267948966
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double pi2b = 6.123233995736766E-17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = $0 - xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double b = -(($2 - $0) + xa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xa > 1.5) {

	final double $0 = 1.5707963267948966;
	final double $1 = 6.123233995736766E-17;

	final double $2 = $0 - xa;
	double $3 = -(($2 - $0) + xa);
	$3 += $1 - xb;

	xa = $2 + $3;
	xb = -((xa - $2) - $3);
	quadrant ^= 1;
	negative ^= true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = -org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((quadrant & 1) == 0) {
	result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false);
} else {
	result = -org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (negative) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.atan(x, 0.0, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int idx
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xa == 0.0) {
	return leftPlane ? org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, xa) : xa;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb = -xb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xa < 0) {

	xa = -xa;
	xb = -xb;
	negate = true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xa > 1.633123935319537E16) {
	return negate ^ leftPlane ? (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2 : java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double oneOverXa = 1 / xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1 / xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double oneOverXa = 1 / xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xa < 1) {
	idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5));
} else {
	final double $0 = 1 / xa;
	idx = ((int) ((-(((((-1.7168146928204135) * $0) * $0) + 8.0) * $0)) + 13.07));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double epsA = xa - org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = xa - org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double epsB = -((epsA - xa) + org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((epsA - xa) + org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsB += xb - org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = epsA + epsB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = epsA + epsB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsB = -((temp - epsA) - epsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsA = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = xa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = (xa + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (xa + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = (xb + xa) - ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (xb + xa) - ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xa = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xb += yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double denom = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx])))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx])))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = epsA * denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = epsB * denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp2 = xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double za = 1.0 + temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.0 + temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double zb = -((za - 1.0) - temp2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((za - 1.0) - temp2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp2 = (xb * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = za + temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb += -((temp - za) - temp2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb += xb * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = epsA / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double yaa = (ya + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (ya + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double yab = ya - yaa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ya - yaa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double zaa = (za + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (za + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double zab = za - zaa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = za - zaa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += (((-epsA) * zb) / za) / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += epsB / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double denom = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx])))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp2 = xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double za = 1.0 + $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double zb = -(($2 - 1.0) - $1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double yaa = (ya + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double yab = ya - $4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double zaa = ($2 + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double zab = $2 - $6
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (idx == 0) {


	final double $0 = 1.0 / (1.0 + ((xa + xb) * (org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx] + org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx])));

	ya = epsA * $0;
	yb = epsB * $0;
} else {
	double $1 = xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx];
	double $2 = 1.0 + $1;
	double $3 = -(($2 - 1.0) - $1);
	$1 = (xb * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]);
	temp = $2 + $1;
	$3 += -((temp - $2) - $1);
	$2 = temp;

	$3 += xb * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx];
	ya = epsA / $2;

	temp = ya * org.apache.commons.math3.util.FastMath.HEX_40000000;
	final double $4 = (ya + temp) - temp;
	final double $5 = ya - $4;

	temp = $2 * org.apache.commons.math3.util.FastMath.HEX_40000000;
	final double $6 = ($2 + temp) - temp;
	final double $7 = $2 - $6;


	yb = ((((epsA - ($4 * $6)) - ($4 * $7)) - ($5 * $6)) - ($5 * $7)) / $2;

	yb += (((-epsA) * $3) / $2) / $2;
	yb += epsB / $2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsA = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: epsB = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double epsA2 = epsA * epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = epsA * epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = 0.07490822288864472
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + (-0.09088450866185192)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + 0.11111095942313305
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + (-0.1428571423679182)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + 0.19999999999923582
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) + (-0.33333333333333287)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = (yb * epsA2) * epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = -((temp - ya) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += epsB / (1.0 + (epsA * epsA))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double za = org.apache.commons.math3.util.FastMath.EIGHTHS[idx] + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.EIGHTHS[idx] + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double zb = -((za - org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((za - org.apache.commons.math3.util.FastMath.EIGHTHS[idx]) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = za + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb += -((temp - za) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = za + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = za + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double resultb = -((result - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((result - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double pia = 1.5707963267948966 * 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.5707963267948966 * 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double pib = 6.123233995736766E-17 * 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 6.123233995736766E-17 * 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = pia - result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = -((za - pia) + result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb += pib - resultb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = za + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: resultb = -((result - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double pia = 1.5707963267948966 * 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double pib = 6.123233995736766E-17 * 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (leftPlane) {

	final double $0 = 1.5707963267948966 * 2;
	final double $1 = 6.123233995736766E-17 * 2;

	za = $0 - result;
	zb = -((za - $0) + result);
	zb += $1 - resultb;

	result = za + zb;
	resultb = -((result - za) - zb);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (negate ^ leftPlane) {
	result = -result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x != x) || (y != y)) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = x * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = x * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double invx = 1.0 / x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0 / x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double invy = 1.0 / y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0 / y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x > 0) {
	return y;
} else {
	return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (invx == 0) {
	if (x > 0) {
		return y;
	} else {
		return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -java.lang.Math.PI
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y < 0) || (invy < 0)) {
	return -java.lang.Math.PI;
} else {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x < 0) || (invx < 0)) {
	if ((y < 0) || (invy < 0)) {
		return -java.lang.Math.PI;
	} else {
		return java.lang.Math.PI;
	}
} else {
	return result;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = x * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double invx = 1.0 / x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double invy = 1.0 / y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == 0) {
	final double $0 = x * y;
	final double $1 = 1.0 / x;
	final double $2 = 1.0 / y;

	if ($1 == 0) {
		if (x > 0) {
			return y;
		} else {
			return org.apache.commons.math3.util.FastMath.copySign(java.lang.Math.PI, y);
		}
	}

	if ((x < 0) || ($1 < 0)) {
		if ((y < 0) || ($2 < 0)) {
			return -java.lang.Math.PI;
		} else {
			return java.lang.Math.PI;
		}
	} else {
		return $0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_3_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_3_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == java.lang.Double.POSITIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_3_4;
	}

	return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.POSITIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_3_4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.NEGATIVE_INFINITY) {
	return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_3_4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == java.lang.Double.NEGATIVE_INFINITY) {
	if (x == java.lang.Double.POSITIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_4;
	}

	if (x == java.lang.Double.NEGATIVE_INFINITY) {
		return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_3_4;
	}

	return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y > 0) || ((1 / y) > 0)) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y < 0) || ((1 / y) < 0)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.POSITIVE_INFINITY) {
	if ((y > 0) || ((1 / y) > 0)) {
		return 0.0;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -0.0;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y > 0.0) || ((1 / y) > 0.0)) {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y < 0) || ((1 / y) < 0)) {
	return -java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == java.lang.Double.NEGATIVE_INFINITY) 
{
	if ((y > 0.0) || ((1 / y) > 0.0)) {
		return java.lang.Math.PI;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return -java.lang.Math.PI;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y > 0) || ((1 / y) > 0)) {
	return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((y < 0) || ((1 / y) < 0)) {
	return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == 0) {
	if ((y > 0) || ((1 / y) > 0)) {
		return java.lang.Math.PI * org.apache.commons.math3.util.FastMath.F_1_2;
	}

	if ((y < 0) || ((1 / y) < 0)) {
		return (-java.lang.Math.PI) * org.apache.commons.math3.util.FastMath.F_1_2;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double r = y / x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = y / x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.atan(r, 0, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(r)) {
	return org.apache.commons.math3.util.FastMath.atan(r, 0, x < 0);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ra = org.apache.commons.math3.util.FastMath.doubleHighPart(r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.doubleHighPart(r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double rb = r - ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = r - ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.doubleHighPart(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xb = x - xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = x - xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb += ((((y - (ra * xa)) - (ra * xb)) - (rb * xa)) - (rb * xb)) / x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double temp = ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb = -((temp - ra) - rb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ra = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (ra == 0) {
	ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double result = org.apache.commons.math3.util.FastMath.atan(ra, rb, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.atan(ra, rb, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x != x) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x > 1.0) || (x < (-1.0))) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI / 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == 1.0) {
	return java.lang.Math.PI / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-java.lang.Math.PI) / 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == (-1.0)) {
	return (-java.lang.Math.PI) / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == 0.0) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = x * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = x * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xa = (x + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (x + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = xa * xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = xa * xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = ((xa * xb) * 2.0) + (xb * xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ((xa * xb) * 2.0) + (xb * xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = -ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = -yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double za = 1.0 + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.0 + ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double zb = -((za - 1.0) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((za - 1.0) - ya)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y = org.apache.commons.math3.util.FastMath.sqrt(za)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = y * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ya = (y + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += (((za - (ya * ya)) - ((2 * ya) * yb)) - (yb * yb)) / (2.0 * y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double dx = zb / (2.0 * y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = zb / (2.0 * y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x / y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = x / y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = r * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ra = (r + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (r + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb += ((((x - (ra * ya)) - (ra * yb)) - (rb * ya)) - (rb * yb)) / y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb += (((-x) * dx) / y) / y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temp = ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.atan(ra, rb, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == (-1.0)) {
	return java.lang.Math.PI;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == 1.0) {
	return 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == 0) {
	return java.lang.Math.PI / 2.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double y = org.apache.commons.math3.util.FastMath.sqrt(za)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.sqrt(za)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb += zb / (2.0 * y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yb = -((y - ya) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = y / x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = y / x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Math.PI / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(r)) {
	return java.lang.Math.PI / 2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rb += yb / x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.atan(ra, rb, x < 0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean subnormal = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: boolean $0 = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: subnormal = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x *= 1.8014398509481984E16
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: inbits = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (exponent == (-1023)) {
	if (x == 0) {
		return x;
	}


	subnormal = true;
	x *= 1.8014398509481984E16;
	inbits = java.lang.Double.doubleToLongBits(x);
	exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (exponent == 1024) {

	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int exp3 = exponent / 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = exponent / 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double p2 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = java.lang.Double.longBitsToDouble((inbits & 0x8000000000000000L) | 
(((long) ((exp3 + 1023) & 0x7ff)) << 52))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double mant = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = java.lang.Double.longBitsToDouble((inbits & 0xfffffffffffffL) | 0x3ff0000000000000L)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double est = -0.010714690733195933
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -0.010714690733195933
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est = (est * mant) + 0.0875862700108075
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est = (est * mant) + (-0.3058015757857271)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est = (est * mant) + 0.7249995199969751
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est = (est * mant) + 0.5039018405998233
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est *= org.apache.commons.math3.util.FastMath.CBRTTWO[(exponent % 3) + 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double xs = x / ((p2 * p2) * p2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = x / ((p2 * p2) * p2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est += (xs - ((est * est) * est)) / ((3 * est) * est)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp = est * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = est * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double ya = (est + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (est + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double yb = est - ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = est - ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double za = ya * ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ya * ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double zb = ((ya * yb) * 2.0) + (yb * yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = ((ya * yb) * 2.0) + (yb * yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double temp2 = (za + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (za + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb += za - temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zb = ((za * yb) + (ya * zb)) + (zb * yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: za = za * ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double na = xs - za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = xs - za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double nb = -((na - xs) + za)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = -((na - xs) + za)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: nb -= zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est += (na + nb) / ((3 * est) * est)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est *= p2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: est *= 3.814697265625E-6
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (subnormal) {
	est *= 3.814697265625E-6;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return est
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(x) || (x == 0.0)) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double facta = 0.01745329052209854
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 0.01745329052209854
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double factb = 1.997844754509471E-9
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.997844754509471E-9
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xa = org.apache.commons.math3.util.FastMath.doubleHighPart(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.doubleHighPart(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xb = x - xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = x - xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (result == 0) {
	result = result * x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double facta = 57.2957763671875
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 57.2957763671875
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double factb = 3.145894820876798E-6
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 3.145894820876798E-6
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (((xb * factb) + (xb * facta)) + (xa * factb)) + (xa * facta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x < 0 ? -x : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x < 0L ? -x : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x < 0.0F ? -x : x == 0.0F ? 0.0F : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x < 0.0 ? -x : x == 0.0 ? 0.0 : x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(x)) {
	return java.lang.Double.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Double.longBitsToDouble(java.lang.Double.doubleToLongBits(x) ^ 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Float.isInfinite(x)) {
	return java.lang.Float.POSITIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(x - java.lang.Float.intBitsToFloat(java.lang.Float.floatToIntBits(x) ^ 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((n > (-1023)) && (n < 1024)) {
	return d * java.lang.Double.longBitsToDouble(((long) (n + 1023)) << 52);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) || (d == 0)) {
	return d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d > 0 ? 0.0 : -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < (-2098)) {
	return d > 0 ? 0.0 : -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n > 2097) {
	return d > 0 ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long bits = java.lang.Double.doubleToLongBits(d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final long $0 = java.lang.Double.doubleToLongBits(d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long sign = bits & 0x8000000000000000L
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final long $0 = bits & 0x8000000000000000L
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int exponent = ((int) (bits >>> 52)) & 0x7ff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = ((int) (bits >>> 52)) & 0x7ff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long mantissa = bits & 0xfffffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = bits & 0xfffffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int scaledExponent = exponent + n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = exponent + n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa | (1L << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final long $0 = mantissa & (1L << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa >>> (1 - scaledExponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa++
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (mostSignificantLostBit != 0) {

	mantissa++;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble(sign | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sign == 0L ? 0.0 : -0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (scaledExponent > (-53)) {



	mantissa = mantissa | (1L << 52);


	final long $0 = mantissa & (1L << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if ($0 != 0) {

		mantissa++;
	}
	return java.lang.Double.longBitsToDouble(sign | mantissa);

} else {

	return sign == 0L ? 0.0 : -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (scaledExponent > 0) {

	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else { 	if (scaledExponent > (-53)) {



		mantissa = mantissa | (1L << 52);


		final long $0 = mantissa & (1L << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if ($0 != 0) {

			mantissa++;
		}
		return java.lang.Double.longBitsToDouble(sign | mantissa);

	} else {

		return sign == 0L ? 0.0 : -0.0;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa << 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: --scaledExponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while ((mantissa >>> 52) != 1) {
	mantissa = mantissa << 1;
	--scaledExponent;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ++scaledExponent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa & 0xfffffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (scaledExponent < 2047) {
	return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
} else {
	return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (exponent == 0) {


	while ((mantissa >>> 52) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0xfffffffffffffL;

	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 2047) {
		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else {
		return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
	} else { 		if (scaledExponent > (-53)) {



			mantissa = mantissa | (1L << 52);


			final long $0 = mantissa & (1L << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if ($0 != 0) {

				mantissa++;
			}
			return java.lang.Double.longBitsToDouble(sign | mantissa);

		} else {

			return sign == 0L ? 0.0 : -0.0;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 52) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0xfffffffffffffL;

		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 2047) {
			return java.lang.Double.longBitsToDouble((sign | (((long) (scaledExponent)) << 52)) | mantissa);
		} else {
			return sign == 0L ? java.lang.Double.POSITIVE_INFINITY : java.lang.Double.NEGATIVE_INFINITY;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f * java.lang.Float.intBitsToFloat((n + 127) << 23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((n > (-127)) && (n < 128)) {
	return f * java.lang.Float.intBitsToFloat((n + 127) << 23);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((java.lang.Float.isNaN(f) || java.lang.Float.isInfinite(f)) || (f == 0.0F)) {
	return f;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f > 0 ? 0.0F : -0.0F
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < (-277)) {
	return f > 0 ? 0.0F : -0.0F;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n > 276) {
	return f > 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int bits = java.lang.Float.floatToIntBits(f)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = java.lang.Float.floatToIntBits(f)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int sign = bits & 0x80000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = bits & 0x80000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int exponent = (bits >>> 23) & 0xff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = (bits >>> 23) & 0xff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int mantissa = bits & 0x7fffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = bits & 0x7fffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa | (1 << 23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = mantissa & (1 << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.intBitsToFloat(sign | mantissa)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sign == 0 ? 0.0F : -0.0F
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (scaledExponent > (-24)) {



	mantissa = mantissa | (1 << 23);


	final int $0 = mantissa & (1 << (-scaledExponent));
	mantissa = mantissa >>> (1 - scaledExponent);
	if ($0 != 0) {

		mantissa++;
	}
	return java.lang.Float.intBitsToFloat(sign | mantissa);

} else {

	return sign == 0 ? 0.0F : -0.0F;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (scaledExponent > 0) {

	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else { 	if (scaledExponent > (-24)) {



		mantissa = mantissa | (1 << 23);


		final int $0 = mantissa & (1 << (-scaledExponent));
		mantissa = mantissa >>> (1 - scaledExponent);
		if ($0 != 0) {

			mantissa++;
		}
		return java.lang.Float.intBitsToFloat(sign | mantissa);

	} else {

		return sign == 0 ? 0.0F : -0.0F;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while ((mantissa >>> 23) != 1) {
	mantissa = mantissa << 1;
	--scaledExponent;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mantissa = mantissa & 0x7fffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (scaledExponent < 255) {
	return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
} else {
	return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (exponent == 0) {


	while ((mantissa >>> 23) != 1) {
		mantissa = mantissa << 1;
		--scaledExponent;
	} 
	++scaledExponent;
	mantissa = mantissa & 0x7fffff;

	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}

} else { 	if (scaledExponent < 255) {
		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else {
		return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < 0) {

	if (scaledExponent > 0) {

		return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
	} else { 		if (scaledExponent > (-24)) {



			mantissa = mantissa | (1 << 23);


			final int $0 = mantissa & (1 << (-scaledExponent));
			mantissa = mantissa >>> (1 - scaledExponent);
			if ($0 != 0) {

				mantissa++;
			}
			return java.lang.Float.intBitsToFloat(sign | mantissa);

		} else {

			return sign == 0 ? 0.0F : -0.0F;
		}}
} else {

	if (exponent == 0) {


		while ((mantissa >>> 23) != 1) {
			mantissa = mantissa << 1;
			--scaledExponent;
		} 
		++scaledExponent;
		mantissa = mantissa & 0x7fffff;

		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}

	} else { 		if (scaledExponent < 255) {
			return java.lang.Float.intBitsToFloat((sign | (scaledExponent << 23)) | mantissa);
		} else {
			return sign == 0 ? java.lang.Float.POSITIVE_INFINITY : java.lang.Float.NEGATIVE_INFINITY;
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return direction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d == 0) {
	return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(d)) {
	return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
} else { 	if (d == 0) {
		return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d == direction) {
	return direction;
} else { 	if (java.lang.Double.isInfinite(d)) {
		return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
	} else { 		if (d == 0) {
			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(d) || java.lang.Double.isNaN(direction)) {
	return java.lang.Double.NaN;
} else { 	if (d == direction) {
		return direction;
	} else { 		if (java.lang.Double.isInfinite(d)) {
			return d < 0 ? -java.lang.Double.MAX_VALUE : java.lang.Double.MAX_VALUE;
		} else { 			if (d == 0) {
				return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((direction < d) ^ (sign == 0L)) {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
} else {
	return java.lang.Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (direction))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (f == 0.0F) {
	return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Float.isInfinite(f)) {
	return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
} else { 	if (f == 0.0F) {
		return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (f == direction) {
	return ((float) (direction));
} else { 	if (java.lang.Float.isInfinite(f)) {
		return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
	} else { 		if (f == 0.0F) {
			return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
		}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(f) || java.lang.Double.isNaN(direction)) {
	return java.lang.Float.NaN;
} else { 	if (f == direction) {
		return ((float) (direction));
	} else { 		if (java.lang.Float.isInfinite(f)) {
			return f < 0.0F ? -java.lang.Float.MAX_VALUE : java.lang.Float.MAX_VALUE;
		} else { 			if (f == 0.0F) {
				return direction < 0 ? -java.lang.Float.MIN_VALUE : java.lang.Float.MIN_VALUE;
			}}}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((direction < f) ^ (sign == 0)) {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
} else {
	return java.lang.Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x >= org.apache.commons.math3.util.FastMath.TWO_POWER_52) || (x <= (-org.apache.commons.math3.util.FastMath.TWO_POWER_52))) {
	return x;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y = ((long) (x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y--
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x < 0) && (y != x)) {
	y--;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return x * y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == 0) {
	return x * y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y = org.apache.commons.math3.util.FastMath.floor(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == x) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y += 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double y = org.apache.commons.math3.util.FastMath.floor(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = org.apache.commons.math3.util.FastMath.floor(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double d = x - y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = x - y
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == (-1.0)) {
	return -0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return y + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d > 0.5) {
	if (y == (-1.0)) {
		return -0.0;
	}
	return y + 1.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d < 0.5) {
	return y;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long z = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = ((long) (y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (z & 1) == 0 ? y : y + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((long) (org.apache.commons.math3.util.FastMath.floor(x + 0.5)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) (org.apache.commons.math3.util.FastMath.floor(x + 0.5F)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a <= b ? a : b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > b) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a < b) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a != b) {
	return java.lang.Float.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int bits = java.lang.Float.floatToRawIntBits(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = java.lang.Float.floatToRawIntBits(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (bits == 0x80000000) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a != b) {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long bits = java.lang.Double.doubleToRawLongBits(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = java.lang.Double.doubleToRawLongBits(a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (bits == 0x8000000000000000L) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a <= b ? b : a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a > b) {
	return a;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (a < b) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (bits == 0x80000000) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (bits == 0x8000000000000000L) {
	return b;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int expX = org.apache.commons.math3.util.FastMath.getExponent(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.FastMath.getExponent(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int expY = org.apache.commons.math3.util.FastMath.getExponent(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.FastMath.getExponent(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int middleExp = (expX + expY) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = (expX + expY) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, -middleExp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.scalb(x, -middleExp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, -middleExp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.scalb(y, -middleExp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledH = org.apache.commons.math3.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.sqrt((scaledX * scaledX) + (scaledY * scaledY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.scalb(scaledH, middleExp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int middleExp = (expX + expY) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, -$0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, -$0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(($1 * $1) + ($2 * $2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (expY > (expX + 27)) {

	return org.apache.commons.math3.util.FastMath.abs(y);
} else {


	final int $0 = (expX + expY) / 2;


	final double $1 = org.apache.commons.math3.util.FastMath.scalb(x, -$0);
	final double $2 = org.apache.commons.math3.util.FastMath.scalb(y, -$0);


	final double $3 = org.apache.commons.math3.util.FastMath.sqrt(($1 * $1) + ($2 * $2));


	return org.apache.commons.math3.util.FastMath.scalb($3, $0);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int middleExp = (expX + expY) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, -$0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, -$0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(($1 * $1) + ($2 * $2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (expX > (expY + 27)) {

	return org.apache.commons.math3.util.FastMath.abs(x);
} else { 	if (expY > (expX + 27)) {

		return org.apache.commons.math3.util.FastMath.abs(y);
	} else {


		final int $0 = (expX + expY) / 2;


		final double $1 = org.apache.commons.math3.util.FastMath.scalb(x, -$0);
		final double $2 = org.apache.commons.math3.util.FastMath.scalb(y, -$0);


		final double $3 = org.apache.commons.math3.util.FastMath.sqrt(($1 * $1) + ($2 * $2));


		return org.apache.commons.math3.util.FastMath.scalb($3, $0);

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int expX = org.apache.commons.math3.util.FastMath.getExponent(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int expY = org.apache.commons.math3.util.FastMath.getExponent(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int middleExp = ($0 + $1) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, -$2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, -$2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(($3 * $3) + ($4 * $4))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
	return java.lang.Double.NaN;
} else {

	final int $0 = org.apache.commons.math3.util.FastMath.getExponent(x);
	final int $1 = org.apache.commons.math3.util.FastMath.getExponent(y);
	if ($0 > ($1 + 27)) {

		return org.apache.commons.math3.util.FastMath.abs(x);
	} else { 		if ($1 > ($0 + 27)) {

			return org.apache.commons.math3.util.FastMath.abs(y);
		} else {


			final int $2 = ($0 + $1) / 2;


			final double $3 = org.apache.commons.math3.util.FastMath.scalb(x, -$2);
			final double $4 = org.apache.commons.math3.util.FastMath.scalb(y, -$2);


			final double $5 = org.apache.commons.math3.util.FastMath.sqrt(($3 * $3) + ($4 * $4));


			return org.apache.commons.math3.util.FastMath.scalb($5, $2);

		}}

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int expX = org.apache.commons.math3.util.FastMath.getExponent(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int expY = org.apache.commons.math3.util.FastMath.getExponent(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int middleExp = ($0 + $1) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledX = org.apache.commons.math3.util.FastMath.scalb(x, -$2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledY = org.apache.commons.math3.util.FastMath.scalb(y, -$2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scaledH = org.apache.commons.math3.util.FastMath.sqrt(($3 * $3) + ($4 * $4))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(x) || java.lang.Double.isInfinite(y)) {
	return java.lang.Double.POSITIVE_INFINITY;
} else { 	if (java.lang.Double.isNaN(x) || java.lang.Double.isNaN(y)) {
		return java.lang.Double.NaN;
	} else {

		final int $0 = org.apache.commons.math3.util.FastMath.getExponent(x);
		final int $1 = org.apache.commons.math3.util.FastMath.getExponent(y);
		if ($0 > ($1 + 27)) {

			return org.apache.commons.math3.util.FastMath.abs(x);
		} else { 			if ($1 > ($0 + 27)) {

				return org.apache.commons.math3.util.FastMath.abs(y);
			} else {


				final int $2 = ($0 + $1) / 2;


				final double $3 = org.apache.commons.math3.util.FastMath.scalb(x, -$2);
				final double $4 = org.apache.commons.math3.util.FastMath.scalb(y, -$2);


				final double $5 = org.apache.commons.math3.util.FastMath.sqrt(($3 * $3) + ($4 * $4));


				return org.apache.commons.math3.util.FastMath.scalb($5, $2);

			}}

	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.StrictMath.IEEEremainder(dividend, divisor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long m = java.lang.Double.doubleToLongBits(magnitude)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = java.lang.Double.doubleToLongBits(magnitude)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long s = java.lang.Double.doubleToLongBits(sign)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = java.lang.Double.doubleToLongBits(sign)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return magnitude
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((m >= 0) && (s >= 0)) || ((m < 0) && (s < 0))) {
	return magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -magnitude
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int m = java.lang.Float.floatToIntBits(magnitude)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = java.lang.Float.floatToIntBits(magnitude)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int s = java.lang.Float.floatToIntBits(sign)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = java.lang.Float.floatToIntBits(sign)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((int) ((java.lang.Double.doubleToLongBits(d) >>> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((java.lang.Float.floatToIntBits(f) >>> 23) & 0xff) - 127
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.io.PrintStream out = java.lang.System.out
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.io.PrintStream $0 = java.lang.System.out
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_INT_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_A", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "EXP_FRAC_TABLE_B", org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN, org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "LN_MANT", org.apache.commons.math3.util.FastMath.LN_MANT_LEN, org.apache.commons.math3.util.FastMath.lnMant.LN_MANT)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_A)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "SINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.SINE_TABLE_B)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_A)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "COSINE_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.COSINE_TABLE_B)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_A", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.printarray(out, "TANGENT_TABLE_B", org.apache.commons.math3.util.FastMath.SINE_TABLE_LEN, org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] tmp = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] recip = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.expint(i, tmp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (i != 0) {

	org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
	org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
	org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX; $0++) {
	org.apache.commons.math3.util.FastMathCalc.expint($0, tmp);
	org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[$0 + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];
	org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[$0 + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];

	if ($0 != 0) {

		org.apache.commons.math3.util.FastMathCalc.splitReciprocal(tmp, recip);
		org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $0] = recip[0];
		org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $0] = recip[1];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] tmp = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] recip = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];
	EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN];

	final double[] $0 = new double[2];
	final double[] $1 = new double[2];


	for (int $2 = 0; $2 < org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX; $2++) {
		org.apache.commons.math3.util.FastMathCalc.expint($2, $0);
		org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[$2 + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = $0[0];
		org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[$2 + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = $0[1];

		if ($2 != 0) {

			org.apache.commons.math3.util.FastMathCalc.splitReciprocal($0, $1);
			org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $2] = $1[0];
			org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - $2] = $1[1];
		}
	}
} else {
	EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA();
	EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double factor = 1.0 / (org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN - 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0 / (org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN - 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.slowexp(i * factor, tmp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length; $0++) {
	org.apache.commons.math3.util.FastMathCalc.slowexp($0 * factor, tmp);
	org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[$0] = tmp[0];
	org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[$0] = tmp[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] tmp = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double factor = 1.0 / (org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN - 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];
	EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN];

	final double[] $0 = new double[2];


	final double $1 = 1.0 / (org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN - 1);
	for (int $2 = 0; $2 < org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A.length; $2++) {
		org.apache.commons.math3.util.FastMathCalc.slowexp($2 * $1, $0);
		org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[$2] = $0[0];
		org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[$2] = $0[1];
	}
} else {
	EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA();
	EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d = java.lang.Double.longBitsToDouble((((long) ($0)) << 42) | 0x3ff0000000000000L)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; $0++) {
	final double $1 = java.lang.Double.longBitsToDouble((((long) ($0)) << 42) | 0x3ff0000000000000L);
	org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[$0] = org.apache.commons.math3.util.FastMathCalc.slowLog($1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d = java.lang.Double.longBitsToDouble((((long) ($0)) << 42) | 0x3ff0000000000000L)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int $0 = 0; $0 < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; $0++) {
		final double $1 = java.lang.Double.longBitsToDouble((((long) ($0)) << 42) | 0x3ff0000000000000L);
		org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[$0] = org.apache.commons.math3.util.FastMathCalc.slowLog($1);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = ((int) (xa * 0.6366197723675814))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = ((int) (xa * 0.6366197723675814))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double remB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double a = (-k) * 1.570796251296997
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (-k) * 1.570796251296997
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: remA = xa + a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: remB = -((remA - xa) - a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = (-k) * 7.549789948768648E-8
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double b = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: remA = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: remB += -((remA - b) - a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a = (-k) * 6.123233995736766E-17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: b = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (remA > 0) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: --k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double a = (-k) * 1.570796251296997
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double b = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (true) {
	double $0 = (-k) * 1.570796251296997;
	remA = xa + $0;
	remB = -((remA - xa) - $0);

	$0 = (-k) * 7.549789948768648E-8;
	double $1 = remA;
	remA = $0 + $1;
	remB += -((remA - $1) - $0);

	$0 = (-k) * 6.123233995736766E-17;
	$1 = remA;
	remA = $0 + $1;
	remB += -((remA - $1) - $0);

	if (remA > 0) {
		break;
	}




	--k;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.finalK = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.finalRemA = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.finalRemB = remB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return finalK
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return finalRemA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return finalRemB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] result = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double x = i / 8.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = i / 8.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.slowSin(x, result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SINE_TABLE_A[i] = result[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SINE_TABLE_B[i] = result[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.slowCos(x, result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: COSINE_TABLE_A[i] = result[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: COSINE_TABLE_B[i] = result[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double x = $0 / 8.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < 7; $0++) {
	double $1 = $0 / 8.0;

	org.apache.commons.math3.util.FastMathCalc.slowSin($1, result);
	SINE_TABLE_A[$0] = result[0];
	SINE_TABLE_B[$0] = result[1];

	org.apache.commons.math3.util.FastMathCalc.slowCos($1, result);
	COSINE_TABLE_A[$0] = result[0];
	COSINE_TABLE_B[$0] = result[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] xs = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] ys = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] as = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] bs = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] temps = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[0] = SINE_TABLE_A[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[1] = SINE_TABLE_B[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[0] = COSINE_TABLE_A[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[1] = COSINE_TABLE_B[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(xs, ys, result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SINE_TABLE_A[i] = result[0] * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SINE_TABLE_B[i] = result[1] * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(ys, ys, as)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(xs, xs, temps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temps[0] = -temps[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: temps[1] = -temps[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitAdd(as, temps, result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: as[0] = SINE_TABLE_A[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: as[1] = SINE_TABLE_B[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bs[0] = COSINE_TABLE_A[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: bs[1] = COSINE_TABLE_B[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(xs, bs, temps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(ys, as, result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitAdd(result, temps, result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(ys, bs, result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(xs, as, temps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((i & 1) == 0) {

	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];


	org.apache.commons.math3.util.FastMathCalc.splitMult(xs, ys, result);
	SINE_TABLE_A[i] = result[0] * 2.0;
	SINE_TABLE_B[i] = result[1] * 2.0;


	org.apache.commons.math3.util.FastMathCalc.splitMult(ys, ys, as);
	org.apache.commons.math3.util.FastMathCalc.splitMult(xs, xs, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math3.util.FastMathCalc.splitAdd(as, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
} else {
	xs[0] = SINE_TABLE_A[i / 2];
	xs[1] = SINE_TABLE_B[i / 2];
	ys[0] = COSINE_TABLE_A[i / 2];
	ys[1] = COSINE_TABLE_B[i / 2];
	as[0] = SINE_TABLE_A[(i / 2) + 1];
	as[1] = SINE_TABLE_B[(i / 2) + 1];
	bs[0] = COSINE_TABLE_A[(i / 2) + 1];
	bs[1] = COSINE_TABLE_B[(i / 2) + 1];


	org.apache.commons.math3.util.FastMathCalc.splitMult(xs, bs, temps);
	org.apache.commons.math3.util.FastMathCalc.splitMult(ys, as, result);
	org.apache.commons.math3.util.FastMathCalc.splitAdd(result, temps, result);
	SINE_TABLE_A[i] = result[0];
	SINE_TABLE_B[i] = result[1];


	org.apache.commons.math3.util.FastMathCalc.splitMult(ys, bs, result);
	org.apache.commons.math3.util.FastMathCalc.splitMult(xs, as, temps);
	temps[0] = -temps[0];
	temps[1] = -temps[1];
	org.apache.commons.math3.util.FastMathCalc.splitAdd(result, temps, result);
	COSINE_TABLE_A[i] = result[0];
	COSINE_TABLE_B[i] = result[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 7
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] xs = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] ys = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] as = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] bs = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] temps = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 7; $0 < SINE_TABLE_LEN; $0++) {
	double[] $1 = new double[2];
	double[] $2 = new double[2];
	double[] $3 = new double[2];
	double[] $4 = new double[2];
	double[] $5 = new double[2];

	if (($0 & 1) == 0) {

		$1[0] = SINE_TABLE_A[$0 / 2];
		$1[1] = SINE_TABLE_B[$0 / 2];
		$2[0] = COSINE_TABLE_A[$0 / 2];
		$2[1] = COSINE_TABLE_B[$0 / 2];


		org.apache.commons.math3.util.FastMathCalc.splitMult($1, $2, result);
		SINE_TABLE_A[$0] = result[0] * 2.0;
		SINE_TABLE_B[$0] = result[1] * 2.0;


		org.apache.commons.math3.util.FastMathCalc.splitMult($2, $2, $3);
		org.apache.commons.math3.util.FastMathCalc.splitMult($1, $1, $5);
		$5[0] = -$5[0];
		$5[1] = -$5[1];
		org.apache.commons.math3.util.FastMathCalc.splitAdd($3, $5, result);
		COSINE_TABLE_A[$0] = result[0];
		COSINE_TABLE_B[$0] = result[1];
	} else {
		$1[0] = SINE_TABLE_A[$0 / 2];
		$1[1] = SINE_TABLE_B[$0 / 2];
		$2[0] = COSINE_TABLE_A[$0 / 2];
		$2[1] = COSINE_TABLE_B[$0 / 2];
		$3[0] = SINE_TABLE_A[($0 / 2) + 1];
		$3[1] = SINE_TABLE_B[($0 / 2) + 1];
		$4[0] = COSINE_TABLE_A[($0 / 2) + 1];
		$4[1] = COSINE_TABLE_B[($0 / 2) + 1];


		org.apache.commons.math3.util.FastMathCalc.splitMult($1, $4, $5);
		org.apache.commons.math3.util.FastMathCalc.splitMult($2, $3, result);
		org.apache.commons.math3.util.FastMathCalc.splitAdd(result, $5, result);
		SINE_TABLE_A[$0] = result[0];
		SINE_TABLE_B[$0] = result[1];


		org.apache.commons.math3.util.FastMathCalc.splitMult($2, $4, result);
		org.apache.commons.math3.util.FastMathCalc.splitMult($1, $3, $5);
		$5[0] = -$5[0];
		$5[1] = -$5[1];
		org.apache.commons.math3.util.FastMathCalc.splitAdd(result, $5, result);
		COSINE_TABLE_A[$0] = result[0];
		COSINE_TABLE_B[$0] = result[1];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: as[0] = COSINE_TABLE_A[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: as[1] = COSINE_TABLE_B[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitReciprocal(as, ys)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[0] = SINE_TABLE_A[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[1] = SINE_TABLE_B[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(xs, ys, as)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: TANGENT_TABLE_A[i] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: TANGENT_TABLE_B[i] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] xs = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] ys = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] as = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < SINE_TABLE_LEN; $0++) {
	double[] $1 = new double[2];
	double[] $2 = new double[2];
	double[] $3 = new double[2];

	$3[0] = COSINE_TABLE_A[$0];
	$3[1] = COSINE_TABLE_B[$0];

	org.apache.commons.math3.util.FastMathCalc.splitReciprocal($3, $2);

	$1[0] = SINE_TABLE_A[$0];
	$1[1] = SINE_TABLE_B[$0];

	org.apache.commons.math3.util.FastMathCalc.splitMult($1, $2, $3);

	TANGENT_TABLE_A[$0] = $3[0];
	TANGENT_TABLE_B[$0] = $3[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] xs = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] ys = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] facts = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] as = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.split(x, xs)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[0] = ys[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[0] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ys[1] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: continue
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((i & 1) != 0) {
	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.split(org.apache.commons.math3.util.FastMathCalc.FACT[i], as)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitReciprocal(as, facts)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: facts[0] = -facts[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: facts[1] = -facts[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((i & 2) != 0) {
	facts[0] = -facts[0];
	facts[1] = -facts[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitAdd(ys, facts, as)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = org.apache.commons.math3.util.FastMathCalc.FACT.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.FastMathCalc.FACT.length - 1; $0 >= 0; $0--) {
	org.apache.commons.math3.util.FastMathCalc.splitMult(xs, ys, as);
	ys[0] = as[0]; 	ys[1] = as[1];

	if (($0 & 1) != 0) {
		continue;
	}

	org.apache.commons.math3.util.FastMathCalc.split(org.apache.commons.math3.util.FastMathCalc.FACT[$0], as);
	org.apache.commons.math3.util.FastMathCalc.splitReciprocal(as, facts);

	if (($0 & 2) != 0) {
		facts[0] = -facts[0];
		facts[1] = -facts[1];
	}

	org.apache.commons.math3.util.FastMathCalc.splitAdd(ys, facts, as);
	ys[0] = as[0]; 	ys[1] = as[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = ys[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = ys[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ys[0] + ys[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((i & 1) == 0) {
	continue;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = org.apache.commons.math3.util.FastMathCalc.FACT.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.FastMathCalc.FACT.length - 1; $0 >= 0; $0--) {
	org.apache.commons.math3.util.FastMathCalc.splitMult(xs, ys, as);
	ys[0] = as[0]; 	ys[1] = as[1];

	if (($0 & 1) == 0) {
		continue;
	}

	org.apache.commons.math3.util.FastMathCalc.split(org.apache.commons.math3.util.FastMathCalc.FACT[$0], as);
	org.apache.commons.math3.util.FastMathCalc.splitReciprocal(as, facts);

	if (($0 & 2) != 0) {
		facts[0] = -facts[0];
		facts[1] = -facts[1];
	}

	org.apache.commons.math3.util.FastMathCalc.splitAdd(ys, facts, as);
	ys[0] = as[0]; 	ys[1] = as[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = org.apache.commons.math3.util.FastMathCalc.FACT.length - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.FastMathCalc.FACT.length - 1; $0 >= 0; $0--) {
	org.apache.commons.math3.util.FastMathCalc.splitMult(xs, ys, as);
	ys[0] = as[0];
	ys[1] = as[1];

	org.apache.commons.math3.util.FastMathCalc.split(org.apache.commons.math3.util.FastMathCalc.FACT[$0], as);
	org.apache.commons.math3.util.FastMathCalc.splitReciprocal(as, facts);

	org.apache.commons.math3.util.FastMathCalc.splitAdd(ys, facts, as);
	ys[0] = as[0];
	ys[1] = as[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = d * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = d * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: split[0] = (d + a) - a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: split[1] = d - split[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = d * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = d * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: split[0] = ((d + a) - d) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = d * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = d * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((d < 8.0E298) && (d > (-8.0E298))) {
	final double $0 = d * org.apache.commons.math3.util.FastMathCalc.HEX_40000000;
	split[0] = (d + $0) - $0;
	split[1] = d - split[0];
} else {
	final double $1 = d * 9.313225746154785E-10;
	split[0] = ((d + $1) - d) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000;
	split[1] = d - split[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double c = a[0] + a[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a[0] + a[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d = -((c - a[0]) - a[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = -((c - a[0]) - a[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double z = c * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = c * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[0] = (c + z) - z
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[1] = (c - a[0]) + d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double z = c * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = c * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: a[0] = ((c + z) - c) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double z = c * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double z = c * 9.313225746154785E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((c < 8.0E298) && (c > (-8.0E298))) {
	double $0 = c * org.apache.commons.math3.util.FastMathCalc.HEX_40000000;
	a[0] = (c + $0) - $0;
	a[1] = (c - a[0]) + d;
} else {
	double $1 = c * 9.313225746154785E-10;
	a[0] = ((c + $1) - c) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000;
	a[1] = (c - a[0]) + d;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ans[0] = a[0] * b[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ans[1] = ((a[0] * b[1]) + (a[1] * b[0])) + (a[1] * b[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.resplit(ans)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ans[0] = a[0] + b[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ans[1] = a[1] + b[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b = 1.0 / 4194304.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0 / 4194304.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = 1.0 - b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0 - b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: in[0] = in[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: in[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (in[0] == 0.0) {
	in[0] = in[1];
	in[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = a / in[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = ((b * in[0]) - (a * in[1])) / ((in[0] * in[0]) + (in[0] * in[1]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (result[1] != result[1]) {
	result[1] = 0.0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.resplit(result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double err = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
(result[1] * in[0])) - (result[1] * in[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
(result[1] * in[0])) - (result[1] * in[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: err = err * (result[0] + result[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] += err
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double err = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
(result[1] * in[0])) - (result[1] * in[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < 2; $0++) {

	double $1 = (((1.0 - (result[0] * in[0])) - (result[0] * in[1])) - 
	(result[1] * in[0])) - (result[1] * in[1]);

	$1 = $1 * (result[0] + result[1]);

	result[1] += $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] zs = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.split(a[0], xs)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.split(b[0], ys)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(xs, ys, zs)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = zs[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.split(b[1], ys)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double tmp = result[0] + zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = result[0] + zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = result[1] - ((tmp - result[0]) - zs[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[0] = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = result[0] + zs[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result[1] = result[1] - ((tmp - result[0]) - zs[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.split(a[1], xs)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tmp = result[0] + zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[0] = 2.718281828459045
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[1] = 1.4456468917292502E-16
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.split(1.0, ys)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.quadMult(ys, xs, as)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((p & 1) != 0) {
	org.apache.commons.math3.util.FastMathCalc.quadMult(ys, xs, as);
	ys[0] = as[0]; 	ys[1] = as[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.quadMult(xs, xs, as)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[0] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xs[1] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: p >>= 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (p > 0) {
	if ((p & 1) != 0) {
		org.apache.commons.math3.util.FastMathCalc.quadMult(ys, xs, as);
		ys[0] = as[0]; 		ys[1] = as[1];
	}

	org.apache.commons.math3.util.FastMathCalc.quadMult(xs, xs, as);
	xs[0] = as[0]; 	xs[1] = as[1];

	p >>= 1;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (result != null) {
	result[0] = ys[0];
	result[1] = ys[1];

	org.apache.commons.math3.util.FastMathCalc.resplit(result);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] x = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] x2 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] y = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] a = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.split(xi, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x[0] += 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.resplit(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitReciprocal(x, a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x[0] -= 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(x, a, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x[0] = y[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x[1] = y[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(x, x, x2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y[0] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y[1] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(y, x2, a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y[0] = a[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: y[1] = a[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitAdd(y, org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[i], a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 2; $0 >= 0; $0--) {
	org.apache.commons.math3.util.FastMathCalc.splitMult(y, x2, a);
	y[0] = a[0];
	y[1] = a[1];
	org.apache.commons.math3.util.FastMathCalc.splitAdd(y, org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[$0], a);
	y[0] = a[0];
	y[1] = a[1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.splitMult(y, x, a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out.println(name)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.checkLen(expectedLen, array2d.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out.println(org.apache.commons.math3.util.FastMathCalc.TABLE_START_DECL + " ")
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out.print("        {")
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out.printf("%-25.25s", org.apache.commons.math3.util.FastMathCalc.format(d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (double $0 : array) {
	out.printf("%-25.25s", org.apache.commons.math3.util.FastMathCalc.format($0));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out.println("}, // " + (i++))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] array
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (double[] $0 : array2d) {
	out.print("        {");
	for (double $1 : $0) {
		out.printf("%-25.25s", org.apache.commons.math3.util.FastMathCalc.format($1));
	}
	out.println("}, // " + (i++));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out.println(org.apache.commons.math3.util.FastMathCalc.TABLE_END_DECL)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out.println(name + "=")
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.FastMathCalc.checkLen(expectedLen, array.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out.println(org.apache.commons.math3.util.FastMathCalc.TABLE_START_DECL)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out.printf("        %s%n", org.apache.commons.math3.util.FastMathCalc.format(d))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (double $0 : array) {
	out.printf("        %s%n", org.apache.commons.math3.util.FastMathCalc.format($0));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return "Double.NaN,"
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,"
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (d != d) {
	return "Double.NaN,";
} else {
	return ((d >= 0 ? "+" : "") + java.lang.Double.toString(d)) + "d,";
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(actual, expectedLen)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (expectedLen != actual) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(actual, expectedLen);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_A.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_INT_B.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_A.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.EXP_FRAC_B.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMathLiteralArrays.LN_MANT.clone()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MaxCountExceededException(max)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(max, 
new org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback() {

	public void trigger(int max) {
		throw new org.apache.commons.math3.exception.MaxCountExceededException(max);
	}
})
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NullArgumentException()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (cb == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: maximalCount = max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: maxCountCallback = cb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return maximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return count < maximalCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: incrementCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < value; $0++) {
	incrementCount();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: maxCountCallback.trigger(maximalCount)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((++count) > maximalCount) {
	maxCountCallback.trigger(maximalCount);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: count = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.iterations = iterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return iterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.listeners = new java.util.concurrent.CopyOnWriteArrayList<org.apache.commons.math3.util.IterationListener>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations, callBack)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: listeners.add(listener)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: l.initializationPerformed(e)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.IterationListener l
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (org.apache.commons.math3.util.IterationListener $0 : listeners) {
	$0.initializationPerformed(e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: l.iterationPerformed(e)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.IterationListener l
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (org.apache.commons.math3.util.IterationListener $0 : listeners) {
	$0.iterationPerformed(e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: l.iterationStarted(e)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.IterationListener l
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (org.apache.commons.math3.util.IterationListener $0 : listeners) {
	$0.iterationStarted(e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: l.terminationPerformed(e)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.IterationListener l
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (org.apache.commons.math3.util.IterationListener $0 : listeners) {
	$0.terminationPerformed(e);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return iterations.getCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return iterations.getMaximalCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: iterations.incrementCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: listeners.remove(listener)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: iterations.resetCount()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sum += org.apache.commons.math3.util.FastMath.abs(p1[i] - p2[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < p1.length; $0++) {
	sum += org.apache.commons.math3.util.FastMath.abs(p1[$0] - p2[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int sum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dp = p1[i] - p2[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = p1[i] - p2[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sum += dp * dp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dp = p1[$0] - p2[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < p1.length; $0++) {
	final double $1 = p1[$0] - p2[$0];
	sum += $1 * $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.sqrt(sum)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double max = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: max = org.apache.commons.math3.util.FastMath.max(max, org.apache.commons.math3.util.FastMath.abs(p1[i] - p2[i]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < p1.length; $0++) {
	max = org.apache.commons.math3.util.FastMath.max(max, org.apache.commons.math3.util.FastMath.abs(p1[$0] - p2[$0]));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int max = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: T previous = val[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: T $0 = val[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int max = val.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = val.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int comp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (comp >= 0) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (comp > 0) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: switch (dir) {
	case INCREASING :
		comp = previous.compareTo(val[i]);
		if (strict) {
			if (comp >= 0) {
				return false;
			}
		} else {
			if (comp > 0) {
				return false;
			}
		}
		break;
	case DECREASING :
		comp = val[i].compareTo(previous);
		if (strict) {
			if (comp >= 0) {
				return false;
			}
		} else {
			if (comp > 0) {
				return false;
			}
		}
		break;
	default :

		throw new org.apache.commons.math3.exception.MathInternalError();}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: previous = val[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int comp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 < max; $0++) {
	final int $1;
	switch (dir) {
		case INCREASING :
			$1 = previous.compareTo(val[$0]);
			if (strict) {
				if ($1 >= 0) {
					return false;
				}
			} else {
				if ($1 > 0) {
					return false;
				}
			}
			break;
		case DECREASING :
			$1 = val[$0].compareTo(previous);
			if (strict) {
				if ($1 >= 0) {
					return false;
				}
			} else {
				if ($1 > 0) {
					return false;
				}
			}
			break;
		default :

			throw new org.apache.commons.math3.exception.MathInternalError();}


	previous = val[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.MathArrays.checkOrder(val, dir, strict, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double previous = val[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = val[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int index
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: break ITEM
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (val[index] <= previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (val[index] < previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (val[index] >= previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (val[index] > previous) {
	break ITEM;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: switch (dir) {
	case INCREASING :
		if (strict) {
			if (val[index] <= previous) {
				break ITEM;
			}
		} else {
			if (val[index] < previous) {
				break ITEM;
			}
		}
		break;
	case DECREASING :
		if (strict) {
			if (val[index] >= previous) {
				break ITEM;
			}
		} else {
			if (val[index] > previous) {
				break ITEM;
			}
		}
		break;
	default :

		throw new org.apache.commons.math3.exception.MathInternalError();}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: previous = val[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ITEM : for (
index = 1; index < max; index++) {
	switch (dir) {
		case INCREASING :
			if (strict) {
				if (val[index] <= previous) {
					break ITEM;
				}
			} else {
				if (val[index] < previous) {
					break ITEM;
				}
			}
			break;
		case DECREASING :
			if (strict) {
				if (val[index] >= previous) {
					break ITEM;
				}
			} else {
				if (val[index] > previous) {
					break ITEM;
				}
			}
			break;
		default :

			throw new org.apache.commons.math3.exception.MathInternalError();}


	previous = val[index];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (index == max) {

	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NonMonotonicSequenceException(val[index], previous, index, dir, strict)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (abort) {
	throw new org.apache.commons.math3.exception.NonMonotonicSequenceException(val[index], previous, index, dir, strict);
} else {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathArrays.checkOrder(val, dir, strict, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathArrays.checkOrder(val, org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathUtils.checkNotNull(in)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(
org.apache.commons.math3.exception.util.LocalizedFormats.DIFFERENT_ROWS_LENGTHS, 
in[i].length, in[0].length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (in[i].length != in[0].length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(
	org.apache.commons.math3.exception.util.LocalizedFormats.DIFFERENT_ROWS_LENGTHS, 
	in[i].length, in[0].length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 < in.length; $0++) {
	if (in[$0].length != in[0].length) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(
		org.apache.commons.math3.exception.util.LocalizedFormats.DIFFERENT_ROWS_LENGTHS, 
		in[$0].length, in[0].length);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(in[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (in[i] <= 0) {
	throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(in[i]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < in.length; $0++) {
	if (in[$0] <= 0) {
		throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(in[$0]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotPositiveException(in[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (in[i] < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(in[i]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < in.length; $0++) {
	if (in[$0] < 0) {
		throw new org.apache.commons.math3.exception.NotPositiveException(in[$0]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotPositiveException(in[i][j])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (in[i][j] < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(in[i][j]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < in[i].length; $0++) {
	if (in[i][$0] < 0) {
		throw new org.apache.commons.math3.exception.NotPositiveException(in[i][$0]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < in.length; $0++) {
	for (int $1 = 0; $1 < in[$0].length; $1++) {
		if (in[$0][$1] < 0) {
			throw new org.apache.commons.math3.exception.NotPositiveException(in[$0][$1]);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double rdwarf = 3.834E-20
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 3.834E-20
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double rgiant = 1.304E19
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 1.304E19
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double s1 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double s2 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double s3 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double x1max = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double x3max = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double floatn = v.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = v.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double agiant = rgiant / floatn
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = rgiant / floatn
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xabs = java.lang.Math.abs(v[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = java.lang.Math.abs(v[i])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x1max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = x1max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: s1 = 1 + ((s1 * r) * r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x1max = xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = xabs / x1max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = xabs / x1max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: s1 += r * r
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x1max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = xabs / x1max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xabs > x1max) {
	double $0 = x1max / xabs;
	s1 = 1 + ((s1 * $0) * $0);
	x1max = xabs;
} else {
	double $1 = xabs / x1max;
	s1 += $1 * $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x3max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = x3max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: s3 = 1 + ((s3 * r) * r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x3max = xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = xabs / x3max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = xabs / x3max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: s3 += r * r
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = xabs / x3max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xabs != 0) {
	double $0 = xabs / x3max;
	s3 += $0 * $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x3max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = xabs / x3max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xabs > x3max) {
	double $0 = x3max / xabs;
	s3 = 1 + ((s3 * $0) * $0);
	x3max = xabs;
} else {
	if (xabs != 0) {
		double $1 = xabs / x3max;
		s3 += $1 * $1;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x1max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = xabs / x1max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x3max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = xabs / x3max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xabs > rdwarf) {
	if (xabs > x1max) {
		double $0 = x1max / xabs;
		s1 = 1 + ((s1 * $0) * $0);
		x1max = xabs;
	} else {
		double $1 = xabs / x1max;
		s1 += $1 * $1;
	}
} else {
	if (xabs > x3max) {
		double $2 = x3max / xabs;
		s3 = 1 + ((s3 * $2) * $2);
		x3max = xabs;
	} else {
		if (xabs != 0) {
			double $3 = xabs / x3max;
			s3 += $3 * $3;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: s2 += xabs * xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x1max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = xabs / x1max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x3max / xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = xabs / x3max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((xabs < rdwarf) || (xabs > agiant)) {
	if (xabs > rdwarf) {
		if (xabs > x1max) {
			double $0 = x1max / xabs;
			s1 = 1 + ((s1 * $0) * $0);
			x1max = xabs;
		} else {
			double $1 = xabs / x1max;
			s1 += $1 * $1;
		}
	} else {
		if (xabs > x3max) {
			double $2 = x3max / xabs;
			s3 = 1 + ((s3 * $2) * $2);
			x3max = xabs;
		} else {
			if (xabs != 0) {
				double $3 = xabs / x3max;
				s3 += $3 * $3;
			}
		}
	}
} else {
	s2 += xabs * xabs;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double xabs = java.lang.Math.abs(v[$0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x1max / $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = $1 / x1max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = x3max / $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double r = $1 / x3max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < v.length; $0++) {
	double $1 = java.lang.Math.abs(v[$0]);
	if (($1 < rdwarf) || ($1 > agiant)) {
		if ($1 > rdwarf) {
			if ($1 > x1max) {
				double $2 = x1max / $1;
				s1 = 1 + ((s1 * $2) * $2);
				x1max = $1;
			} else {
				double $3 = $1 / x1max;
				s1 += $3 * $3;
			}
		} else {
			if ($1 > x3max) {
				double $4 = x3max / $1;
				s3 = 1 + ((s3 * $4) * $4);
				x3max = $1;
			} else {
				if ($1 != 0) {
					double $5 = $1 / x3max;
					s3 += $5 * $5;
				}
			}
		}
	} else {
		s2 += $1 * $1;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double norm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: norm = x3max * java.lang.Math.sqrt(s3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (s2 >= x3max) {
	norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
} else {
	norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (s2 == 0) {
	norm = x3max * java.lang.Math.sqrt(s3);
} else {
	if (s2 >= x3max) {
		norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
	} else {
		norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (s1 != 0) {
	norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max));
} else {
	if (s2 == 0) {
		norm = x3max * java.lang.Math.sqrt(s3);
	} else {
		if (s2 >= x3max) {
			norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))));
		} else {
			norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return norm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathArrays.sortInPlace(x, org.apache.commons.math3.util.MathArrays.OrderDirection.INCREASING, yList)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int len = x.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = x.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.util.List<org.apache.commons.math3.util.Pair<java.lang.Double, double[]>> list = 
new java.util.ArrayList<org.apache.commons.math3.util.Pair<java.lang.Double, double[]>>(len)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final java.util.List<org.apache.commons.math3.util.Pair<java.lang.Double, double[]>> $0 = 
new java.util.ArrayList<org.apache.commons.math3.util.Pair<java.lang.Double, double[]>>(len)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int yListLen = yList.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = yList.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] yValues = new double[yListLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[yListLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] y = yList[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = yList[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(y.length, len)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (y.length != len) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(y.length, len);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yValues[j] = y[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] y = yList[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yListLen; $0++) {
	double[] $1 = yList[$0];
	if ($1 == null) {
		throw new org.apache.commons.math3.exception.NullArgumentException();
	}
	if ($1.length != len) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException($1.length, len);
	}
	yValues[$0] = $1[i];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: list.add(new org.apache.commons.math3.util.Pair<java.lang.Double, double[]>(x[i], yValues))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] yValues = new double[yListLen]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] y = yList[$2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < len; $0++) {
	final double[] $1 = new double[yListLen];
	for (int $2 = 0; $2 < yListLen; $2++) {
		double[] $3 = yList[$2];
		if ($3 == null) {
			throw new org.apache.commons.math3.exception.NullArgumentException();
		}
		if ($3.length != len) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException($3.length, len);
		}
		$1[$2] = $3[$0];
	}
	list.add(new org.apache.commons.math3.util.Pair<java.lang.Double, double[]>(x[$0], $1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: switch (dir) {
	case INCREASING :
		val = o1.getKey().compareTo(o2.getKey());
		break;
	case DECREASING :
		val = o2.getKey().compareTo(o1.getKey());
		break;
	default :

		throw new org.apache.commons.math3.exception.MathInternalError();}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.util.Comparator<org.apache.commons.math3.util.Pair<java.lang.Double, double[]>> comp = 
new java.util.Comparator<org.apache.commons.math3.util.Pair<java.lang.Double, double[]>>() {
	public int compare(org.apache.commons.math3.util.Pair<java.lang.Double, double[]> o1, 
	org.apache.commons.math3.util.Pair<java.lang.Double, double[]> o2) {
		int val;
		switch (dir) {
			case INCREASING :
				val = o1.getKey().compareTo(o2.getKey());
				break;
			case DECREASING :
				val = o2.getKey().compareTo(o1.getKey());
				break;
			default :

				throw new org.apache.commons.math3.exception.MathInternalError();}

		return val;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final java.util.Comparator<org.apache.commons.math3.util.Pair<java.lang.Double, double[]>> $0 = 
new java.util.Comparator<org.apache.commons.math3.util.Pair<java.lang.Double, double[]>>() {
	public int compare(org.apache.commons.math3.util.Pair<java.lang.Double, double[]> o1, 
	org.apache.commons.math3.util.Pair<java.lang.Double, double[]> o2) {
		int $1;
		switch (dir) {
			case INCREASING :
				$1 = o1.getKey().compareTo(o2.getKey());
				break;
			case DECREASING :
				$1 = o2.getKey().compareTo(o1.getKey());
				break;
			default :

				throw new org.apache.commons.math3.exception.MathInternalError();}

		return $1;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.util.Collections.sort(list, comp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.Pair<java.lang.Double, double[]> e = list.get(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.util.Pair<java.lang.Double, double[]> $0 = list.get(i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: x[i] = e.getKey()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] yValues = e.getValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = e.getValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yList[j][i] = yValues[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < yListLen; $0++) {
	yList[$0][i] = yValues[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.Pair<java.lang.Double, double[]> e = list.get($0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] yValues = $1.getValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < len; $0++) {
	final org.apache.commons.math3.util.Pair<java.lang.Double, double[]> $1 = list.get($0);
	x[$0] = $1.getKey();
	final double[] $2 = $1.getValue();
	for (int $3 = 0; $3 < yListLen; $3++) {
		yList[$3][$0] = $2[$3];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.MathArrays.copyOf(source, source.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int[] output = new int[len]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int[] $0 = new int[len]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(source, 0, output, 0, org.apache.commons.math3.util.FastMath.min(len, source.length))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return output
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] output = new double[len]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[len]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int len = a.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = a.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(len, b.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (len != b.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(len, b.length);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] prodHigh = new double[len]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[len]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double prodLowSum = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ai = a[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ca = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * ai
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * ai
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double aHigh = ca - (ca - ai)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ca - (ca - ai)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double aLow = ai - aHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ai - aHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double bi = b[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = b[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cb = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * bi
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * bi
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double bHigh = cb - (cb - bi)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = cb - (cb - bi)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double bLow = bi - bHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = bi - bHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodHigh[i] = ai * bi
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prodLow = (aLow * bLow) - (((prodHigh[i] - 
(aHigh * bHigh)) - 
(aLow * bHigh)) - 
(aHigh * bLow))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (aLow * bLow) - (((prodHigh[i] - 
(aHigh * bHigh)) - 
(aLow * bHigh)) - 
(aHigh * bLow))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodLowSum += prodLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ai = a[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ca = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * $1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double aHigh = $2 - ($2 - $1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double aLow = $1 - $3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double bi = b[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cb = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * $5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double bHigh = $6 - ($6 - $5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double bLow = $5 - $7
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prodLow = ($4 * $8) - (((prodHigh[$0] - 
($3 * $7)) - 
($4 * $7)) - 
($3 * $8))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < len; $0++) {
	final double $1 = a[$0];
	final double $2 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * $1;
	final double $3 = $2 - ($2 - $1);
	final double $4 = $1 - $3;

	final double $5 = b[$0];
	final double $6 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * $5;
	final double $7 = $6 - ($6 - $5);
	final double $8 = $5 - $7;
	prodHigh[$0] = $1 * $5;
	final double $9 = ($4 * $8) - (((prodHigh[$0] - 
	($3 * $7)) - 
	($4 * $7)) - 
	($3 * $8));
	prodLowSum += $9;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prodHighCur = prodHigh[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = prodHigh[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double prodHighNext = prodHigh[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = prodHigh[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sHighPrev = prodHighCur + prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = prodHighCur + prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sPrime = sHighPrev - prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = sHighPrev - prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int lenMinusOne = len - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = len - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: prodHighNext = prodHigh[i + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double sHighCur = sHighPrev + prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = sHighPrev + prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sPrime = sHighCur - prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sHighPrev = sHighCur
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double sHighCur = sHighPrev + prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 < lenMinusOne; $0++) {
	prodHighNext = prodHigh[$0 + 1];
	final double $1 = sHighPrev + prodHighNext;
	sPrime = $1 - prodHighNext;
	sLowSum += (prodHighNext - ($1 - sPrime)) + (sHighPrev - sPrime);
	sHighPrev = $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = sHighPrev + (prodLowSum + sLowSum)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = sHighPrev + (prodLowSum + sLowSum)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result += a[i] * b[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < len; ++$0) {
	result += a[$0] * b[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(result)) {


	result = 0;
	for (int $0 = 0; $0 < len; ++$0) {
		result += a[$0] * b[$0];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ca1 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * a1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * a1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a1High = ca1 - (ca1 - a1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ca1 - (ca1 - a1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a1Low = a1 - a1High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a1 - a1High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cb1 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * b1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * b1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b1High = cb1 - (cb1 - b1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = cb1 - (cb1 - b1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b1Low = b1 - b1High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = b1 - b1High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prod1High = a1 * b1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a1 * b1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prod1Low = (a1Low * b1Low) - (((prod1High - (a1High * b1High)) - (a1Low * b1High)) - (a1High * b1Low))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (a1Low * b1Low) - (((prod1High - (a1High * b1High)) - (a1Low * b1High)) - (a1High * b1Low))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ca2 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * a2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * a2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a2High = ca2 - (ca2 - a2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ca2 - (ca2 - a2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a2Low = a2 - a2High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a2 - a2High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cb2 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * b2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * b2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b2High = cb2 - (cb2 - b2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = cb2 - (cb2 - b2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b2Low = b2 - b2High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = b2 - b2High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prod2High = a2 * b2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a2 * b2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prod2Low = (a2Low * b2Low) - (((prod2High - (a2High * b2High)) - (a2Low * b2High)) - (a2High * b2Low))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (a2Low * b2Low) - (((prod2High - (a2High * b2High)) - (a2Low * b2High)) - (a2High * b2Low))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double s12High = prod1High + prod2High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = prod1High + prod2High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double s12Prime = s12High - prod2High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = s12High - prod2High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double s12Low = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = s12High + ((prod1Low + prod2Low) + s12Low)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = s12High + ((prod1Low + prod2Low) + s12Low)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (a1 * b1) + (a2 * b2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(result)) {


	result = (a1 * b1) + (a2 * b2);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ca3 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * a3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * a3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a3High = ca3 - (ca3 - a3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ca3 - (ca3 - a3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a3Low = a3 - a3High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a3 - a3High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cb3 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * b3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * b3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b3High = cb3 - (cb3 - b3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = cb3 - (cb3 - b3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b3Low = b3 - b3High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = b3 - b3High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prod3High = a3 * b3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a3 * b3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prod3Low = (a3Low * b3Low) - (((prod3High - (a3High * b3High)) - (a3Low * b3High)) - (a3High * b3Low))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (a3Low * b3Low) - (((prod3High - (a3High * b3High)) - (a3Low * b3High)) - (a3High * b3Low))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double s123High = s12High + prod3High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = s12High + prod3High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double s123Prime = s123High - prod3High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = s123High - prod3High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double s123Low = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = s123High + ((((prod1Low + prod2Low) + prod3Low) + s12Low) + s123Low)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = s123High + ((((prod1Low + prod2Low) + prod3Low) + s12Low) + s123Low)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ((a1 * b1) + (a2 * b2)) + (a3 * b3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(result)) {


	result = ((a1 * b1) + (a2 * b2)) + (a3 * b3);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double ca4 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * a4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * a4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a4High = ca4 - (ca4 - a4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ca4 - (ca4 - a4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a4Low = a4 - a4High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a4 - a4High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cb4 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * b4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR * b4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b4High = cb4 - (cb4 - b4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = cb4 - (cb4 - b4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b4Low = b4 - b4High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = b4 - b4High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prod4High = a4 * b4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = a4 * b4
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double prod4Low = (a4Low * b4Low) - (((prod4High - (a4High * b4High)) - (a4Low * b4High)) - (a4High * b4Low))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (a4Low * b4Low) - (((prod4High - (a4High * b4High)) - (a4Low * b4High)) - (a4High * b4Low))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double s1234High = s123High + prod4High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = s123High + prod4High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double s1234Prime = s1234High - prod4High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = s1234High - prod4High
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double s1234Low = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double result = s1234High + ((((((prod1Low + prod2Low) + prod3Low) + prod4Low) + s12Low) + s123Low) + s1234Low)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = s1234High + ((((((prod1Low + prod2Low) + prod3Low) + prod4Low) + s12Low) + s123Low) + s1234Low)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(result)) {


	result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return !((x == null) ^ (y == null))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((x == null) || (y == null)) {
	return !((x == null) ^ (y == null));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x.length != y.length) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (!org.apache.commons.math3.util.Precision.equals(x[i], y[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < x.length; ++$0) {
	if (!org.apache.commons.math3.util.Precision.equals(x[$0], y[$0])) {
		return false;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (!org.apache.commons.math3.util.Precision.equalsIncludingNaN(x[i], y[i])) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < x.length; ++$0) {
	if (!org.apache.commons.math3.util.Precision.equalsIncludingNaN(x[$0], y[$0])) {
		return false;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_INFINITE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(normalizedSum)) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_INFINITE);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_NAN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(normalizedSum)) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_NAN);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double sum = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int len = values.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = values.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double[] out = new double[len]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double[] $0 = new double[len]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(values[i])) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sum += values[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (!java.lang.Double.isNaN(values[i])) {
	sum += values[i];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < len; $0++) {
	if (java.lang.Double.isInfinite(values[$0])) {
		throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[$0], $0);
	}
	if (!java.lang.Double.isNaN(values[$0])) {
		sum += values[$0];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (sum == 0) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARRAY_SUMS_TO_ZERO);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out[i] = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: out[i] = (values[i] * normalizedSum) / sum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isNaN(values[i])) {
	out[i] = java.lang.Double.NaN;
} else {
	out[i] = (values[i] * normalizedSum) / sum;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < len; $0++) {
	if (java.lang.Double.isNaN(values[$0])) {
		out[$0] = java.lang.Double.NaN;
	} else {
		out[$0] = (values[$0] * normalizedSum) / sum;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return out
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new java.lang.Double(value).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.util.Arrays.hashCode(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return a - (org.apache.commons.math3.util.MathUtils.TWO_PI * org.apache.commons.math3.util.FastMath.floor(((a + org.apache.commons.math3.util.FastMath.PI) - center) / org.apache.commons.math3.util.MathUtils.TWO_PI))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double p = org.apache.commons.math3.util.FastMath.abs(period)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.abs(period)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (a - (p * org.apache.commons.math3.util.FastMath.floor((a - offset) / p))) - offset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((byte) (-magnitude))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((sign >= 0) && 
(magnitude == java.lang.Byte.MIN_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((byte) (-magnitude));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Byte.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((byte) (-magnitude));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((short) (-magnitude))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((sign >= 0) && 
(magnitude == java.lang.Short.MIN_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return ((short) (-magnitude));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Short.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return ((short) (-magnitude));
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((sign >= 0) && 
(magnitude == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((sign >= 0) && 
(magnitude == java.lang.Long.MIN_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW);
} else {
	return -magnitude;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (((magnitude >= 0) && (sign >= 0)) || 
((magnitude < 0) && (sign < 0))) {
	return magnitude;
} else { 	if ((sign >= 0) && 
	(magnitude == java.lang.Long.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW);
	} else {
		return -magnitude;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotFiniteNumberException(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math3.exception.NotFiniteNumberException(x);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x = val[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = val[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotFiniteNumberException(org.apache.commons.math3.exception.util.LocalizedFormats.ARRAY_ELEMENT, x, i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(x) || java.lang.Double.isNaN(x)) {
	throw new org.apache.commons.math3.exception.NotFiniteNumberException(org.apache.commons.math3.exception.util.LocalizedFormats.ARRAY_ELEMENT, x, i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double x = val[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < val.length; $0++) {
	final double $1 = val[$0];
	if (java.lang.Double.isInfinite($1) || java.lang.Double.isNaN($1)) {
		throw new org.apache.commons.math3.exception.NotFiniteNumberException(org.apache.commons.math3.exception.util.LocalizedFormats.ARRAY_ELEMENT, $1, $0);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NullArgumentException(pattern, args)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (o == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException(pattern, args);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (o == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: counter[last] = -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (counter[i] != (size[i] - 1)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < dimension; $0++) {
	if (counter[$0] != (size[$0] - 1)) {
		return true;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: counter[i] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ++counter[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (counter[i] == (size[i] - 1)) {
	counter[i] = 0;
} else {
	++counter[i];
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = last
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = last; $0 >= 0; $0--) {
	if (counter[$0] == (size[$0] - 1)) {
		counter[$0] = 0;
	} else {
		++counter[$0];
		break;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ++count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.MathArrays.copyOf(counter)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return counter[dim]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new java.lang.UnsupportedOperationException()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dimension = size.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.size = org.apache.commons.math3.util.MathArrays.copyOf(size)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: uniCounterOffset = new int[dimension]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: last = dimension - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int tS = size[last]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = size[last]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int count = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: count *= size[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = i + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = i + 1; $0 < dimension; $0++) {
	count *= size[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: uniCounterOffset[i] = count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: tS *= size[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int count = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = $0 + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < last; $0++) {
	int $1 = 1;
	for (int $2 = $0 + 1; $2 < dimension; $2++) {
		$1 *= size[$2];
	}
	uniCounterOffset[$0] = $1;
	tS *= size[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: uniCounterOffset[last] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(tS)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (tS <= 0) {
	throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(tS);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: totalSize = tS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.MultidimensionalCounter.Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return dimension
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.OutOfRangeException(index, 0, totalSize)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((index < 0) || 
(index >= totalSize)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(index, 0, totalSize);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int[] indices = new int[dimension]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int[] $0 = new int[dimension]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int count = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int idx = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int offset = uniCounterOffset[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = uniCounterOffset[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: count += offset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ++idx
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (count <= index) {
	count += offset;
	++idx;
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: --idx
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: count -= offset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: indices[i] = idx
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int idx = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int offset = uniCounterOffset[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < last; $0++) {
	int $1 = 0;
	final int $2 = uniCounterOffset[$0];
	while (count <= index) {
		count += $2;
		++$1;
	} 
	--$1;
	count -= $2;
	indices[$0] = $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: indices[last] = index - count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return indices
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.DimensionMismatchException(c.length, dimension)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (c.length != dimension) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(c.length, dimension);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = c[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = c[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.OutOfRangeException(index, 0, size[i] - 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((index < 0) || 
(index >= size[i])) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(index, 0, size[i] - 1);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: count += uniCounterOffset[i] * c[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = c[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < dimension; $0++) {
	final int $1 = c[$0];
	if (($1 < 0) || 
	($1 >= size[$0])) {
		throw new org.apache.commons.math3.exception.OutOfRangeException($1, 0, size[$0] - 1);
	}
	count += uniCounterOffset[$0] * c[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return count + c[last]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return totalSize
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.MathArrays.copyOf(size)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.lang.StringBuilder sb = new java.lang.StringBuilder()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final java.lang.StringBuilder $0 = new java.lang.StringBuilder()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: sb.append("[").append(getCount(i)).append("]")
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < dimension; $0++) {
	sb.append("[").append(getCount($0)).append("]");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return sb.toString()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(org.apache.commons.math3.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE, java.lang.Double.NaN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(org.apache.commons.math3.util.OpenIntToDoubleHashMap.DEFAULT_EXPECTED_SIZE, missingEntries)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(expectedSize, java.lang.Double.NaN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int capacity = org.apache.commons.math3.util.OpenIntToDoubleHashMap.computeCapacity(expectedSize)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.computeCapacity(expectedSize)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys = new int[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = new double[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states = new byte[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.missingEntries = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mask = capacity - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int length = source.keys.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = source.keys.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys = new int[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(source.keys, 0, keys, 0, length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = new double[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(source.values, 0, values, 0, length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states = new byte[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(source.states, 0, states, 0, length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: missingEntries = source.missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: size = source.size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mask = source.mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: count = source.count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (expectedSize == 0) {
	return 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int capacity = ((int) (org.apache.commons.math3.util.FastMath.ceil(expectedSize / org.apache.commons.math3.util.OpenIntToDoubleHashMap.LOAD_FACTOR)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = ((int) (org.apache.commons.math3.util.FastMath.ceil(expectedSize / org.apache.commons.math3.util.OpenIntToDoubleHashMap.LOAD_FACTOR)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int powerOfTwo = java.lang.Integer.highestOneBit(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = java.lang.Integer.highestOneBit(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return capacity
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (powerOfTwo == capacity) {
	return capacity;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToDoubleHashMap.nextPowerOfTwo(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.lang.Integer.highestOneBit(i) << 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int hash = org.apache.commons.math3.util.OpenIntToDoubleHashMap.hashOf(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.hashOf(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int index = hash & mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = hash & mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (containsKey(key, index)) {
	return values[index];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FREE) {
	return missingEntries;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = index
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = index
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(perturb, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: index = j & mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int perturb = org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(hash); states[index] != org.apache.commons.math3.util.OpenIntToDoubleHashMap.FREE; $0 >>= org.apache.commons.math3.util.OpenIntToDoubleHashMap.PERTURB_SHIFT) {
	j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe($0, j);
	index = j & mask;
	if (containsKey(key, index)) {
		return values[index];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (containsKey(key, index)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FREE) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int perturb = org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(hash); states[index] != org.apache.commons.math3.util.OpenIntToDoubleHashMap.FREE; $0 >>= org.apache.commons.math3.util.OpenIntToDoubleHashMap.PERTURB_SHIFT) {
	j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe($0, j);
	index = j & mask;
	if (containsKey(key, index)) {
		return true;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return hash & 0x7fffffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(keys, states, key, mask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return index
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int perturb = org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: perturb >>= org.apache.commons.math3.util.OpenIntToDoubleHashMap.PERTURB_SHIFT
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((states[index] != org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (true) {
	j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(perturb, j);
	index = j & mask;
	perturb >>= org.apache.commons.math3.util.OpenIntToDoubleHashMap.PERTURB_SHIFT;

	if ((states[index] != org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
		break;
	}
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math3.util.OpenIntToDoubleHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) {


	return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) {


		return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int firstRemoved = index
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = index
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return firstRemoved
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (true) {
	j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(perturb, j);
	index = j & mask;

	if (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FREE) {
		return firstRemoved;
	} else { 		if ((states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) && (keys[index] == key)) {
			return org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index);
		}}

	perturb >>= org.apache.commons.math3.util.OpenIntToDoubleHashMap.PERTURB_SHIFT;

} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (((j << 2) + j) + perturb) + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (-index) - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return doRemove(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (containsKey(key, index)) {
	return doRemove(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int perturb = org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(hash); states[index] != org.apache.commons.math3.util.OpenIntToDoubleHashMap.FREE; $0 >>= org.apache.commons.math3.util.OpenIntToDoubleHashMap.PERTURB_SHIFT) {
	j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe($0, j);
	index = j & mask;
	if (containsKey(key, index)) {
		return doRemove(index);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((key != 0) || (states[index] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL)) && (keys[index] == key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys[index] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.REMOVED
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double previous = values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values[index] = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: --size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ++count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return previous
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int index = findInsertionIndex(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = findInsertionIndex(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double previous = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean newMapping = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: boolean $0 = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: index = org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: previous = values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newMapping = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (index < 0) {
	index = org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index);
	previous = values[index];
	newMapping = false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys[index] = key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values[index] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ++size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: growTable()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (shouldGrowTable()) {
	growTable();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (newMapping) {
	++size;
	if (shouldGrowTable()) {
		growTable();
	}
	++count;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int oldLength = states.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = states.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int[] oldKeys = keys
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int[] $0 = keys
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] oldValues = values
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = values
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final byte[] oldStates = states
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final byte[] $0 = states
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int newLength = org.apache.commons.math3.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER * oldLength
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.RESIZE_MULTIPLIER * oldLength
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int[] newKeys = new int[newLength]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int[] $0 = new int[newLength]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] newValues = new double[newLength]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[newLength]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final byte[] newStates = new byte[newLength]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final byte[] $0 = new byte[newLength]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int newMask = newLength - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = newLength - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int key = oldKeys[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = oldKeys[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, key, newMask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, key, newMask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newKeys[index] = key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newValues[index] = oldValues[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newStates[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int key = oldKeys[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, $0, newMask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (oldStates[i] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) {
	final int $0 = oldKeys[i];
	final int $1 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, $0, newMask);
	newKeys[$1] = $0;
	newValues[$1] = oldValues[i];
	newStates[$1] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int key = oldKeys[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, $1, newMask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < oldLength; ++$0) {
	if (oldStates[$0] == org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) {
		final int $1 = oldKeys[$0];
		final int $2 = org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(newKeys, newStates, $1, newMask);
		newKeys[$2] = $1;
		newValues[$2] = oldValues[$0];
		newStates[$2] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: mask = newMask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: keys = newKeys
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = newValues
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states = newStates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return size > ((mask + 1) * org.apache.commons.math3.util.OpenIntToDoubleHashMap.LOAD_FACTOR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int h = key ^ ((key >>> 20) ^ (key >>> 12))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = key ^ ((key >>> 20) ^ (key >>> 12))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (h ^ (h >>> 7)) ^ (h >>> 4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: referenceCount = count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: next = -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: advance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return next >= 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new java.util.ConcurrentModificationException()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (referenceCount != count) {
	throw new java.util.ConcurrentModificationException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new java.util.NoSuchElementException()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (current < 0) {
	throw new java.util.NoSuchElementException();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return keys[current]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return values[current]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: current = next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (states[++next] != org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL) {

} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: next = -2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: stream.defaultReadObject()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(field, org.apache.commons.math3.util.OpenIntToFieldHashMap.DEFAULT_EXPECTED_SIZE, field.getZero())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(field, org.apache.commons.math3.util.OpenIntToFieldHashMap.DEFAULT_EXPECTED_SIZE, missingEntries)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(field, expectedSize, field.getZero())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.field = field
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int capacity = org.apache.commons.math3.util.OpenIntToFieldHashMap.computeCapacity(expectedSize)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.OpenIntToFieldHashMap.computeCapacity(expectedSize)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = buildArray(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: field = source.field
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: values = buildArray(length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int capacity = ((int) (org.apache.commons.math3.util.FastMath.ceil(expectedSize / org.apache.commons.math3.util.OpenIntToFieldHashMap.LOAD_FACTOR)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = ((int) (org.apache.commons.math3.util.FastMath.ceil(expectedSize / org.apache.commons.math3.util.OpenIntToFieldHashMap.LOAD_FACTOR)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToFieldHashMap.nextPowerOfTwo(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int hash = org.apache.commons.math3.util.OpenIntToFieldHashMap.hashOf(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.OpenIntToFieldHashMap.hashOf(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FREE) {
	return missingEntries;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(perturb, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int perturb = org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(hash); states[index] != org.apache.commons.math3.util.OpenIntToFieldHashMap.FREE; $0 >>= org.apache.commons.math3.util.OpenIntToFieldHashMap.PERTURB_SHIFT) {
	j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe($0, j);
	index = j & mask;
	if (containsKey(key, index)) {
		return values[index];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FREE) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int perturb = org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(hash); states[index] != org.apache.commons.math3.util.OpenIntToFieldHashMap.FREE; $0 >>= org.apache.commons.math3.util.OpenIntToFieldHashMap.PERTURB_SHIFT) {
	j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe($0, j);
	index = j & mask;
	if (containsKey(key, index)) {
		return true;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new Iterator()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(keys, states, key, mask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
	return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if ((states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int perturb = org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: perturb >>= org.apache.commons.math3.util.OpenIntToFieldHashMap.PERTURB_SHIFT
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((states[index] != org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
	break;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (true) {
	j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(perturb, j);
	index = j & mask;
	perturb >>= org.apache.commons.math3.util.OpenIntToFieldHashMap.PERTURB_SHIFT;

	if ((states[index] != org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
		break;
	}
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) {
	while (true) {
		j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(perturb, j);
		index = j & mask;
		perturb >>= org.apache.commons.math3.util.OpenIntToFieldHashMap.PERTURB_SHIFT;

		if ((states[index] != org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) || (keys[index] == key)) {
			break;
		}
	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) {


	return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FREE) {
	return index;
} else { 	if (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) {


		return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FREE) {
	return firstRemoved;
} else { 	if ((states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
		return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (true) {
	j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(perturb, j);
	index = j & mask;

	if (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FREE) {
		return firstRemoved;
	} else { 		if ((states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) && (keys[index] == key)) {
			return org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index);
		}}

	perturb >>= org.apache.commons.math3.util.OpenIntToFieldHashMap.PERTURB_SHIFT;

} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int perturb = org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(hash)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = org.apache.commons.math3.util.OpenIntToFieldHashMap.perturb(hash); states[index] != org.apache.commons.math3.util.OpenIntToFieldHashMap.FREE; $0 >>= org.apache.commons.math3.util.OpenIntToFieldHashMap.PERTURB_SHIFT) {
	j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe($0, j);
	index = j & mask;
	if (containsKey(key, index)) {
		return doRemove(index);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((key != 0) || (states[index] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL)) && (keys[index] == key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.REMOVED
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final T previous = values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final T $0 = values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: T previous = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: T $0 = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: index = org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (index < 0) {
	index = org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index);
	previous = values[index];
	newMapping = false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final T[] oldValues = values
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final T[] $0 = values
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int newLength = org.apache.commons.math3.util.OpenIntToFieldHashMap.RESIZE_MULTIPLIER * oldLength
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.OpenIntToFieldHashMap.RESIZE_MULTIPLIER * oldLength
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final T[] newValues = buildArray(newLength)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final T[] $0 = buildArray(newLength)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, key, newMask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, key, newMask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newStates[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int key = oldKeys[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, $0, newMask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (oldStates[i] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) {
	final int $0 = oldKeys[i];
	final int $1 = org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, $0, newMask);
	newKeys[$1] = $0;
	newValues[$1] = oldValues[i];
	newStates[$1] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int key = oldKeys[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int index = org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, $1, newMask)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < oldLength; ++$0) {
	if (oldStates[$0] == org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) {
		final int $1 = oldKeys[$0];
		final int $2 = org.apache.commons.math3.util.OpenIntToFieldHashMap.findInsertionIndex(newKeys, newStates, $1, newMask);
		newKeys[$2] = $1;
		newValues[$2] = oldValues[$0];
		newStates[$2] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return size > ((mask + 1) * org.apache.commons.math3.util.OpenIntToFieldHashMap.LOAD_FACTOR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (states[++next] != org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL) {

} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((T[]) (java.lang.reflect.Array.newInstance(field.getRuntimeClass(), length)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: key = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: value = v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(entry.getKey(), entry.getValue())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (this == o) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.Pair<?, ?> oP = ((org.apache.commons.math3.util.Pair<?, ?>) (o))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.Pair<?, ?> $0 = ((org.apache.commons.math3.util.Pair<?, ?>) (o))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (key == null ? 
oP.key == null : 
key.equals(oP.key)) && 
(value == null ? 
oP.value == null : 
value.equals(oP.value))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.Pair<?, ?> oP = ((org.apache.commons.math3.util.Pair<?, ?>) (o))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (!(o instanceof org.apache.commons.math3.util.Pair)) {
	return false;
} else {
	org.apache.commons.math3.util.Pair<?, ?> $0 = ((org.apache.commons.math3.util.Pair<?, ?>) (o));
	return (key == null ? 
	$0.key == null : 
	key.equals($0.key)) && 
	(value == null ? 
	$0.value == null : 
	value.equals($0.value));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int result = (key == null) ? 0 : key.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = (key == null) ? 0 : key.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int h = (value == null) ? 0 : value.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = (value == null) ? 0 : value.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = ((37 * result) + h) ^ (h >>> 16)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: EPSILON = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 53L) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: SAFE_MIN = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 1022L) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (x < y) {
	return -1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.Precision.equals(x, y, eps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.Precision.equals(x, y, maxUlps)) {
	return 0;
} else { 	if (x < y) {
		return -1;
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Precision.equals(x, y, 1) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Precision.equalsIncludingNaN(x, y) || (org.apache.commons.math3.util.FastMath.abs(y - x) <= eps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int xInt = java.lang.Float.floatToIntBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = java.lang.Float.floatToIntBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int yInt = java.lang.Float.floatToIntBits(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = java.lang.Float.floatToIntBits(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - xInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xInt < 0) {
	xInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - xInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - yInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (yInt < 0) {
	yInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - yInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final boolean isEqual = org.apache.commons.math3.util.FastMath.abs(xInt - yInt) <= maxUlps
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final boolean $0 = org.apache.commons.math3.util.FastMath.abs(xInt - yInt) <= maxUlps
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (isEqual && (!java.lang.Float.isNaN(x))) && (!java.lang.Float.isNaN(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (java.lang.Float.isNaN(x) && java.lang.Float.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.Precision.equals(x, y, 1)) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double absoluteMax = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(x), org.apache.commons.math3.util.FastMath.abs(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.max(org.apache.commons.math3.util.FastMath.abs(x), org.apache.commons.math3.util.FastMath.abs(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double relativeDifference = org.apache.commons.math3.util.FastMath.abs((x - y) / absoluteMax)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.abs((x - y) / absoluteMax)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return relativeDifference <= eps
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long xInt = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: long yInt = java.lang.Double.doubleToLongBits(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: long $0 = java.lang.Double.doubleToLongBits(y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: xInt = org.apache.commons.math3.util.Precision.SGN_MASK - xInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (xInt < 0) {
	xInt = org.apache.commons.math3.util.Precision.SGN_MASK - xInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: yInt = org.apache.commons.math3.util.Precision.SGN_MASK - yInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (yInt < 0) {
	yInt = org.apache.commons.math3.util.Precision.SGN_MASK - yInt;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (isEqual && (!java.lang.Double.isNaN(x))) && (!java.lang.Double.isNaN(y))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || org.apache.commons.math3.util.Precision.equals(x, y, maxUlps)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.Precision.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new java.math.BigDecimal(
java.lang.Double.toString(x)).setScale(
scale, roundingMethod).doubleValue()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(x)) {
	return x;
} else {
	return java.lang.Double.NaN;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final float sign = org.apache.commons.math3.util.FastMath.copySign(1.0F, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final float $0 = org.apache.commons.math3.util.FastMath.copySign(1.0F, x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final float factor = ((float) (org.apache.commons.math3.util.FastMath.pow(10.0F, scale))) * sign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final float $0 = ((float) (org.apache.commons.math3.util.FastMath.pow(10.0F, scale))) * sign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (org.apache.commons.math3.util.Precision.roundUnscaled(x * factor, sign, roundingMethod))) / factor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double fraction = unscaled - org.apache.commons.math3.util.FastMath.floor(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = unscaled - org.apache.commons.math3.util.FastMath.floor(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (fraction > 0.5) {
	unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((org.apache.commons.math3.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math3.util.FastMath.floor(java.lang.Math.floor(
unscaled) / 2.0)) {
	unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
} else {
	unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (fraction < 0.5) {
	unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
} else {

	if ((org.apache.commons.math3.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math3.util.FastMath.floor(java.lang.Math.floor(
	unscaled) / 2.0)) {
		unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
	} else {
		unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (fraction > 0.5) {
	unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
} else { 	if (fraction < 0.5) {
		unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
	} else {

		if ((org.apache.commons.math3.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math3.util.FastMath.floor(java.lang.Math.floor(
		unscaled) / 2.0)) {
			unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
		} else {
			unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (fraction >= 0.5) {
	unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
} else {
	unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double fraction = unscaled - org.apache.commons.math3.util.FastMath.floor(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double fraction = unscaled - org.apache.commons.math3.util.FastMath.floor(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double fraction = unscaled - org.apache.commons.math3.util.FastMath.floor(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: switch (roundingMethod) {
	case java.math.BigDecimal.ROUND_CEILING :
		if (sign == (-1)) {
			unscaled = org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
		} else {
			unscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
		}
		break;
	case java.math.BigDecimal.ROUND_DOWN :
		unscaled = org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
		break;
	case java.math.BigDecimal.ROUND_FLOOR :
		if (sign == (-1)) {
			unscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
		} else {
			unscaled = org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY));
		}
		break;
	case java.math.BigDecimal.ROUND_HALF_DOWN : 		{
			unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY);
			double $0 = unscaled - org.apache.commons.math3.util.FastMath.floor(unscaled);
			if ($0 > 0.5) {
				unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
			} else {
				unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
			}
			break;
		}
	case java.math.BigDecimal.ROUND_HALF_EVEN : 		{
			double $1 = unscaled - org.apache.commons.math3.util.FastMath.floor(unscaled);
			if ($1 > 0.5) {
				unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
			} else { 				if ($1 < 0.5) {
					unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
				} else {

					if ((org.apache.commons.math3.util.FastMath.floor(unscaled) / 2.0) == org.apache.commons.math3.util.FastMath.floor(java.lang.Math.floor(
					unscaled) / 2.0)) {
						unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
					} else {
						unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
					}
				}}
			break;
		}
	case java.math.BigDecimal.ROUND_HALF_UP : 		{
			unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY);
			double $2 = unscaled - org.apache.commons.math3.util.FastMath.floor(unscaled);
			if ($2 >= 0.5) {
				unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled);
			} else {
				unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled);
			}
			break;
		}
	case java.math.BigDecimal.ROUND_UNNECESSARY :
		if (unscaled != org.apache.commons.math3.util.FastMath.floor(unscaled)) {
			throw new org.apache.commons.math3.exception.MathArithmeticException();
		}
		break;
	case java.math.BigDecimal.ROUND_UP :
		unscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY));
		break;
	default :
		throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.INVALID_ROUNDING_METHOD, 
		roundingMethod, 
		"ROUND_CEILING", java.math.BigDecimal.ROUND_CEILING, 
		"ROUND_DOWN", java.math.BigDecimal.ROUND_DOWN, 
		"ROUND_FLOOR", java.math.BigDecimal.ROUND_FLOOR, 
		"ROUND_HALF_DOWN", java.math.BigDecimal.ROUND_HALF_DOWN, 
		"ROUND_HALF_EVEN", java.math.BigDecimal.ROUND_HALF_EVEN, 
		"ROUND_HALF_UP", java.math.BigDecimal.ROUND_HALF_UP, 
		"ROUND_UNNECESSARY", java.math.BigDecimal.ROUND_UNNECESSARY, 
		"ROUND_UP", java.math.BigDecimal.ROUND_UP);}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return unscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (x + originalDelta) - x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(org.apache.commons.math3.util.ResizableDoubleArray.DEFAULT_INITIAL_CAPACITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(initialCapacity, org.apache.commons.math3.util.ResizableDoubleArray.DEFAULT_EXPANSION_FACTOR)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(org.apache.commons.math3.util.ResizableDoubleArray.DEFAULT_INITIAL_CAPACITY, 
org.apache.commons.math3.util.ResizableDoubleArray.DEFAULT_EXPANSION_FACTOR, 
org.apache.commons.math3.util.ResizableDoubleArray.DEFAULT_CONTRACTION_DELTA + org.apache.commons.math3.util.ResizableDoubleArray.DEFAULT_EXPANSION_FACTOR, 
org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, 
initialArray)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(initialCapacity, 
((double) (expansionFactor)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(initialCapacity, 
expansionFactor, 
org.apache.commons.math3.util.ResizableDoubleArray.DEFAULT_CONTRACTION_DELTA + expansionFactor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(initialCapacity, 
((double) (expansionFactor)), 
((double) (contractionCriteria)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(initialCapacity, 
expansionFactor, 
contractionCriterion, 
org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, 
null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(initialCapacity, 
expansionFactor, 
contractionCriteria, 
expansionMode == org.apache.commons.math3.util.ResizableDoubleArray.ADDITIVE_MODE ? 
org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.ADDITIVE : 
org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE, 
null)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setExpansionMode(expansionMode)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE, 
initialCapacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (initialCapacity <= 0) {
	throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE, 
	initialCapacity);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: checkContractExpand(contractionCriterion, expansionFactor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.expansionFactor = expansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.contractionCriterion = contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.expansionMode = expansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray = new double[initialCapacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: numElements = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: startIndex = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: addElements(data)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (data != null) {
	addElements(data);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathUtils.checkNotNull(original)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.ResizableDoubleArray.copy(original, this)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: expand()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (internalArray.length <= (startIndex + numElements)) {
	expand();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray[startIndex + (numElements++)] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] tempArray = new double[(numElements + values.length) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[(numElements + values.length) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(internalArray, startIndex, tempArray, 0, numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(values, 0, tempArray, numElements, values.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray = tempArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: numElements += values.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double discarded = internalArray[startIndex]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = internalArray[startIndex]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((startIndex + (numElements + 1)) > internalArray.length) {
	expand();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: startIndex += 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray[startIndex + (numElements - 1)] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: contract()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (shouldContract()) {
	contract();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return discarded
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalStateException(
org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (numElements < 1) {
	throw new org.apache.commons.math3.exception.MathIllegalStateException(
	org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int substIndex = startIndex + (numElements - 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = startIndex + (numElements - 1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double discarded = internalArray[substIndex]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = internalArray[substIndex]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray[substIndex] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: checkContractExpand(((double) (contraction)), 
((double) (expansion)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.exception.NumberIsTooSmallException e = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.exception.NumberIsTooSmallException $0 = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: e.getContext().addMessage(org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, 
contraction, expansion)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw e
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.exception.NumberIsTooSmallException e = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (contraction < expansion) {
	final org.apache.commons.math3.exception.NumberIsTooSmallException $0 = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, true);
	$0.getContext().addMessage(org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR, 
	contraction, expansion);
	throw $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.exception.NumberIsTooSmallException e = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.exception.NumberIsTooSmallException $0 = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: e.getContext().addMessage(org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, 
contraction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.exception.NumberIsTooSmallException e = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (contraction <= 1) {
	final org.apache.commons.math3.exception.NumberIsTooSmallException $0 = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, false);
	$0.getContext().addMessage(org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_ONE, 
	contraction);
	throw $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: e.getContext().addMessage(org.apache.commons.math3.exception.util.LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, 
expansion)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.exception.NumberIsTooSmallException e = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (expansion <= 1) {
	final org.apache.commons.math3.exception.NumberIsTooSmallException $0 = new org.apache.commons.math3.exception.NumberIsTooSmallException(contraction, 1, false);
	$0.getContext().addMessage(org.apache.commons.math3.exception.util.LocalizedFormats.EXPANSION_FACTOR_SMALLER_THAN_ONE, 
	expansion);
	throw $0;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] tempArray = new double[numElements + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[numElements + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: discardExtremeElements(i, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: discardExtremeElements(i, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(
org.apache.commons.math3.exception.util.LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, 
i, numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(
org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: numElements -= i
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: startIndex += i
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (front) {
	startIndex += i;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (i < 0) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(
	org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
	i);
} else {

	numElements -= i;
	if (front) {
		startIndex += i;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (i > numElements) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(
	org.apache.commons.math3.exception.util.LocalizedFormats.TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY, 
	i, numElements);
} else { 	if (i < 0) {
		throw new org.apache.commons.math3.exception.MathIllegalArgumentException(
		org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS, 
		i);
	} else {

		numElements -= i;
		if (front) {
			startIndex += i;
		}
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int newSize = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newSize = ((int) (org.apache.commons.math3.util.FastMath.ceil(internalArray.length * expansionFactor)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newSize = ((int) (internalArray.length + org.apache.commons.math3.util.FastMath.round(expansionFactor)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (expansionMode == org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE) {
	newSize = ((int) (org.apache.commons.math3.util.FastMath.ceil(internalArray.length * expansionFactor)));
} else {
	newSize = ((int) (internalArray.length + org.apache.commons.math3.util.FastMath.round(expansionFactor)));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] tempArray = new double[newSize]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[newSize]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] tempArray = new double[size]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[size]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (getContractionCriterion()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new java.lang.ArrayIndexOutOfBoundsException(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return internalArray[startIndex + index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (index >= 0) {
	return internalArray[startIndex + index];
} else {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (index >= numElements) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
} else { 	if (index >= 0) {
		return internalArray[startIndex + index];
	} else {
		throw new java.lang.ArrayIndexOutOfBoundsException(index);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double[] elementArray = new double[numElements]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double[] $0 = new double[numElements]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(internalArray, startIndex, elementArray, 0, numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return elementArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((float) (expansionFactor))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: switch (expansionMode) {
	case MULTIPLICATIVE :
		return org.apache.commons.math3.util.ResizableDoubleArray.MULTIPLICATIVE_MODE;
	case ADDITIVE :
		return org.apache.commons.math3.util.ResizableDoubleArray.ADDITIVE_MODE;
	default :
		throw new org.apache.commons.math3.exception.MathInternalError();}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return internalArray.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return internalArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: checkContractExpand(contractionCriteria, getExpansionFactor())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.contractionCriterion = contractionCriteria
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: synchronized(this) {
	this.contractionCriterion = contractionCriteria;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return f.evaluate(internalArray, startIndex, numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (index < 0) {
	throw new java.lang.ArrayIndexOutOfBoundsException(index);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: numElements = index + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((index + 1) > numElements) {
	numElements = index + 1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: expandTo(startIndex + (index + 1))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((startIndex + index) >= internalArray.length) {
	expandTo(startIndex + (index + 1));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: internalArray[startIndex + index] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: checkContractExpand(getContractionCriterion(), expansionFactor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: synchronized(this) {
	this.expansionFactor = expansionFactor;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE, expansionMode, 
org.apache.commons.math3.util.ResizableDoubleArray.MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE", 
org.apache.commons.math3.util.ResizableDoubleArray.ADDITIVE_MODE, "ADDITIVE_MODE")
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((expansionMode != org.apache.commons.math3.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) && 
(expansionMode != org.apache.commons.math3.util.ResizableDoubleArray.ADDITIVE_MODE)) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE, expansionMode, 
	org.apache.commons.math3.util.ResizableDoubleArray.MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE", 
	org.apache.commons.math3.util.ResizableDoubleArray.ADDITIVE_MODE, "ADDITIVE_MODE");
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.ADDITIVE)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (expansionMode == org.apache.commons.math3.util.ResizableDoubleArray.ADDITIVE_MODE) {
	setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.ADDITIVE);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (expansionMode == org.apache.commons.math3.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
	setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE);
} else { 	if (expansionMode == org.apache.commons.math3.util.ResizableDoubleArray.ADDITIVE_MODE) {
		setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.ADDITIVE);
	}}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: synchronized(this) {
	if (expansionMode == org.apache.commons.math3.util.ResizableDoubleArray.MULTIPLICATIVE_MODE) {
		setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE);
	} else { 		if (expansionMode == org.apache.commons.math3.util.ResizableDoubleArray.ADDITIVE_MODE) {
			setExpansionMode(org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.ADDITIVE);
		}}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(
org.apache.commons.math3.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE, 
i)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (i < 0) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(
	org.apache.commons.math3.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE, 
	i);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int newSize = startIndex + i
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int $0 = startIndex + i
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: expandTo(newSize)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (newSize > internalArray.length) {
	expandTo(newSize);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: numElements = i
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (internalArray.length / ((float) (numElements))) > contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (internalArray.length - numElements) > contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (expansionMode == org.apache.commons.math3.util.ResizableDoubleArray.ExpansionMode.MULTIPLICATIVE) {
	return (internalArray.length / ((float) (numElements))) > contractionCriterion;
} else {
	return (internalArray.length - numElements) > contractionCriterion;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathUtils.checkNotNull(source)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.MathUtils.checkNotNull(dest)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.contractionCriterion = source.contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.expansionFactor = source.expansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.expansionMode = source.expansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.internalArray = new double[source.internalArray.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(source.internalArray, 0, dest.internalArray, 
0, dest.internalArray.length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.numElements = source.numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: dest.startIndex = source.startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: synchronized(dest) {
	dest.contractionCriterion = source.contractionCriterion;
	dest.expansionFactor = source.expansionFactor;
	dest.expansionMode = source.expansionMode;
	dest.internalArray = new double[source.internalArray.length];
	java.lang.System.arraycopy(source.internalArray, 0, dest.internalArray, 
	0, dest.internalArray.length);
	dest.numElements = source.numElements;
	dest.startIndex = source.startIndex;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: synchronized(source) {
	synchronized(dest) {
		dest.contractionCriterion = source.contractionCriterion;
		dest.expansionFactor = source.expansionFactor;
		dest.expansionMode = source.expansionMode;
		dest.internalArray = new double[source.internalArray.length];
		java.lang.System.arraycopy(source.internalArray, 0, dest.internalArray, 
		0, dest.internalArray.length);
		dest.numElements = source.numElements;
		dest.startIndex = source.startIndex;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.ResizableDoubleArray result = new org.apache.commons.math3.util.ResizableDoubleArray()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.util.ResizableDoubleArray $0 = new org.apache.commons.math3.util.ResizableDoubleArray()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.ResizableDoubleArray.copy(this, result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (object == this) {
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((object instanceof org.apache.commons.math3.util.ResizableDoubleArray) == false) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean result = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: boolean $0 = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.ResizableDoubleArray other = ((org.apache.commons.math3.util.ResizableDoubleArray) (object))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.util.ResizableDoubleArray $0 = ((org.apache.commons.math3.util.ResizableDoubleArray) (object))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.contractionCriterion == contractionCriterion)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.expansionFactor == expansionFactor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.expansionMode == expansionMode)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.numElements == numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: result = result && (other.startIndex == startIndex)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.util.Arrays.equals(internalArray, other.internalArray)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (!result) {
	return false;
} else {
	return java.util.Arrays.equals(internalArray, other.internalArray);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean result = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.ResizableDoubleArray other = ((org.apache.commons.math3.util.ResizableDoubleArray) (object))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: synchronized(object) {
	boolean $0 = true;
	final org.apache.commons.math3.util.ResizableDoubleArray $1 = ((org.apache.commons.math3.util.ResizableDoubleArray) (object));
	$0 = $0 && ($1.contractionCriterion == contractionCriterion);
	$0 = $0 && ($1.expansionFactor == expansionFactor);
	$0 = $0 && ($1.expansionMode == expansionMode);
	$0 = $0 && ($1.numElements == numElements);
	$0 = $0 && ($1.startIndex == startIndex);
	if (!$0) {
		return false;
	} else {
		return java.util.Arrays.equals(internalArray, $1.internalArray);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: boolean result = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.util.ResizableDoubleArray other = ((org.apache.commons.math3.util.ResizableDoubleArray) (object))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: synchronized(this) {
	synchronized(object) {
		boolean $0 = true;
		final org.apache.commons.math3.util.ResizableDoubleArray $1 = ((org.apache.commons.math3.util.ResizableDoubleArray) (object));
		$0 = $0 && ($1.contractionCriterion == contractionCriterion);
		$0 = $0 && ($1.expansionFactor == expansionFactor);
		$0 = $0 && ($1.expansionMode == expansionMode);
		$0 = $0 && ($1.numElements == numElements);
		$0 = $0 && ($1.startIndex == startIndex);
		if (!$0) {
			return false;
		} else {
			return java.util.Arrays.equals(internalArray, $1.internalArray);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final int[] hashData = new int[6]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final int[] $0 = new int[6]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[0] = java.lang.Double.valueOf(expansionFactor).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[1] = java.lang.Double.valueOf(contractionCriterion).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[2] = expansionMode.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[3] = java.util.Arrays.hashCode(internalArray)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[4] = numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hashData[5] = startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return java.util.Arrays.hashCode(hashData)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: map = new java.util.HashMap<java.lang.Class<?>, org.apache.commons.math3.util.NumberTransformer>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: defaultTransformer = new org.apache.commons.math3.util.DefaultTransformer()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.containsKey(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.containsValue(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.get(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.put(key, transformer)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.remove(key)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: map.clear()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.keySet()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return map.values()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double value = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: value = defaultTransformer.transform(o)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.NumberTransformer trans = getTransformer(o.getClass())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.NumberTransformer $0 = getTransformer(o.getClass())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: value = trans.transform(o)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (trans != null) {
	value = trans.transform(o);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.NumberTransformer trans = getTransformer(o.getClass())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((o instanceof java.lang.Number) || (o instanceof java.lang.String)) {
	value = defaultTransformer.transform(o);
} else {
	org.apache.commons.math3.util.NumberTransformer $0 = getTransformer(o.getClass());
	if ($0 != null) {
		value = $0.transform(o);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.TransformerMap rhs = ((org.apache.commons.math3.util.TransformerMap) (other))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.util.TransformerMap $0 = ((org.apache.commons.math3.util.TransformerMap) (other))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (!defaultTransformer.equals(rhs.defaultTransformer)) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (map.size() != rhs.map.size()) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (!entry.getValue().equals(rhs.map.get(entry.getKey()))) {
	return false;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math3.util.NumberTransformer> entry
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math3.util.NumberTransformer> $0 : map.entrySet()) {
	if (!$0.getValue().equals(rhs.map.get($0.getKey()))) {
		return false;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.TransformerMap rhs = ((org.apache.commons.math3.util.TransformerMap) (other))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math3.util.NumberTransformer> entry
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (other instanceof org.apache.commons.math3.util.TransformerMap) {
	org.apache.commons.math3.util.TransformerMap $0 = ((org.apache.commons.math3.util.TransformerMap) (other));
	if (!defaultTransformer.equals($0.defaultTransformer)) {
		return false;
	}
	if (map.size() != $0.map.size()) {
		return false;
	}
	for (java.util.Map.Entry<java.lang.Class<?>, org.apache.commons.math3.util.NumberTransformer> $1 : map.entrySet()) {
		if (!$1.getValue().equals($0.map.get($1.getKey()))) {
			return false;
		}
	}
	return true;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int hash = defaultTransformer.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = defaultTransformer.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: hash = (hash * 31) + t.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.util.NumberTransformer t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (org.apache.commons.math3.util.NumberTransformer $0 : map.values()) {
	hash = (hash * 31) + $0.hashCode();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return hash
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 1
java.lang.NullPointerException
java.lang.NullPointerException
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy$1.compare(LevenSearchStrategy.java:66)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy$1.compare(LevenSearchStrategy.java:61)
	at java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)
	at java.util.TimSort.sort(TimSort.java:234)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:61)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:207)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:251)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:222)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 7.167
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:186) - 
 --SOLUTIONS DESCRIPTION--


Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-16
TOTAL_TIME=7.167
NR_GENERATIONS=1
NR_RIGHT_COMPILATIONS=null
NR_FAILLING_COMPILATIONS=null
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=ERROR

Patch stats:

[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:212) - Time Total(s): 2538.55


Node: 82f84163ab76



Date: Mon Oct 28 02:46:57 EDT 2019

cd /script/jGenProg_Defects4J_Math_16;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-16 \
	-failing org.apache.commons.math3.util.FastMathTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Math_16/target/classes/:/script/jGenProg_Defects4J_Math_16/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

