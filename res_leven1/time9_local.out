Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 04:34:02,961 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 04:34:02,967 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 04:34:02,968 main:382 - The compliance of the JVM is:  7
[INFO] 04:34:02,971 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Time-9  -failing  org.joda.time.TestDateTimeZone  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  local  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Time_9/target/classes/:/script/jGenProg_Defects4J_Time_9/target/test-classes/:/defects4j/framework/projects/Time/lib/joda-convert-1.2.jar:/defects4j/framework/projects/Time/lib/junit-3.8.2.jar:/defects4j/framework/projects/Time/lib/junit/junit/3.8.2/junit-3.8.2.jar:/defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar]
[INFO] 04:34:02,975 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Time_9/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Time_9/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:104) - mode is Leven
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 262
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Time_9/./output_astor/AstorMain-Time-9//bin//default from 262 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Time_9/./output_astor/AstorMain-Time-9//bin//default, /script/jGenProg_Defects4J_Time_9/target/classes/, /script/jGenProg_Defects4J_Time_9/target/test-classes/, /defects4j/framework/projects/Time/lib/joda-convert-1.2.jar, /defects4j/framework/projects/Time/lib/junit-3.8.2.jar, /defects4j/framework/projects/Time/lib/junit/junit/3.8.2/junit-3.8.2.jar, /defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedMutableDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedGJChronologyChangedInternals
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testDuration
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedISOChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedBuddhistChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeProperty
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedPeriodType
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedJulianChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeFieldType
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedYearMonthDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedMutableDateTimeProperty
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedGregorianChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalDate
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedUnsupportedDateTimeField
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeZone
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedCopticChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalDateBuddhist
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateMidnight
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedGJChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeZoneUTC
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedInstant
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedTimeOfDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateMidnightProperty
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatter#testZoneShortNameNearTransition
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatter#testZoneNameNearTransition
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatter#testZoneShortNameNearTransition
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatter#testZoneNameNearTransition
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormat#testFormat_zoneText
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormat#testFormat_zoneLongText
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_fullDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_mediumLongDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_fullTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_shortLongDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_longTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_mediumFullDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_shortFullDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_longDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseLongName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseShortNameWithAutoLookup
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseLongNameWithLookup
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseShortNameWithLookup
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseShortName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDays#testFactory_daysBetween_RPartial_MonthDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestMonths#testFactory_monthsBetween_RPartial_MonthDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestInterval_Basics#testIsEqual_RI
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestMonths#testFactory_monthsBetween_RPartial_MonthDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDays#testFactory_daysBetween_RPartial_MonthDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetName_berlin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetShortName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testForOffsetHoursMinutes_int_int
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetShortName_berlin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedMutableDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedGJChronologyChangedInternals
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testDuration
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedISOChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedBuddhistChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeProperty
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedPeriodType
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedJulianChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeFieldType
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedYearMonthDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedMutableDateTimeProperty
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedGregorianChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalDate
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedUnsupportedDateTimeField
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeZone
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedCopticChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalDateBuddhist
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateMidnight
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedGJChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeZoneUTC
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedInstant
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedTimeOfDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateMidnightProperty
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatter#testZoneShortNameNearTransition
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatter#testZoneNameNearTransition
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormat#testFormat_zoneText
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormat#testFormat_zoneLongText
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_fullDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_mediumLongDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_fullTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_shortLongDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_longTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_mediumFullDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_shortFullDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_longDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseLongName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseShortNameWithAutoLookup
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseLongNameWithLookup
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseShortNameWithLookup
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseShortName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.tz.TestCompiler#testDateTimeZoneBuilder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.tz.TestCompiler#testDateTimeZoneBuilder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestInterval_Basics#testIsEqual_RI
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseLongName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseShortNameWithAutoLookup
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseLongNameWithLookup
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseShortNameWithLookup
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatterBuilder#test_printParseShortName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestInterval_Basics#testIsEqual_RI
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestMonths#testFactory_monthsBetween_RPartial_MonthDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDays#testFactory_daysBetween_RPartial_MonthDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetName_berlin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetShortName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testForOffsetHoursMinutes_int_int
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetShortName_berlin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedMutableDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedGJChronologyChangedInternals
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testDuration
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedISOChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedBuddhistChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeProperty
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedPeriodType
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedJulianChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeFieldType
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedYearMonthDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedMutableDateTimeProperty
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedGregorianChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalDate
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedUnsupportedDateTimeField
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeZone
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedCopticChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalDateBuddhist
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateMidnight
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedGJChronology
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateTimeZoneUTC
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedInstant
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedLocalDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedTimeOfDay
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestSerialization#testSerializedDateMidnightProperty
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_fullDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_mediumLongDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_fullTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_shortLongDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_longTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_mediumFullDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_shortFullDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormatStyle#testForStyle_longDateTime
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormat#testFormat_zoneText
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.format.TestDateTimeFormat#testFormat_zoneLongText
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.tz.TestCompiler#testDateTimeZoneBuilder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetName_berlin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetShortName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetName
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testForOffsetHoursMinutes_int_int
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.joda.time.TestDateTimeZone#testGetShortName_berlin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:11914, fails: 156, GZoltar suspicious 10336, with positive susp 2208
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 11915
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 326 with susp > 0.1, we consider: 326
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 354120 milliseconds (354 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Time_9/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Time_9/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Time_9/target/classes/, /script/jGenProg_Defects4J_Time_9/target/test-classes/, /defects4j/framework/projects/Time/lib/joda-convert-1.2.jar, /defects4j/framework/projects/Time/lib/junit-3.8.2.jar, /defects4j/framework/projects/Time/lib/junit/junit/3.8.2/junit-3.8.2.jar, /defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 157
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 326
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 326,  259
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 259
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 259, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 6.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Time_9/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 354120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.joda.time.TestDateTimeZone
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Time-9
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Time_9/target/classes/:/script/jGenProg_Defects4J_Time_9/target/test-classes/:/defects4j/framework/projects/Time/lib/joda-convert-1.2.jar:/defects4j/framework/projects/Time/lib/junit-3.8.2.jar:/defects4j/framework/projects/Time/lib/junit/junit/3.8.2/junit-3.8.2.jar:/defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= local
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
p.printTo(buf, instant, chrono, displayOffset, displayZone, locale):p.printTo(buf, instant, chrono, displayOffset, displayZone, locale)
return p.parseInto(bucket, text, position):return p.parseInto(bucket, text, position)
f = org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.get(key):f = org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.get(key)
iType = type:iType = type
java.text.DateFormat f = null:java.text.DateFormat $0 = null
if ((f instanceof java.text.SimpleDateFormat) == false) {
	throw new java.lang.IllegalArgumentException("No datetime pattern for locale: " + locale);
}:if ((f instanceof java.text.SimpleDateFormat) == false) {
	throw new java.lang.IllegalArgumentException("No datetime pattern for locale: " + locale);
}
synchronized(org.joda.time.format.DateTimeFormat.StyleFormatter.cCache) {
	f = org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.get(key);
	if (f == null) {
		java.lang.String pattern = getPattern(locale);
		f = org.joda.time.format.DateTimeFormat.forPattern(pattern);
		org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f);
	}
}:synchronized(org.joda.time.format.DateTimeFormat.StyleFormatter.cCache) {
	f = org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.get(key);
	if (f == null) {
		java.lang.String $0 = getPattern(locale);
		f = org.joda.time.format.DateTimeFormat.forPattern($0);
		org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f);
	}
}
f = org.joda.time.format.DateTimeFormat.forPattern(pattern):f = org.joda.time.format.DateTimeFormat.forPattern(pattern)
iDateStyle = dateStyle:iDateStyle = dateStyle
iTimeStyle = timeStyle:iTimeStyle = timeStyle
if (f == null) {
	java.lang.String pattern = getPattern(locale);
	f = org.joda.time.format.DateTimeFormat.forPattern(pattern);
	org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f);
}:if (f == null) {
	java.lang.String $0 = getPattern(locale);
	f = org.joda.time.format.DateTimeFormat.forPattern($0);
	org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f);
}
return 40:return 40
throw new java.lang.IllegalArgumentException("No datetime pattern for locale: " + locale):throw new java.lang.IllegalArgumentException("No datetime pattern for locale: " + locale)
p.printTo(out, partial, locale):p.printTo(out, partial, locale)
switch (iType) {
	case org.joda.time.format.DateTimeFormat.DATE :
		f = java.text.DateFormat.getDateInstance(iDateStyle, locale);
		break;
	case org.joda.time.format.DateTimeFormat.TIME :
		f = java.text.DateFormat.getTimeInstance(iTimeStyle, locale);
		break;
	case org.joda.time.format.DateTimeFormat.DATETIME :
		f = java.text.DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);
		break;}:switch (iType) {
	case org.joda.time.format.DateTimeFormat.DATE :
		f = java.text.DateFormat.getDateInstance(iDateStyle, locale);
		break;
	case org.joda.time.format.DateTimeFormat.TIME :
		f = java.text.DateFormat.getTimeInstance(iTimeStyle, locale);
		break;
	case org.joda.time.format.DateTimeFormat.DATETIME :
		f = java.text.DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);
		break;}
return ((java.text.SimpleDateFormat) (f)).toPattern():return ((java.text.SimpleDateFormat) (f)).toPattern()
p.printTo(buf, partial, locale):p.printTo(buf, partial, locale)
java.lang.String key = java.lang.Integer.toString((iType + (iDateStyle << 4)) + (iTimeStyle << 8)) + locale.toString():java.lang.String $0 = java.lang.Integer.toString((iType + (iDateStyle << 4)) + (iTimeStyle << 8)) + locale.toString()
org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f):org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f)
locale = (locale == null) ? java.util.Locale.getDefault() : locale:locale = (locale == null) ? java.util.Locale.getDefault() : locale
java.lang.String pattern = getPattern(locale):java.lang.String $0 = getPattern(locale)
p.printTo(out, instant, chrono, displayOffset, displayZone, locale):p.printTo(out, instant, chrono, displayOffset, displayZone, locale)
org.joda.time.format.DateTimePrinter p = getFormatter(locale).getPrinter():org.joda.time.format.DateTimePrinter $0 = getFormatter(locale).getPrinter()
org.joda.time.format.DateTimeParser p = getFormatter(bucket.getLocale()).getParser():org.joda.time.format.DateTimeParser $0 = getFormatter(bucket.getLocale()).getParser()
if (strict || (offsetLocal < 0)) {

	long nextLocal = nextTransition(instantLocal - offsetLocal);
	if (nextLocal == (instantLocal - offsetLocal)) {
		nextLocal = java.lang.Long.MAX_VALUE;
	}
	long nextAdjusted = nextTransition(instantLocal - offset);
	if (nextAdjusted == (instantLocal - offset)) {
		nextAdjusted = java.lang.Long.MAX_VALUE;
	}
	if (nextLocal != nextAdjusted) {

		if (strict) {

			throw new org.joda.time.IllegalInstantException(instantLocal, getID());
		} else {



			offset = offsetLocal;
		}
	}
}:if (strict || (offsetLocal < 0)) {

	long $0 = nextTransition(instantLocal - offsetLocal);
	if ($0 == (instantLocal - offsetLocal)) {
		$0 = java.lang.Long.MAX_VALUE;
	}
	long $1 = nextTransition(instantLocal - offset);
	if ($1 == (instantLocal - offset)) {
		$1 = java.lang.Long.MAX_VALUE;
	}
	if ($0 != $1) {

		if (strict) {

			throw new org.joda.time.IllegalInstantException(instantLocal, getID());
		} else {



			offset = offsetLocal;
		}
	}
}
if (strict) {

	throw new org.joda.time.IllegalInstantException(instantLocal, getID());
} else {



	offset = offsetLocal;
}:if (strict) {

	throw new org.joda.time.IllegalInstantException(instantLocal, getID());
} else {



	offset = offsetLocal;
}
if (newZone == this) {
	return oldInstant;
}:if (newZone == this) {
	return oldInstant;
}
return p.parseInto(bucket, text, position):return p.parseInto(bucket, text, position)
f = org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.get(key):f = org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.get(key)
iType = type:iType = type
if (isFixed()) {
	return false;
}:if (isFixed()) {
	return false;
}
iDateStyle = dateStyle:iDateStyle = dateStyle
iTimeStyle = timeStyle:iTimeStyle = timeStyle
if (zone != null) {
	return zone;
}:if (zone != null) {
	return zone;
}
if ((minutesOffset < 0) || (minutesOffset > 59)) {
	throw new java.lang.IllegalArgumentException("Minutes out of range: " + minutesOffset);
}:if ((minutesOffset < 0) || (minutesOffset > 59)) {
	throw new java.lang.IllegalArgumentException("Minutes out of range: " + minutesOffset);
}
if (offsetLocal >= 0) {
	long prev = previousTransition(instantAdjusted);
	if (prev < instantAdjusted) {
		int offsetPrev = getOffset(prev);
		int diff = offsetPrev - offsetLocal;
		if ((instantAdjusted - prev) <= diff) {
			return offsetPrev;
		}
	}
}:if (offsetLocal >= 0) {
	long $0 = previousTransition(instantAdjusted);
	if ($0 < instantAdjusted) {
		int $1 = getOffset($0);
		int $2 = $1 - offsetLocal;
		if ((instantAdjusted - $0) <= $2) {
			return $1;
		}
	}
}
if (nextAdjusted == (instantLocal - offset)) {
	nextAdjusted = java.lang.Long.MAX_VALUE;
}:if (nextAdjusted == (instantLocal - offset)) {
	nextAdjusted = java.lang.Long.MAX_VALUE;
}
p.printTo(out, partial, locale):p.printTo(out, partial, locale)
if (convId.startsWith("GMT+") || convId.startsWith("GMT-")) {
	convId = convId.substring(3);
	int offset = org.joda.time.DateTimeZone.parseOffset(convId);
	if (offset == 0L) {
		return org.joda.time.DateTimeZone.UTC;
	} else {
		convId = org.joda.time.DateTimeZone.printOffset(offset);
		return org.joda.time.DateTimeZone.fixedOffsetZone(convId, offset);
	}
}:if (convId.startsWith("GMT+") || convId.startsWith("GMT-")) {
	convId = convId.substring(3);
	int $0 = org.joda.time.DateTimeZone.parseOffset(convId);
	if ($0 == 0L) {
		return org.joda.time.DateTimeZone.UTC;
	} else {
		convId = org.joda.time.DateTimeZone.printOffset($0);
		return org.joda.time.DateTimeZone.fixedOffsetZone(convId, $0);
	}
}
if (ref != null) {
	zone = ref.get();
	if (zone != null) {
		return zone;
	}
}:if (ref != null) {
	zone = ref.get();
	if (zone != null) {
		return zone;
	}
}
if (locale == null) {
	locale = java.util.Locale.getDefault();
}:if (locale == null) {
	locale = java.util.Locale.getDefault();
}
locale = (locale == null) ? java.util.Locale.getDefault() : locale:locale = (locale == null) ? java.util.Locale.getDefault() : locale
if (zone == null) {
	org.joda.time.DateTimeZone temp = null;
	try {
		try {
			java.lang.String id = java.lang.System.getProperty("user.timezone");
			if (id != null) {
				temp = org.joda.time.DateTimeZone.forID(id);
			}
		} catch (java.lang.RuntimeException ex) {

		}
		if (temp == null) {
			temp = org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone.getDefault());
		}
	} catch (java.lang.IllegalArgumentException ex) {

	}
	if (temp == null) {
		temp = org.joda.time.DateTimeZone.UTC;
	}
	org.joda.time.DateTimeZone.cDefault = zone = temp;
}:if (zone == null) {
	org.joda.time.DateTimeZone $0 = null;
	try {
		try {
			java.lang.String $1 = java.lang.System.getProperty("user.timezone");
			if ($1 != null) {
				$0 = org.joda.time.DateTimeZone.forID($1);
			}
		} catch (java.lang.RuntimeException ex) {

		}
		if ($0 == null) {
			$0 = org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone.getDefault());
		}
	} catch (java.lang.IllegalArgumentException ex) {

	}
	if ($0 == null) {
		$0 = org.joda.time.DateTimeZone.UTC;
	}
	org.joda.time.DateTimeZone.cDefault = zone = $0;
}
java.lang.String pattern = getPattern(locale):java.lang.String $0 = getPattern(locale)
if (id.equals("UTC")) {
	return org.joda.time.DateTimeZone.UTC;
}:if (id.equals("UTC")) {
	return org.joda.time.DateTimeZone.UTC;
}
if (hoursInMinutes < 0) {
	minutesOffset = org.joda.time.field.FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
} else {
	minutesOffset = org.joda.time.field.FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
}:if (hoursInMinutes < 0) {
	minutesOffset = org.joda.time.field.FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
} else {
	minutesOffset = org.joda.time.field.FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
}
if (provider == null) {
	provider = new org.joda.time.tz.UTCProvider();
}:if (provider == null) {
	provider = new org.joda.time.tz.UTCProvider();
}
if (!ids.contains("UTC")) {
	throw new java.lang.IllegalArgumentException("The provider doesn't support UTC");
}:if (!ids.contains("UTC")) {
	throw new java.lang.IllegalArgumentException("The provider doesn't support UTC");
}
if (offset == 0) {
	return org.joda.time.DateTimeZone.UTC;
}:if (offset == 0) {
	return org.joda.time.DateTimeZone.UTC;
}
p.printTo(buf, instant, chrono, displayOffset, displayZone, locale):p.printTo(buf, instant, chrono, displayOffset, displayZone, locale)
if (offset == 0L) {
	return org.joda.time.DateTimeZone.UTC;
} else {
	id = org.joda.time.DateTimeZone.printOffset(offset);
	return org.joda.time.DateTimeZone.fixedOffsetZone(id, offset);
}:if (offset == 0L) {
	return org.joda.time.DateTimeZone.UTC;
} else {
	id = org.joda.time.DateTimeZone.printOffset(offset);
	return org.joda.time.DateTimeZone.fixedOffsetZone(id, offset);
}
if (org.joda.time.DateTimeZone.cOffsetFormatter == null) {
	org.joda.time.DateTimeZone.cOffsetFormatter = new org.joda.time.format.DateTimeFormatterBuilder().appendTimeZoneOffset(
	null, true, 2, 4).toFormatter();

}:if (org.joda.time.DateTimeZone.cOffsetFormatter == null) {
	org.joda.time.DateTimeZone.cOffsetFormatter = new org.joda.time.format.DateTimeFormatterBuilder().appendTimeZoneOffset(
	null, true, 2, 4).toFormatter();

}
if (((instantLocal ^ instantUTC) < 0) && ((instantLocal ^ offset) < 0)) {
	throw new java.lang.ArithmeticException("Subtracting time zone offset caused overflow");
}:if (((instantLocal ^ instantUTC) < 0) && ((instantLocal ^ offset) < 0)) {
	throw new java.lang.ArithmeticException("Subtracting time zone offset caused overflow");
}
if (convId == null) {
	convId = zone.getID();
	if (convId.startsWith("GMT+") || convId.startsWith("GMT-")) {
		convId = convId.substring(3);
		int offset = org.joda.time.DateTimeZone.parseOffset(convId);
		if (offset == 0L) {
			return org.joda.time.DateTimeZone.UTC;
		} else {
			convId = org.joda.time.DateTimeZone.printOffset(offset);
			return org.joda.time.DateTimeZone.fixedOffsetZone(convId, offset);
		}
	}
}:if (convId == null) {
	convId = zone.getID();
	if (convId.startsWith("GMT+") || convId.startsWith("GMT-")) {
		convId = convId.substring(3);
		int $0 = org.joda.time.DateTimeZone.parseOffset(convId);
		if ($0 == 0L) {
			return org.joda.time.DateTimeZone.UTC;
		} else {
			convId = org.joda.time.DateTimeZone.printOffset($0);
			return org.joda.time.DateTimeZone.fixedOffsetZone(convId, $0);
		}
	}
}
if ((instantAdjusted - prev) <= diff) {
	return offsetPrev;
}:if ((instantAdjusted - prev) <= diff) {
	return offsetPrev;
}
if (nameProvider == null) {
	nameProvider = org.joda.time.DateTimeZone.getDefaultNameProvider();
}:if (nameProvider == null) {
	nameProvider = org.joda.time.DateTimeZone.getDefaultNameProvider();
}
java.text.DateFormat f = null:java.text.DateFormat $0 = null
if ((f instanceof java.text.SimpleDateFormat) == false) {
	throw new java.lang.IllegalArgumentException("No datetime pattern for locale: " + locale);
}:if ((f instanceof java.text.SimpleDateFormat) == false) {
	throw new java.lang.IllegalArgumentException("No datetime pattern for locale: " + locale);
}
if (providerClass != null) {
	try {
		nameProvider = ((org.joda.time.tz.NameProvider) (java.lang.Class.forName(providerClass).newInstance()));
	} catch (java.lang.Exception ex) {
		java.lang.Thread thread = java.lang.Thread.currentThread();
		thread.getThreadGroup().uncaughtException(thread, ex);
	}
}:if (providerClass != null) {
	try {
		nameProvider = ((org.joda.time.tz.NameProvider) (java.lang.Class.forName(providerClass).newInstance()));
	} catch (java.lang.Exception ex) {
		java.lang.Thread $0 = java.lang.Thread.currentThread();
		$0.getThreadGroup().uncaughtException($0, ex);
	}
}
f = org.joda.time.format.DateTimeFormat.forPattern(pattern):f = org.joda.time.format.DateTimeFormat.forPattern(pattern)
if (f == null) {
	java.lang.String pattern = getPattern(locale);
	f = org.joda.time.format.DateTimeFormat.forPattern(pattern);
	org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f);
}:if (f == null) {
	java.lang.String $0 = getPattern(locale);
	f = org.joda.time.format.DateTimeFormat.forPattern($0);
	org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f);
}
return 40:return 40
if (nameKey == null) {
	return iID;
}:if (nameKey == null) {
	return iID;
}
if ((instant < overlapStart) || (instant >= overlapEnd)) {
	return instant;
}:if ((instant < overlapStart) || (instant >= overlapEnd)) {
	return instant;
}
if (offset == 0) {
	return buf.toString();
}:if (offset == 0) {
	return buf.toString();
}
if (offset == 0L) {
	return org.joda.time.DateTimeZone.UTC;
} else {
	convId = org.joda.time.DateTimeZone.printOffset(offset);
	return org.joda.time.DateTimeZone.fixedOffsetZone(convId, offset);
}:if (offset == 0L) {
	return org.joda.time.DateTimeZone.UTC;
} else {
	convId = org.joda.time.DateTimeZone.printOffset(offset);
	return org.joda.time.DateTimeZone.fixedOffsetZone(convId, offset);
}
if (nextLocal != nextAdjusted) {

	if (strict) {

		throw new org.joda.time.IllegalInstantException(instantLocal, getID());
	} else {



		offset = offsetLocal;
	}
}:if (nextLocal != nextAdjusted) {

	if (strict) {

		throw new org.joda.time.IllegalInstantException(instantLocal, getID());
	} else {



		offset = offsetLocal;
	}
}
if (id != null) {
	temp = org.joda.time.DateTimeZone.forID(id);
}:if (id != null) {
	temp = org.joda.time.DateTimeZone.forID(id);
}
if (nextLocal == (instantLocal - offsetLocal)) {
	nextLocal = java.lang.Long.MAX_VALUE;
}:if (nextLocal == (instantLocal - offsetLocal)) {
	nextLocal = java.lang.Long.MAX_VALUE;
}
if ((ids == null) || (ids.size() == 0)) {
	throw new java.lang.IllegalArgumentException(
	"The provider doesn't have any available ids");
}:if ((ids == null) || (ids.size() == 0)) {
	throw new java.lang.IllegalArgumentException(
	"The provider doesn't have any available ids");
}
if (nameProvider == null) {
	nameProvider = new org.joda.time.tz.DefaultNameProvider();
}:if (nameProvider == null) {
	nameProvider = new org.joda.time.tz.DefaultNameProvider();
}
if (newZone == null) {
	newZone = org.joda.time.DateTimeZone.getDefault();
}:if (newZone == null) {
	newZone = org.joda.time.DateTimeZone.getDefault();
}
if (provider == null) {
	try {
		provider = new org.joda.time.tz.ZoneInfoProvider("org/joda/time/tz/data");
	} catch (java.lang.Exception ex) {
		java.lang.Thread thread = java.lang.Thread.currentThread();
		thread.getThreadGroup().uncaughtException(thread, ex);
	}
}:if (provider == null) {
	try {
		provider = new org.joda.time.tz.ZoneInfoProvider("org/joda/time/tz/data");
	} catch (java.lang.Exception ex) {
		java.lang.Thread $0 = java.lang.Thread.currentThread();
		$0.getThreadGroup().uncaughtException($0, ex);
	}
}
if (id == null) {
	throw new java.lang.IllegalArgumentException("Id must not be null");
}:if (id == null) {
	throw new java.lang.IllegalArgumentException("Id must not be null");
}
if (dtz != null) {
	return dtz;
}:if (dtz != null) {
	return dtz;
}
if (prev < instantAdjusted) {
	int offsetPrev = getOffset(prev);
	int diff = offsetPrev - offsetLocal;
	if ((instantAdjusted - prev) <= diff) {
		return offsetPrev;
	}
}:if (prev < instantAdjusted) {
	int $0 = getOffset(prev);
	int $1 = $0 - offsetLocal;
	if ((instantAdjusted - prev) <= $1) {
		return $0;
	}
}
if (instant == null) {
	return getOffset(org.joda.time.DateTimeUtils.currentTimeMillis());
}:if (instant == null) {
	return getOffset(org.joda.time.DateTimeUtils.currentTimeMillis());
}
if (id.startsWith("+") || id.startsWith("-")) {
	int offset = org.joda.time.DateTimeZone.parseOffset(id);
	if (offset == 0L) {
		return org.joda.time.DateTimeZone.UTC;
	} else {
		id = org.joda.time.DateTimeZone.printOffset(offset);
		return org.joda.time.DateTimeZone.fixedOffsetZone(id, offset);
	}
}:if (id.startsWith("+") || id.startsWith("-")) {
	int $0 = org.joda.time.DateTimeZone.parseOffset(id);
	if ($0 == 0L) {
		return org.joda.time.DateTimeZone.UTC;
	} else {
		id = org.joda.time.DateTimeZone.printOffset($0);
		return org.joda.time.DateTimeZone.fixedOffsetZone(id, $0);
	}
}
if (offsetLocal != offset) {



	if (strict || (offsetLocal < 0)) {

		long nextLocal = nextTransition(instantLocal - offsetLocal);
		if (nextLocal == (instantLocal - offsetLocal)) {
			nextLocal = java.lang.Long.MAX_VALUE;
		}
		long nextAdjusted = nextTransition(instantLocal - offset);
		if (nextAdjusted == (instantLocal - offset)) {
			nextAdjusted = java.lang.Long.MAX_VALUE;
		}
		if (nextLocal != nextAdjusted) {

			if (strict) {

				throw new org.joda.time.IllegalInstantException(instantLocal, getID());
			} else {



				offset = offsetLocal;
			}
		}
	}
}:if (offsetLocal != offset) {



	if (strict || (offsetLocal < 0)) {

		long $0 = nextTransition(instantLocal - offsetLocal);
		if ($0 == (instantLocal - offsetLocal)) {
			$0 = java.lang.Long.MAX_VALUE;
		}
		long $1 = nextTransition(instantLocal - offset);
		if ($1 == (instantLocal - offset)) {
			$1 = java.lang.Long.MAX_VALUE;
		}
		if ($0 != $1) {

			if (strict) {

				throw new org.joda.time.IllegalInstantException(instantLocal, getID());
			} else {



				offset = offsetLocal;
			}
		}
	}
}
if (dtz == null) {
	dtz = org.joda.time.DateTimeZone.cProvider.getZone(id);
}:if (dtz == null) {
	dtz = org.joda.time.DateTimeZone.cProvider.getZone(id);
}
throw new java.lang.IllegalArgumentException("No datetime pattern for locale: " + locale):throw new java.lang.IllegalArgumentException("No datetime pattern for locale: " + locale)
if (id == null) {
	return org.joda.time.DateTimeZone.getDefault();
}:if (id == null) {
	return org.joda.time.DateTimeZone.getDefault();
}
if (temp == null) {
	temp = org.joda.time.DateTimeZone.UTC;
}:if (temp == null) {
	temp = org.joda.time.DateTimeZone.UTC;
}
if (((instantUTC ^ instantLocal) < 0) && ((instantUTC ^ offset) >= 0)) {
	throw new java.lang.ArithmeticException("Adding time zone offset caused overflow");
}:if (((instantUTC ^ instantLocal) < 0) && ((instantUTC ^ offset) >= 0)) {
	throw new java.lang.ArithmeticException("Adding time zone offset caused overflow");
}
if (sm != null) {
	sm.checkPermission(new org.joda.time.JodaTimePermission("DateTimeZone.setProvider"));
}:if (sm != null) {
	sm.checkPermission(new org.joda.time.JodaTimePermission("DateTimeZone.setProvider"));
}
java.lang.String key = java.lang.Integer.toString((iType + (iDateStyle << 4)) + (iTimeStyle << 8)) + locale.toString():java.lang.String $0 = java.lang.Integer.toString((iType + (iDateStyle << 4)) + (iTimeStyle << 8)) + locale.toString()
if (zone == null) {
	synchronized(org.joda.time.DateTimeZone.class) {
		zone = org.joda.time.DateTimeZone.cDefault;
		if (zone == null) {
			org.joda.time.DateTimeZone temp = null;
			try {
				try {
					java.lang.String id = java.lang.System.getProperty("user.timezone");
					if (id != null) {
						temp = org.joda.time.DateTimeZone.forID(id);
					}
				} catch (java.lang.RuntimeException ex) {

				}
				if (temp == null) {
					temp = org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone.getDefault());
				}
			} catch (java.lang.IllegalArgumentException ex) {

			}
			if (temp == null) {
				temp = org.joda.time.DateTimeZone.UTC;
			}
			org.joda.time.DateTimeZone.cDefault = zone = temp;
		}
	}
}:if (zone == null) {
	synchronized(org.joda.time.DateTimeZone.class) {
		zone = org.joda.time.DateTimeZone.cDefault;
		if (zone == null) {
			org.joda.time.DateTimeZone $0 = null;
			try {
				try {
					java.lang.String $1 = java.lang.System.getProperty("user.timezone");
					if ($1 != null) {
						$0 = org.joda.time.DateTimeZone.forID($1);
					}
				} catch (java.lang.RuntimeException ex) {

				}
				if ($0 == null) {
					$0 = org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone.getDefault());
				}
			} catch (java.lang.IllegalArgumentException ex) {

			}
			if ($0 == null) {
				$0 = org.joda.time.DateTimeZone.UTC;
			}
			org.joda.time.DateTimeZone.cDefault = zone = $0;
		}
	}
}
if (nextLocal != nextAdjusted) {
	return offsetLocal;
}:if (nextLocal != nextAdjusted) {
	return offsetLocal;
}
if (offsetLocal != offsetAdjusted) {


	if ((offsetLocal - offsetAdjusted) < 0) {



		long nextLocal = nextTransition(instantAdjusted);
		long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
		if (nextLocal != nextAdjusted) {
			return offsetLocal;
		}
	}
} else { 	if (offsetLocal >= 0) {
		long prev = previousTransition(instantAdjusted);
		if (prev < instantAdjusted) {
			int offsetPrev = getOffset(prev);
			int diff = offsetPrev - offsetLocal;
			if ((instantAdjusted - prev) <= diff) {
				return offsetPrev;
			}
		}
	}}:if (offsetLocal != offsetAdjusted) {


	if ((offsetLocal - offsetAdjusted) < 0) {



		long $0 = nextTransition(instantAdjusted);
		long $1 = nextTransition(instantLocal - offsetAdjusted);
		if ($0 != $1) {
			return offsetLocal;
		}
	}
} else { 	if (offsetLocal >= 0) {
		long $2 = previousTransition(instantAdjusted);
		if ($2 < instantAdjusted) {
			int $3 = getOffset($2);
			int $4 = $3 - offsetLocal;
			if ((instantAdjusted - $2) <= $4) {
				return $3;
			}
		}
	}}
org.joda.time.format.DateTimePrinter p = getFormatter(locale).getPrinter():org.joda.time.format.DateTimePrinter $0 = getFormatter(locale).getPrinter()
if (convId != null) {
	dtz = org.joda.time.DateTimeZone.cProvider.getZone(convId);
}:if (convId != null) {
	dtz = org.joda.time.DateTimeZone.cProvider.getZone(convId);
}
if (offset >= 0) {
	buf.append('+');
} else {
	buf.append('-');
	offset = -offset;
}:if (offset >= 0) {
	buf.append('+');
} else {
	buf.append('-');
	offset = -offset;
}
org.joda.time.format.DateTimeParser p = getFormatter(bucket.getLocale()).getParser():org.joda.time.format.DateTimeParser $0 = getFormatter(bucket.getLocale()).getParser()
if (offsetBefore <= offsetAfter) {
	return instant;
}:if (offsetBefore <= offsetAfter) {
	return instant;
}
if (sm != null) {
	sm.checkPermission(new org.joda.time.JodaTimePermission("DateTimeZone.setDefault"));
}:if (sm != null) {
	sm.checkPermission(new org.joda.time.JodaTimePermission("DateTimeZone.setDefault"));
}
if (providerClass != null) {
	try {
		provider = ((org.joda.time.tz.Provider) (java.lang.Class.forName(providerClass).newInstance()));
	} catch (java.lang.Exception ex) {
		java.lang.Thread thread = java.lang.Thread.currentThread();
		thread.getThreadGroup().uncaughtException(thread, ex);
	}
}:if (providerClass != null) {
	try {
		provider = ((org.joda.time.tz.Provider) (java.lang.Class.forName(providerClass).newInstance()));
	} catch (java.lang.Exception ex) {
		java.lang.Thread $0 = java.lang.Thread.currentThread();
		$0.getThreadGroup().uncaughtException($0, ex);
	}
}
if (provider == null) {
	provider = org.joda.time.DateTimeZone.getDefaultProvider();
}:if (provider == null) {
	provider = org.joda.time.DateTimeZone.getDefaultProvider();
}
synchronized(org.joda.time.format.DateTimeFormat.StyleFormatter.cCache) {
	f = org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.get(key);
	if (f == null) {
		java.lang.String pattern = getPattern(locale);
		f = org.joda.time.format.DateTimeFormat.forPattern(pattern);
		org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f);
	}
}:synchronized(org.joda.time.format.DateTimeFormat.StyleFormatter.cCache) {
	f = org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.get(key);
	if (f == null) {
		java.lang.String $0 = getPattern(locale);
		f = org.joda.time.format.DateTimeFormat.forPattern($0);
		org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f);
	}
}
if (map == null) {

	map = new java.util.HashMap<java.lang.String, java.lang.String>();
	map.put("GMT", "UTC");
	map.put("WET", "WET");
	map.put("CET", "CET");
	map.put("MET", "CET");
	map.put("ECT", "CET");
	map.put("EET", "EET");
	map.put("MIT", "Pacific/Apia");
	map.put("HST", "Pacific/Honolulu");
	map.put("AST", "America/Anchorage");
	map.put("PST", "America/Los_Angeles");
	map.put("MST", "America/Denver");
	map.put("PNT", "America/Phoenix");
	map.put("CST", "America/Chicago");
	map.put("EST", "America/New_York");
	map.put("IET", "America/Indiana/Indianapolis");
	map.put("PRT", "America/Puerto_Rico");
	map.put("CNT", "America/St_Johns");
	map.put("AGT", "America/Argentina/Buenos_Aires");
	map.put("BET", "America/Sao_Paulo");
	map.put("ART", "Africa/Cairo");
	map.put("CAT", "Africa/Harare");
	map.put("EAT", "Africa/Addis_Ababa");
	map.put("NET", "Asia/Yerevan");
	map.put("PLT", "Asia/Karachi");
	map.put("IST", "Asia/Kolkata");
	map.put("BST", "Asia/Dhaka");
	map.put("VST", "Asia/Ho_Chi_Minh");
	map.put("CTT", "Asia/Shanghai");
	map.put("JST", "Asia/Tokyo");
	map.put("ACT", "Australia/Darwin");
	map.put("AET", "Australia/Sydney");
	map.put("SST", "Pacific/Guadalcanal");
	map.put("NST", "Pacific/Auckland");
	org.joda.time.DateTimeZone.cZoneIdConversion = map;
}:if (map == null) {

	map = new java.util.HashMap<java.lang.String, java.lang.String>();
	map.put("GMT", "UTC");
	map.put("WET", "WET");
	map.put("CET", "CET");
	map.put("MET", "CET");
	map.put("ECT", "CET");
	map.put("EET", "EET");
	map.put("MIT", "Pacific/Apia");
	map.put("HST", "Pacific/Honolulu");
	map.put("AST", "America/Anchorage");
	map.put("PST", "America/Los_Angeles");
	map.put("MST", "America/Denver");
	map.put("PNT", "America/Phoenix");
	map.put("CST", "America/Chicago");
	map.put("EST", "America/New_York");
	map.put("IET", "America/Indiana/Indianapolis");
	map.put("PRT", "America/Puerto_Rico");
	map.put("CNT", "America/St_Johns");
	map.put("AGT", "America/Argentina/Buenos_Aires");
	map.put("BET", "America/Sao_Paulo");
	map.put("ART", "Africa/Cairo");
	map.put("CAT", "Africa/Harare");
	map.put("EAT", "Africa/Addis_Ababa");
	map.put("NET", "Asia/Yerevan");
	map.put("PLT", "Asia/Karachi");
	map.put("IST", "Asia/Kolkata");
	map.put("BST", "Asia/Dhaka");
	map.put("VST", "Asia/Ho_Chi_Minh");
	map.put("CTT", "Asia/Shanghai");
	map.put("JST", "Asia/Tokyo");
	map.put("ACT", "Australia/Darwin");
	map.put("AET", "Australia/Sydney");
	map.put("SST", "Pacific/Guadalcanal");
	map.put("NST", "Pacific/Auckland");
	org.joda.time.DateTimeZone.cZoneIdConversion = map;
}
if (zone == null) {
	return org.joda.time.DateTimeZone.getDefault();
}:if (zone == null) {
	return org.joda.time.DateTimeZone.getDefault();
}
if (org.joda.time.DateTimeZone.iFixedOffsetCache == null) {
	org.joda.time.DateTimeZone.iFixedOffsetCache = new java.util.HashMap<java.lang.String, java.lang.ref.SoftReference<org.joda.time.DateTimeZone>>();
}:if (org.joda.time.DateTimeZone.iFixedOffsetCache == null) {
	org.joda.time.DateTimeZone.iFixedOffsetCache = new java.util.HashMap<java.lang.String, java.lang.ref.SoftReference<org.joda.time.DateTimeZone>>();
}
if ((offsetLocal - offsetAdjusted) < 0) {



	long nextLocal = nextTransition(instantAdjusted);
	long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
	if (nextLocal != nextAdjusted) {
		return offsetLocal;
	}
}:if ((offsetLocal - offsetAdjusted) < 0) {



	long $0 = nextTransition(instantAdjusted);
	long $1 = nextTransition(instantLocal - offsetAdjusted);
	if ($0 != $1) {
		return offsetLocal;
	}
}
if (afterStart >= diff) {

	return earlierOrLater ? instant : instant - diff;
} else {

	return earlierOrLater ? instant + diff : instant;
}:if (afterStart >= diff) {

	return earlierOrLater ? instant : instant - diff;
} else {

	return earlierOrLater ? instant + diff : instant;
}
switch (iType) {
	case org.joda.time.format.DateTimeFormat.DATE :
		f = java.text.DateFormat.getDateInstance(iDateStyle, locale);
		break;
	case org.joda.time.format.DateTimeFormat.TIME :
		f = java.text.DateFormat.getTimeInstance(iTimeStyle, locale);
		break;
	case org.joda.time.format.DateTimeFormat.DATETIME :
		f = java.text.DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);
		break;}:switch (iType) {
	case org.joda.time.format.DateTimeFormat.DATE :
		f = java.text.DateFormat.getDateInstance(iDateStyle, locale);
		break;
	case org.joda.time.format.DateTimeFormat.TIME :
		f = java.text.DateFormat.getTimeInstance(iTimeStyle, locale);
		break;
	case org.joda.time.format.DateTimeFormat.DATETIME :
		f = java.text.DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);
		break;}
return ((java.text.SimpleDateFormat) (f)).toPattern():return ((java.text.SimpleDateFormat) (f)).toPattern()
p.printTo(buf, partial, locale):p.printTo(buf, partial, locale)
if (offsetLocalFromOriginal == offsetOriginal) {
	return instantUTC;
}:if (offsetLocalFromOriginal == offsetOriginal) {
	return instantUTC;
}
org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f):org.joda.time.format.DateTimeFormat.StyleFormatter.cCache.put(key, f)
if (temp == null) {
	temp = org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone.getDefault());
}:if (temp == null) {
	temp = org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone.getDefault());
}
if (zone == null) {
	throw new java.lang.IllegalArgumentException("The datetime zone must not be null");
}:if (zone == null) {
	throw new java.lang.IllegalArgumentException("The datetime zone must not be null");
}
if (!org.joda.time.DateTimeZone.UTC.equals(provider.getZone("UTC"))) {
	throw new java.lang.IllegalArgumentException("Invalid UTC zone provided");
}:if (!org.joda.time.DateTimeZone.UTC.equals(provider.getZone("UTC"))) {
	throw new java.lang.IllegalArgumentException("Invalid UTC zone provided");
}
p.printTo(out, instant, chrono, displayOffset, displayZone, locale):p.printTo(out, instant, chrono, displayOffset, displayZone, locale)
if (name != null) {
	return name;
}:if (name != null) {
	return name;
}
if ((hoursOffset == 0) && (minutesOffset == 0)) {
	return org.joda.time.DateTimeZone.UTC;
}:if ((hoursOffset == 0) && (minutesOffset == 0)) {
	return org.joda.time.DateTimeZone.UTC;
}
if (sm != null) {
	sm.checkPermission(new org.joda.time.JodaTimePermission("DateTimeZone.setNameProvider"));
}:if (sm != null) {
	sm.checkPermission(new org.joda.time.JodaTimePermission("DateTimeZone.setNameProvider"));
}
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 1
java.lang.IllegalArgumentException: Comparison method violates its general contract!
java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeHi(TimSort.java:899)
	at java.util.TimSort.mergeAt(TimSort.java:516)
	at java.util.TimSort.mergeCollapse(TimSort.java:441)
	at java.util.TimSort.sort(TimSort.java:245)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 3.386
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 2328.388


Node: df23648b85e3



Date: Tue Oct 29 05:12:51 EDT 2019

cd /script/jGenProg_Defects4J_Time_9;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Time-9 \
	-failing org.joda.time.TestDateTimeZone \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope local \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Time_9/target/classes/:/script/jGenProg_Defects4J_Time_9/target/test-classes/:/defects4j/framework/projects/Time/lib/joda-convert-1.2.jar:/defects4j/framework/projects/Time/lib/junit-3.8.2.jar:/defects4j/framework/projects/Time/lib/junit/junit/3.8.2/junit-3.8.2.jar:/defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

