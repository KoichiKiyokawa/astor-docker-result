Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO ] fr.inria.astor.core.setup.ProjectConfiguration.getVersionJDK(ProjectConfiguration.java:282) - Version of the JVM used: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:383) - Java version of the JDK used to run tests: 1.7.0_181
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:384) - The compliance of the JVM is:  7
[INFO ] fr.inria.main.AbstractMain.processArguments(AbstractMain.java:662) - command line arguments: [-mode  jgenprog  -location  .  -id  Math-19  -failing  org.apache.commons.math3.optimization.direct.CMAESOptimizerTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Math_19/target/classes/:/script/jGenProg_Defects4J_Math_19/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.main.evolution.AstorMain.execute(AstorMain.java:228) - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:964) - Source folders: [/script/jGenProg_Defects4J_Math_19/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:983) - Source Test folders: [/script/jGenProg_Defects4J_Math_19/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:105) - mode is Leven
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_19/./output_astor/AstorMain-Math-19//bin//default from 674 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_19/./output_astor/AstorMain-Math-19//bin//default, /script/jGenProg_Defects4J_Math_19/target/classes/, /script/jGenProg_Defects4J_Math_19/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testSampling
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetCovarianceMatrix
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testBoundaryRangeTooLarge
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SqrtTest#testDerivativesHighOrder
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.dfp.DfpTest#testMultiply
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4178, fails: 87, GZoltar suspicious 28945, with positive susp 4198
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4178
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 1000 with susp > 0.1, we consider: 1000
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:955) - Setting up the max to 4802970 milliseconds (4802 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:801) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_19/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:70) - building model: /script/jGenProg_Defects4J_Math_19/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:84) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_19/target/classes/, /script/jGenProg_Defects4J_Math_19/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:836) - Number of CtTypes created: 617
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.1608168802256692]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.1608168802256692]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.1608168802256692]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.1608168802256692]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem$Model, methodName=value(D)D, lineNumber=150, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=79, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=80, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=81, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=83, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=92, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=93, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=94, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=96, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=54, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=55, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=74, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=75, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=76, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=77, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=80, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=target()[D, lineNumber=84, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=88, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=89, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=90, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=91, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=94, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=98, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=101, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=102, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=103, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=104, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=107, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=127, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=128, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=129, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=130, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=132, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=133, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=316, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=319, susp=0.15161960871578067]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.12615514005935402]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.12615514005935402]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=77, susp=0.12379689211803459]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.11177545850247397]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 1000,  331
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 331
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 331, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_19/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 4802970
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.optimization.direct.CMAESOptimizerTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-19
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_19/target/classes/:/script/jGenProg_Defects4J_Math_19/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> near
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> $0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D.LazyHolder.INSTANCE
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D.getInstance()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: reset(p1, p2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.direction = line.direction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.zero = line.zero
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = p2.subtract(p1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = p2.subtract(p1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double norm2 = delta.getNormSq()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = delta.getNormSq()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (norm2 == 0.0) {
	throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.direction = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0 / org.apache.commons.math3.util.FastMath.sqrt(norm2), delta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: zero = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, p1, (-p1.dotProduct(delta)) / norm2, delta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.Line(zero, zero.subtract(direction))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return direction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return zero
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return point.subtract(zero).dotProduct(direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, zero, abscissa, direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(getAbscissa(((org.apache.commons.math3.geometry.euclidean.threed.Vector3D) (point))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return pointAt(((org.apache.commons.math3.geometry.euclidean.oned.Vector1D) (point)).getX())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((angle < 1.0E-10) || (angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10))) && contains(line.zero)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return distance(p) < 1.0E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D d = p.subtract(zero)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = p.subtract(zero)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D n = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, d, -d.dotProduct(direction), direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, d, -d.dotProduct(direction), direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return n.getNorm()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D normal = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(direction, line.direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(direction, line.direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double n = normal.getNorm()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = normal.getNorm()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return distance(line.zero)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < org.apache.commons.math3.util.Precision.SAFE_MIN) {

	return distance(line.zero);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double offset = line.zero.subtract(zero).dotProduct(normal) / n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = line.zero.subtract(zero).dotProduct(normal) / n
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(offset)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cos = direction.dotProduct(line.direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = direction.dotProduct(line.direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double n = 1 - (cos * cos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1 - (cos * cos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (n < org.apache.commons.math3.util.Precision.EPSILON) {

	return zero;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta0 = line.zero.subtract(zero)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = line.zero.subtract(zero)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a = delta0.dotProduct(direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = delta0.dotProduct(direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b = delta0.dotProduct(line.direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = delta0.dotProduct(line.direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1, zero, (a - (b * cos)) / n, direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D closest = closestPoint(line)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = closestPoint(line)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return line.contains(closest) ? closest : null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.SubLine(this, new org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.u = u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this.v = v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: w = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(u, v)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector projector = new org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector $0 = new org.apache.commons.math3.geometry.euclidean.threed.OutlineExtractor.BoundaryProjector()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: polyhedronsSet.getTree(true).visit(projector)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projected = projector.getProjected()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $0 = projector.getProjected()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] outline = projected.getVertices()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $0 = projected.getVertices()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] rawLoop = outline[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $0 = outline[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int end = rawLoop.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = rawLoop.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: rawLoop[k] = rawLoop[k + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = j; $0 < (end - 1); ++$0) {
	rawLoop[$0] = rawLoop[$0 + 1];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: --end
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: ++j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (pointIsBetween(rawLoop, end, j)) {

	for (int $0 = j; $0 < (end - 1); ++$0) {
		rawLoop[$0] = rawLoop[$0 + 1];
	}
	--end;
} else {

	++j;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (j < end) {
	if (pointIsBetween(rawLoop, end, j)) {

		for (int $0 = j; $0 < (end - 1); ++$0) {
			rawLoop[$0] = rawLoop[$0 + 1];
		}
		--end;
	} else {

		++j;
	}
} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: outline[i] = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[end]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: java.lang.System.arraycopy(rawLoop, 0, outline[i], 0, end)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (end != rawLoop.length) {

	outline[i] = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[end];
	java.lang.System.arraycopy(rawLoop, 0, outline[i], 0, end);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] rawLoop = outline[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int end = $1.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int k = $3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < outline.length; ++$0) {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $1 = outline[$0];
	int $2 = $1.length;
	int $3 = 0;
	while ($3 < $2) {
		if (pointIsBetween($1, $2, $3)) {

			for (int $4 = $3; $4 < ($2 - 1); ++$4) {
				$1[$4] = $1[$4 + 1];
			}
			--$2;
		} else {

			++$3;
		}
	} 
	if ($2 != $1.length) {

		outline[$0] = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[$2];
		java.lang.System.arraycopy($1, 0, outline[$0], 0, $2);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return outline
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D previous = loop[((i + n) - 1) % n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D $0 = loop[((i + n) - 1) % n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D current = loop[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D $0 = loop[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D next = loop[(i + 1) % n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D $0 = loop[(i + 1) % n]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dx1 = current.getX() - previous.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = current.getX() - previous.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dy1 = current.getY() - previous.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = current.getY() - previous.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dx2 = next.getX() - current.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = next.getX() - current.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dy2 = next.getY() - current.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = next.getY() - current.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double cross = (dx1 * dy2) - (dx2 * dy1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (dx1 * dy2) - (dx2 * dy1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dot = (dx1 * dx2) + (dy1 * dy2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (dx1 * dx2) + (dy1 * dy2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d1d2 = org.apache.commons.math3.util.FastMath.sqrt(((dx1 * dx1) + (dy1 * dy1)) * ((dx2 * dx2) + (dy2 * dy2)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.util.FastMath.sqrt(((dx1 * dx1) + (dy1 * dy1)) * ((dx2 * dx2) + (dy2 * dy2)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return (org.apache.commons.math3.util.FastMath.abs(cross) <= (1.0E-6 * d1d2)) && (dot >= 0.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: projected = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet(new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.FALSE))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor.Order.MINUS_SUB_PLUS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.BoundaryAttribute<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> attribute = 
((org.apache.commons.math3.geometry.partitioning.BoundaryAttribute<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) (node.getAttribute()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.BoundaryAttribute<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> $0 = 
((org.apache.commons.math3.geometry.partitioning.BoundaryAttribute<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) (node.getAttribute()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: addContribution(attribute.getPlusOutside(), false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (attribute.getPlusOutside() != null) {
	addContribution(attribute.getPlusOutside(), false);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: addContribution(attribute.getPlusInside(), true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (attribute.getPlusInside() != null) {
	addContribution(attribute.getPlusInside(), true);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> absFacet = 
((org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) (facet))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> $0 = 
((org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) (facet))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (facet.getHyperplane()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (facet.getHyperplane()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double scal = plane.getNormal().dotProduct(w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane.getNormal().dotProduct(w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices = 
((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) (absFacet.getRemainingRegion())).getVertices()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $0 = 
((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) (absFacet.getRemainingRegion())).getVertices()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] newVertices = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[vertices.length][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $0 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[vertices.length][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop = vertices[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $0 = vertices[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] newLoop = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $0 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newLoop[0] = null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newLoop[j] = loop[loop.length - j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 1; $0 < loop.length; ++$0) {
	newLoop[$0] = loop[loop.length - $0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newLoop[j] = loop[loop.length - (j + 1)]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < loop.length; ++$0) {
	newLoop[$0] = loop[loop.length - ($0 + 1)];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (loop[0] == null) {
	newLoop[0] = null;
	for (int $0 = 1; $0 < loop.length; ++$0) {
		newLoop[$0] = loop[loop.length - $0];
	}
} else {
	for (int $1 = 0; $1 < loop.length; ++$1) {
		newLoop[$1] = loop[loop.length - ($1 + 1)];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: newVertices[i] = newLoop
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop = vertices[$0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] newLoop = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[$1.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (int $0 = 0; $0 < vertices.length; ++$0) {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $1 = vertices[$0];
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[$1.length];
	if ($1[0] == null) {
		$2[0] = null;
		for (int $3 = 1; $3 < $1.length; ++$3) {
			$2[$3] = $1[$1.length - $3];
		}
	} else {
		for (int $4 = 0; $4 < $1.length; ++$4) {
			$2[$4] = $1[$1.length - ($4 + 1)];
		}
	}
	newVertices[$0] = $2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: vertices = newVertices
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] newVertices = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[vertices.length][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop = vertices[$1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] newLoop = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[$2.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if ((scal < 0) ^ reversed) {


	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $0 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[vertices.length][];
	for (int $1 = 0; $1 < vertices.length; ++$1) {
		final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $2 = vertices[$1];
		final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $3 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[$2.length];
		if ($2[0] == null) {
			$3[0] = null;
			for (int $4 = 1; $4 < $2.length; ++$4) {
				$3[$4] = $2[$2.length - $4];
			}
		} else {
			for (int $5 = 0; $5 < $2.length; ++$5) {
				$3[$5] = $2[$2.length - ($5 + 1)];
			}
		}
		$0[$1] = $3;
	}


	vertices = $0;

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> $0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final boolean closed = loop[0] != null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final boolean $0 = loop[0] != null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int previous = (closed) ? loop.length - 1 : 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = (closed) ? loop.length - 1 : 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.threed.Vector3D previous3D = plane.toSpace(loop[previous])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = plane.toSpace(loop[previous])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int current = (previous + 1) % loop.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: int $0 = (previous + 1) % loop.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.twod.Vector2D pPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(previous3D.dotProduct(u), 
previous3D.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.geometry.euclidean.twod.Vector2D $0 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(previous3D.dotProduct(u), 
previous3D.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D current3D = plane.toSpace(loop[current])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = plane.toSpace(loop[current])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D cPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(current3D.dotProduct(u), 
current3D.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D $0 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(current3D.dotProduct(u), 
current3D.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line line = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, cPoint)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Line $0 = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, cPoint)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> edge = line.wholeHyperplane()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> $0 = line.wholeHyperplane()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = line.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = line.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, angle)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Line $0 = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, angle)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: edge = edge.split(l).getPlus()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = line.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, $0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (closed || (previous != 1)) {


	final double $0 = line.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI);
	final org.apache.commons.math3.geometry.euclidean.twod.Line $1 = 
	new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, $0);
	edge = edge.split($1).getPlus();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(cPoint, angle)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Line $0 = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(cPoint, angle)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: edge = edge.split(l).getMinus()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = line.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(cPoint, $0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (closed || (current != (loop.length - 1))) {


	final double $0 = line.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI);
	final org.apache.commons.math3.geometry.euclidean.twod.Line $1 = 
	new org.apache.commons.math3.geometry.euclidean.twod.Line(cPoint, $0);
	edge = edge.split($1).getMinus();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: edges.add(edge)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: previous = current++
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: previous3D = current3D
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: pPoint = cPoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D current3D = plane.toSpace(loop[current])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D cPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($0.dotProduct(u), 
$0.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line line = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, $1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> edge = $2.wholeHyperplane()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = $2.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, $4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = $2.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line($1, $6)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: while (current < loop.length) {

	final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = plane.toSpace(loop[current]);
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D $1 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($0.dotProduct(u), 
	$0.dotProduct(v));
	final org.apache.commons.math3.geometry.euclidean.twod.Line $2 = 
	new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, $1);
	org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> $3 = $2.wholeHyperplane();

	if (closed || (previous != 1)) {


		final double $4 = $2.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI);
		final org.apache.commons.math3.geometry.euclidean.twod.Line $5 = 
		new org.apache.commons.math3.geometry.euclidean.twod.Line(pPoint, $4);
		$3 = $3.split($5).getPlus();
	}

	if (closed || (current != (loop.length - 1))) {


		final double $6 = $2.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI);
		final org.apache.commons.math3.geometry.euclidean.twod.Line $7 = 
		new org.apache.commons.math3.geometry.euclidean.twod.Line($1, $6);
		$3 = $3.split($7).getMinus();
	}

	edges.add($3);

	previous = current++;
	previous3D = $0;
	pPoint = $1;

} 
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final boolean closed = $0[0] != null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int previous = ($1) ? $0.length - 1 : 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.threed.Vector3D previous3D = plane.toSpace($0[$2])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int current = ($2 + 1) % $0.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.twod.Vector2D pPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($3.dotProduct(u), 
$3.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D current3D = plane.toSpace($0[$4])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D cPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($6.dotProduct(u), 
$6.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line line = 
new org.apache.commons.math3.geometry.euclidean.twod.Line($5, $7)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> edge = $8.wholeHyperplane()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = $8.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line($5, $10)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = $8.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line($7, $12)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: for (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $0 : vertices) {
	final boolean $1 = $0[0] != null;
	int $2 = ($1) ? $0.length - 1 : 1;
	org.apache.commons.math3.geometry.euclidean.threed.Vector3D $3 = plane.toSpace($0[$2]);
	int $4 = ($2 + 1) % $0.length;
	org.apache.commons.math3.geometry.euclidean.twod.Vector2D $5 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($3.dotProduct(u), 
	$3.dotProduct(v));
	while ($4 < $0.length) {

		final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $6 = plane.toSpace($0[$4]);
		final org.apache.commons.math3.geometry.euclidean.twod.Vector2D $7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($6.dotProduct(u), 
		$6.dotProduct(v));
		final org.apache.commons.math3.geometry.euclidean.twod.Line $8 = 
		new org.apache.commons.math3.geometry.euclidean.twod.Line($5, $7);
		org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> $9 = $8.wholeHyperplane();

		if ($1 || ($2 != 1)) {


			final double $10 = $8.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI);
			final org.apache.commons.math3.geometry.euclidean.twod.Line $11 = 
			new org.apache.commons.math3.geometry.euclidean.twod.Line($5, $10);
			$9 = $9.split($11).getPlus();
		}

		if ($1 || ($4 != ($0.length - 1))) {


			final double $12 = $8.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI);
			final org.apache.commons.math3.geometry.euclidean.twod.Line $13 = 
			new org.apache.commons.math3.geometry.euclidean.twod.Line($7, $12);
			$9 = $9.split($13).getMinus();
		}

		edges.add($9);

		$2 = $4++;
		$3 = $6;
		$5 = $7;

	} 
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projectedFacet = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet(edges)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet(edges)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: projected = ((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) (new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>().union(projected, projectedFacet)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vertices = 
((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) (absFacet.getRemainingRegion())).getVertices()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] newVertices = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[$0.length][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int i = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop = $0[$2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] newLoop = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[$3.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int j = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] loop
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final boolean closed = $8[0] != null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int previous = ($9) ? $8.length - 1 : 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.threed.Vector3D previous3D = plane.toSpace($8[$10])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: int current = ($10 + 1) % $8.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.euclidean.twod.Vector2D pPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($11.dotProduct(u), 
$11.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D current3D = plane.toSpace($8[$12])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D cPoint = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($14.dotProduct(u), 
$14.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line line = 
new org.apache.commons.math3.geometry.euclidean.twod.Line($13, $15)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> edge = $16.wholeHyperplane()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = $16.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line($13, $18)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = $16.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Line l = 
new org.apache.commons.math3.geometry.euclidean.twod.Line($15, $20)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet projectedFacet = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet($7)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.abs(scal) > 0.001) {
	org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $0 = 
	((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) (absFacet.getRemainingRegion())).getVertices();

	if ((scal < 0) ^ reversed) {


		final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] $1 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[$0.length][];
		for (int $2 = 0; $2 < $0.length; ++$2) {
			final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $3 = $0[$2];
			final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $4 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[$3.length];
			if ($3[0] == null) {
				$4[0] = null;
				for (int $5 = 1; $5 < $3.length; ++$5) {
					$4[$5] = $3[$3.length - $5];
				}
			} else {
				for (int $6 = 0; $6 < $3.length; ++$6) {
					$4[$6] = $3[$3.length - ($6 + 1)];
				}
			}
			$1[$2] = $4;
		}


		$0 = $1;

	}


	final java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> $7 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>();
	for (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $8 : $0) {
		final boolean $9 = $8[0] != null;
		int $10 = ($9) ? $8.length - 1 : 1;
		org.apache.commons.math3.geometry.euclidean.threed.Vector3D $11 = plane.toSpace($8[$10]);
		int $12 = ($10 + 1) % $8.length;
		org.apache.commons.math3.geometry.euclidean.twod.Vector2D $13 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($11.dotProduct(u), 
		$11.dotProduct(v));
		while ($12 < $8.length) {

			final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $14 = plane.toSpace($8[$12]);
			final org.apache.commons.math3.geometry.euclidean.twod.Vector2D $15 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D($14.dotProduct(u), 
			$14.dotProduct(v));
			final org.apache.commons.math3.geometry.euclidean.twod.Line $16 = 
			new org.apache.commons.math3.geometry.euclidean.twod.Line($13, $15);
			org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> $17 = $16.wholeHyperplane();

			if ($9 || ($10 != 1)) {


				final double $18 = $16.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI);
				final org.apache.commons.math3.geometry.euclidean.twod.Line $19 = 
				new org.apache.commons.math3.geometry.euclidean.twod.Line($13, $18);
				$17 = $17.split($19).getPlus();
			}

			if ($9 || ($12 != ($8.length - 1))) {


				final double $20 = $16.getAngle() + (0.5 * org.apache.commons.math3.util.FastMath.PI);
				final org.apache.commons.math3.geometry.euclidean.twod.Line $21 = 
				new org.apache.commons.math3.geometry.euclidean.twod.Line($15, $20);
				$17 = $17.split($21).getMinus();
			}

			$7.add($17);

			$10 = $12++;
			$11 = $14;
			$13 = $15;

		} 
	}
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $22 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet($7);


	projected = ((org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet) (new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>().union(projected, $22)));

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return projected
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setNormal(normal)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: originOffset = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setFrame()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: originOffset = -p.dotProduct(w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: originOffset = plane.originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: origin = plane.origin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: u = plane.u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: v = plane.v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: w = plane.w
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.Plane(this)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: originOffset = original.originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: origin = original.origin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: u = original.u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: v = original.v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: w = original.w
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double norm = normal.getNorm()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = normal.getNorm()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (norm < 1.0E-10) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NORM);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: w = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0 / norm, normal)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: origin = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(-originOffset, w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: u = w.orthogonal()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: v = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, u)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return origin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return w
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D tmp = u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: u = v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: v = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: w = w.negate()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: originOffset = -originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(point.dotProduct(u), point.dotProduct(v))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D p2D = ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (point))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D $0 = ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (point))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(inPlane.getX(), u, inPlane.getY(), v, offset - originOffset, w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((angle < 1.0E-10) && (org.apache.commons.math3.util.FastMath.abs(originOffset - plane.originOffset) < 1.0E-10)) || 
((angle > (org.apache.commons.math3.util.FastMath.PI - 1.0E-10)) && (org.apache.commons.math3.util.FastMath.abs(originOffset + plane.originOffset) < 1.0E-10))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = origin.subtract(center)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: plane.u = rotation.applyTo(u)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: plane.v = rotation.applyTo(v)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return plane
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: plane.u = u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: plane.v = v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = line.getDirection()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = line.getDirection()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double dot = w.dotProduct(direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = w.dotProduct(direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return null
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.abs(dot) < 1.0E-10) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = line.toSpace(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = line.toSpace(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.ZERO)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double k = (-(originOffset + w.dotProduct(point))) / dot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (-(originOffset + w.dotProduct(point))) / dot
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, point, k, direction)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (direction.getNorm() < 1.0E-10) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.Line(point, point.add(direction))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a1 = plane1.w.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane1.w.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b1 = plane1.w.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane1.w.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double c1 = plane1.w.getZ()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane1.w.getZ()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d1 = plane1.originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane1.originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a2 = plane2.w.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane2.w.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b2 = plane2.w.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane2.w.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double c2 = plane2.w.getZ()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane2.w.getZ()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d2 = plane2.originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane2.originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a3 = plane3.w.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane3.w.getX()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b3 = plane3.w.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane3.w.getY()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double c3 = plane3.w.getZ()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane3.w.getZ()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double d3 = plane3.originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = plane3.originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double a23 = (b2 * c3) - (b3 * c2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (b2 * c3) - (b3 * c2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double b23 = (c2 * a3) - (c3 * a2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (c2 * a3) - (c3 * a2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double c23 = (a2 * b3) - (a3 * b2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = (a2 * b3) - (a3 * b2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double determinant = ((a1 * a23) + (b1 * b23)) + (c1 * c23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = ((a1 * a23) + (b1 * b23)) + (c1 * c23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (org.apache.commons.math3.util.FastMath.abs(determinant) < 1.0E-10) {
	return null;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double r = 1.0 / determinant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = 1.0 / determinant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(
((((-a23) * d1) - (((c1 * b3) - (c3 * b1)) * d2)) - (((c2 * b1) - (c1 * b2)) * d3)) * r, 
((((-b23) * d1) - (((c3 * a1) - (c1 * a3)) * d2)) - (((c1 * a2) - (c2 * a1)) * d3)) * r, 
((((-c23) * d1) - (((b1 * a3) - (b3 * a1)) * d2)) - (((b2 * a1) - (b1 * a2)) * d3)) * r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.SubPlane(this, new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return org.apache.commons.math3.util.FastMath.abs(getOffset(p)) < 1.0E-10
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return point.dotProduct(w) + originOffset
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (other)).w.dotProduct(w) > 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> $0 = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return boundary.getTree(false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(tree)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: getTree(true).visit(new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet.FacetsContributionVisitor())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setSize(java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setBarycenter(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setSize(getSize() / 3.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setBarycenter(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0 / (4 * getSize()), ((org.apache.commons.math3.geometry.euclidean.threed.Vector3D) (getBarycenter()))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (getSize() < 0) {


	setSize(java.lang.Double.POSITIVE_INFINITY);
	setBarycenter(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN);
} else {

	setSize(getSize() / 3.0);
	setBarycenter(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0 / (4 * getSize()), ((org.apache.commons.math3.geometry.euclidean.threed.Vector3D) (getBarycenter()))));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setSize(0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setBarycenter(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, 0))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> polygon = ((org.apache.commons.math3.geometry.euclidean.threed.SubPlane) (facet)).getRemainingRegion()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> $0 = ((org.apache.commons.math3.geometry.euclidean.threed.SubPlane) (facet)).getRemainingRegion()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final double area = polygon.getSize()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final double $0 = polygon.getSize()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D facetB = plane.toSpace(polygon.getBarycenter())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $0 = plane.toSpace(polygon.getBarycenter())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double scaled = area * facetB.dotProduct(plane.getNormal())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: double $0 = area * facetB.dotProduct(plane.getNormal())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: scaled = -scaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (reversed) {
	scaled = -scaled;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setSize(getSize() + scaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: setBarycenter(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, ((org.apache.commons.math3.geometry.euclidean.threed.Vector3D) (getBarycenter())), scaled, facetB))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (facet.getHyperplane()))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D facetB = $0.toSpace(polygon.getBarycenter())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: double scaled = area * $1.dotProduct($0.getNormal())
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: if (java.lang.Double.isInfinite(area)) {
	setSize(java.lang.Double.POSITIVE_INFINITY);
	setBarycenter(org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN);
} else {

	final org.apache.commons.math3.geometry.euclidean.threed.Plane $0 = ((org.apache.commons.math3.geometry.euclidean.threed.Plane) (facet.getHyperplane()));
	final org.apache.commons.math3.geometry.euclidean.threed.Vector3D $1 = $0.toSpace(polygon.getBarycenter());
	double $2 = area * $1.dotProduct($0.getNormal());
	if (reversed) {
		$2 = -$2;
	}

	setSize(getSize() + $2);
	setBarycenter(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0, ((org.apache.commons.math3.geometry.euclidean.threed.Vector3D) (getBarycenter())), $2, $1));

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:127) - normalized: return recurseFirstIntersection(getTree(true), point, line)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:121) - localVar: final org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> cut = node.getCut()
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 1
spoon.refactoring.RefactoringException: CtLocalVariableImpl with name $0 is in conflict.
spoon.refactoring.RefactoringException: CtLocalVariableImpl with name $0 is in conflict.
	at spoon.refactoring.CtRenameLocalVariableRefactoring.createNameConflictIssue(CtRenameLocalVariableRefactoring.java:243)
	at spoon.refactoring.CtRenameLocalVariableRefactoring.detectNameConflicts(CtRenameLocalVariableRefactoring.java:147)
	at spoon.refactoring.AbstractRenameRefactoring.detectIssues(AbstractRenameRefactoring.java:45)
	at spoon.refactoring.AbstractRenameRefactoring.refactor(AbstractRenameRefactoring.java:37)
	at spoon.refactoring.Refactoring.changeLocalVariableName(Refactoring.java:206)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:122)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.lambda$getFixIngredient$0(LevenSearchStrategy.java:49)
	at java.util.ArrayList.forEach(ArrayList.java:1249)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:49)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:207)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:251)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:222)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 2.357
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:186) - 
 --SOLUTIONS DESCRIPTION--


Astor Output:

General stats:
EXECUTION_IDENTIFIER=Math-19
TOTAL_TIME=2.357
NR_GENERATIONS=1
NR_RIGHT_COMPILATIONS=null
NR_FAILLING_COMPILATIONS=null
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=ERROR

Patch stats:

[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:212) - Time Total(s): 3944.889


Node: c486d6a87f84



Date: Mon Oct 28 03:10:26 EDT 2019

cd /script/jGenProg_Defects4J_Math_19;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-19 \
	-failing org.apache.commons.math3.optimization.direct.CMAESOptimizerTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Math_19/target/classes/:/script/jGenProg_Defects4J_Math_19/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

